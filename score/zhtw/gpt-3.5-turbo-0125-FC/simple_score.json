{"accuracy": 0.8375, "correct_count": 335, "total_count": 400}
{"id": 3, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_2", "question": "\u8a08\u7b97\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u659c\u908a\u9577\uff0c\u5df2\u77e5\u53e6\u5916\u5169\u908a\u9577\u70ba4\u548c5\u3002", "function": {"name": "math.hypot", "description": "Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.", "parameters": {"type": "dict", "properties": {"x": {"type": "integer", "description": "The x-coordinate value."}, "y": {"type": "integer", "description": "The y-coordinate value."}, "z": {"type": "integer", "description": "Optional. The z-coordinate value. Default is 0."}}, "required": ["x", "y"]}}}, "model_result_raw": [{"math_hypot": "{\"x\": 4, \"y\": 5}"}, {"math_hypot": "{\"x\": 4, \"y\": 5, \"z\": 0}"}], "model_result_decoded": [{"math_hypot": {"x": 4, "y": 5}}, {"math_hypot": {"x": 4, "y": 5, "z": 0}}], "possible_answer": {"math.hypot": {"x": [4], "y": [5], "z": ["", 0]}}}
{"id": 14, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": "\u8a08\u7b97\u66f2\u7dday=x^2\u5728x=1\u5230x=3\u4e4b\u9593\u7684\u9762\u7a4d\u3002", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": [{"calculate_area_under_curve": "{\"function\":\"x**2\",\"interval\":[1,3]}"}], "model_result_decoded": [{"calculate_area_under_curve": {"function": "x**2", "interval": [1, 3]}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y = x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal", "\u68af\u5f62"]}}}
{"id": 20, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_19", "question": "\u8a08\u7b97\u5169\u500b\u6578\u5b57\u7684\u6700\u5927\u516c\u7d04\u6578\uff1a40\u548c50", "function": {"name": "math.gcd", "description": "Compute the greatest common divisor of two numbers", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}}, "model_result_raw": [{"math_gcd": "{\"num1\": 40, \"num2\": 50}"}, {"math_gcd": "{\"num1\": 50, \"num2\": 40}"}], "model_result_decoded": [{"math_gcd": {"num1": 40, "num2": 50}}, {"math_gcd": {"num1": 50, "num2": 40}}], "possible_answer": {"math.gcd": {"num1": [40], "num2": [50]}}}
{"id": 21, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_20", "question": "\u627e\u51fa36\u548c24\u7684\u6700\u5927\u516c\u56e0\u6578\u3002", "function": {"name": "math.hcf", "description": "Calculate the highest common factor of two numbers.", "parameters": {"type": "dict", "properties": {"number1": {"type": "integer", "description": "First number."}, "number2": {"type": "integer", "description": "Second number."}}, "required": ["number1", "number2"]}}}, "model_result_raw": [{"math_hcf": "{\"number1\": 36, \"number2\": 24}"}, {"math_hcf": "{\"number1\": 24, \"number2\": 36}"}], "model_result_decoded": [{"math_hcf": {"number1": 36, "number2": 24}}, {"math_hcf": {"number1": 24, "number2": 36}}], "possible_answer": {"math.hcf": {"number1": [36], "number2": [24]}}}
{"id": 23, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_22", "question": "\u8a08\u7b97\u5169\u500b\u7d66\u5b9a\u6578\u5b57\u7684\u6700\u5927\u516c\u7d04\u6578\uff0c\u4f8b\u598212\u548c15\u3002", "function": {"name": "math.gcd", "description": "Calculate the greatest common divisor (gcd) of the two integers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}}, "model_result_raw": [{"math_gcd": "{\"num1\": 12, \"num2\": 15}"}, {"math_gcd": "{\"num1\": 24, \"num2\": 36}"}], "model_result_decoded": [{"math_gcd": {"num1": 12, "num2": 15}}, {"math_gcd": {"num1": 24, "num2": 36}}], "possible_answer": {"math.gcd": {"num1": [12], "num2": [15]}}}
{"id": 25, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_24", "question": "\u627e\u51fa12\u548c18\u7684\u6700\u5927\u516c\u56e0\u6578\uff08GCD\uff09", "function": {"name": "math.gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "First number."}, "num2": {"type": "integer", "description": "Second number."}}, "required": ["num1", "num2"]}}}, "model_result_raw": [{"math_gcd": "{\"num1\": 12, \"num2\": 18}"}, {"math_gcd": "{\"num1\": 18, \"num2\": 12}"}], "model_result_decoded": [{"math_gcd": {"num1": 12, "num2": 18}}, {"math_gcd": {"num1": 18, "num2": 12}}], "possible_answer": {"math.gcd": {"num1": [12], "num2": [18]}}}
{"id": 37, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'unit': 'mi'. Expected one of ['km', '', '\u516c\u91cc']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_36", "question": "\u5c0b\u627e\u7d10\u7d04\u5e02\u548c\u83ef\u76db\u9813\u7279\u5340\u4e4b\u9593\u7684\u6700\u77ed\u99d5\u99db\u8ddd\u96e2\u3002", "function": {"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting point of the journey. You should format it as city name like Boston."}, "destination": {"type": "string", "description": "End point of the journey. You should format it as city name like Boston."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is 'km')."}}, "required": ["origin", "destination"]}}}, "model_result_raw": [{"get_shortest_driving_distance": "{\"origin\":\"New York City\",\"destination\":\"Washington D.C.\",\"unit\":\"mi\"}"}], "model_result_decoded": [{"get_shortest_driving_distance": {"origin": "New York City", "destination": "Washington D.C.", "unit": "mi"}}], "possible_answer": {"get_shortest_driving_distance": {"origin": ["New York City", "\u7d10\u7d04\u5e02"], "destination": ["Washington D.C.", "\u83ef\u76db\u9813\u7279\u5340"], "unit": ["km", "", "\u516c\u91cc"]}}}
{"id": 38, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_37", "question": "\u5c0b\u627e\u7531\u820a\u91d1\u5c71\u958b\u8eca\u524d\u5f80\u6d1b\u6749\u78ef\uff0c\u5728\u8056\u5854\u82ad\u82ad\u62c9\u548c\u8499\u7279\u96f7\u505c\u7559\u7684\u9810\u8a08\u65c5\u884c\u6642\u9593\u3002", "function": {"name": "route.estimate_time", "description": "Estimate the travel time for a specific route with optional stops.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point for the journey. It should be format as city name such as Boston."}, "end_location": {"type": "string", "description": "The destination for the journey. It should be format as city name such as Boston."}, "stops": {"type": "array", "items": {"type": "string"}, "description": "Additional cities or points of interest to stop at during the journey. Default is an empty list."}}, "required": ["start_location", "end_location"]}}}, "model_result_raw": [{"route_estimate_time": "{\"start_location\": \"San Francisco\", \"end_location\": \"Los Angeles\"}"}, {"route_estimate_time": "{\"start_location\": \"San Francisco\", \"end_location\": \"Santa Barbara\"}"}, {"route_estimate_time": "{\"start_location\": \"San Francisco\", \"end_location\": \"Monterey\"}"}], "model_result_decoded": [{"route_estimate_time": {"start_location": "San Francisco", "end_location": "Los Angeles"}}, {"route_estimate_time": {"start_location": "San Francisco", "end_location": "Santa Barbara"}}, {"route_estimate_time": {"start_location": "San Francisco", "end_location": "Monterey"}}], "possible_answer": {"route.estimate_time": {"start_location": ["San Francisco", "\u820a\u91d1\u5c71"], "end_location": ["Los Angeles", "\u6d1b\u6749\u78ef"], "stops": [["Santa Barbara", "Monterey"], ["Monterey", "Santa Barbara"], ["\u8056\u5854\u82ad\u82ad\u62c9", "\u8499\u7279\u96f7"], ["\u8499\u7279\u96f7", "\u8056\u5854\u82ad\u82ad\u62c9"]]}}}
{"id": 46, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_45", "question": "\u8a08\u7b97100\u514b\u6c34\u5f9e\u6db2\u614b\u5230\u84b8\u6c7d\u5728\u6cb8\u9ede\u6642\u5438\u6536\u6216\u91cb\u653e\u7684\u80fd\u91cf\uff08\u4ee5\u7126\u8033\u70ba\u55ae\u4f4d\uff09\u3002", "function": {"name": "thermo.calculate_energy", "description": "Calculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.", "parameters": {"type": "dict", "properties": {"mass": {"type": "integer", "description": "Mass of the substance in grams."}, "phase_transition": {"type": "string", "description": "Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'."}, "substance": {"type": "string", "description": "The substance which is undergoing phase change, default is 'water'"}}, "required": ["mass", "phase_transition"]}}}, "model_result_raw": [{"thermo_calculate_energy": "{\"mass\": 100, \"phase_transition\": \"vaporization\", \"substance\": \"water\"}"}, {"thermo_calculate_energy": "{\"mass\": 100, \"phase_transition\": \"melting\", \"substance\": \"water\"}"}], "model_result_decoded": [{"thermo_calculate_energy": {"mass": 100, "phase_transition": "vaporization", "substance": "water"}}, {"thermo_calculate_energy": {"mass": 100, "phase_transition": "melting", "substance": "water"}}], "possible_answer": {"thermo.calculate_energy": {"mass": [100], "phase_transition": ["vaporization", "\u84b8\u767c"], "substance": ["water", "", "\u6c34"]}}}
{"id": 56, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_type': 'human cell'. Expected one of ['human', '\u4eba', '\u4eba\u985e', '\u4eba\u985e\u7d30\u80de']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_55", "question": "\u5c0b\u627e\u6709\u95dc\u4eba\u985e\u7d30\u80de\u7d50\u69cb\u7684\u8a73\u7d30\u8cc7\u8a0a\u3002", "function": {"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}}, "model_result_raw": [{"biology_get_cell_info": "{\"cell_type\":\"human cell\",\"detailed\":true}"}], "model_result_decoded": [{"biology_get_cell_info": {"cell_type": "human cell", "detailed": true}}], "possible_answer": {"biology.get_cell_info": {"cell_type": ["human", "\u4eba", "\u4eba\u985e", "\u4eba\u985e\u7d30\u80de"], "detailed": [true]}}}
{"id": 57, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_compartment': 'cell membrane'. Expected one of ['plasma membrane', '\u7d30\u80de\u819c']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_56", "question": "\u5728\u7d30\u80de\u819c\u4e2d\u767c\u73fe\u7684\u86cb\u767d\u8cea\u6709\u54ea\u4e9b\u540d\u7a31\uff1f", "function": {"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "dict", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}}, "model_result_raw": [{"cellbio_get_proteins": "{\"cell_compartment\":\"cell membrane\"}"}], "model_result_decoded": [{"cellbio_get_proteins": {"cell_compartment": "cell membrane"}}], "possible_answer": {"cellbio.get_proteins": {"cell_compartment": ["plasma membrane", "\u7d30\u80de\u819c"], "include_description": ["", true, false]}}}
{"id": 77, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'species': 'human'. Expected one of ['Homo Sapiens', 'homo sapiens', 'Homo sapiens', '\u4eba', '\u4eba\u985e']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_76", "question": "\u8acb\u63d0\u4f9b\u6211\u5011\u6839\u64da\u9054\u723e\u6587\u6a21\u578b\u9810\u6e2c\u672a\u4f8650\u5e74\u4eba\u985e\u9032\u5316\u901f\u7387\u7684\u6578\u64da\u3002", "function": {"name": "prediction.evolution", "description": "Predict the evolutionary rate for a specific species for a given timeframe.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species that the evolution rate will be predicted for."}, "years": {"type": "integer", "description": "Number of years for the prediction."}, "model": {"type": "string", "description": "The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'."}}, "required": ["species", "years"]}}}, "model_result_raw": [{"prediction_evolution": "{\"species\":\"human\",\"years\":50,\"model\":\"Darwin\"}"}], "model_result_decoded": [{"prediction_evolution": {"species": "human", "years": 50, "model": "Darwin"}}], "possible_answer": {"prediction.evolution": {"species": ["Homo Sapiens", "homo sapiens", "Homo sapiens", "\u4eba", "\u4eba\u985e"], "years": [50], "model": ["Darwin", "\u9054\u723e\u6587"]}}}
{"id": 78, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dietary_preference': ['Vegan']. Expected one of [['Vegan', '\u7d20', '\u7d20\u98df']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_77", "question": "\u5c0b\u627e\u6d1b\u6749\u78ef\u9644\u8fd1\u63d0\u4f9b\u7d14\u7d20\u98df\u7684\u9910\u5ef3\u3002", "function": {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty list."}}, "required": ["location"]}}}, "model_result_raw": [{"restaurant_find_nearby": "{\"location\":\"Los Angeles, CA\",\"dietary_preference\":[\"Vegan\"]}"}], "model_result_decoded": [{"restaurant_find_nearby": {"location": "Los Angeles, CA", "dietary_preference": ["Vegan"]}}], "possible_answer": {"restaurant.find_nearby": {"location": ["Los Angeles, CA", "\u52a0\u5dde\u6d1b\u6749\u78ef", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef", "\u6d1b\u6749\u78ef, CA"], "dietary_preference": [["Vegan", "\u7d20", "\u7d20\u98df"]]}}}
{"id": 83, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": "\u8a08\u7b97\u6574\u6578\u5217\u8868[12, 15, 18, 20, 21, 26, 30]\u7684\u5e73\u5747\u503c\u3002", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": [{"calculate_average": "{\"numbers\": [12, 15, 18, 20, 21, 26, 30]}"}], "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 88, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": "\u5c07\u5217\u8868 [5, 3, 4, 1, 2] \u6309\u7167\u5347\u5e8f\u6392\u5217\u3002", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": [{"array_sort": "{\"list\":[5,3,4,1,2],\"order\":\"ascending\"}"}], "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending", "\u5347\u5e8f", "\u905e\u589e"]}}}
{"id": 90, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of parameters for dictionary."], "error_type": "value_error:dict_items", "prompt": {"id": "simple_89", "question": "\u5f9eStudentDB\u4e2d\u64f7\u53d6\u6240\u6709\u5c31\u8b80\u65bc'Bluebird High School'\u7684\u79d1\u5b78\u5b78\u751f\u8a18\u9304\u3002", "function": {"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}}, "model_result_raw": [{"db_fetch_records": "{\"database_name\":\"StudentDB\",\"table_name\":\"students\",\"conditions\":{\"school\":\"Bluebird High School\"}}"}], "model_result_decoded": [{"db_fetch_records": {"database_name": "StudentDB", "table_name": "students", "conditions": {"school": "Bluebird High School"}}}], "possible_answer": {"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students", "student", "\u5b78\u751f"], "conditions": [{"department": ["Science", "\u79d1\u5b78"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}}
{"id": 104, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": "\u8a08\u7b97\u66f2\u7dday=3x^2 + 2x - 4\u5728x = -1\u548cx = 2\u4e4b\u9593\u7684\u9762\u7a4d\u3002", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": [{"mathematics_calculate_area_under_curve": "{\"polynomial\":[3,2,-4],\"limits\":[-1,2]}"}], "model_result_decoded": [{"mathematics_calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 123, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': [10, 20, 30, 40]. Expected one of [[[10, 20], [30, 40]]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_122", "question": "\u9032\u884c\u4e00\u500b\u7368\u7acb\u6027\u7684\u5361\u65b9\u6aa2\u5b9a\uff0c\u4f7f\u7528\u4e00\u500b2x2\u7684\u5217\u806f\u8868 [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "integer"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}}, "model_result_raw": [{"chi_squared_test": "{\"table\":[10,20,30,40]}"}], "model_result_decoded": [{"chi_squared_test": {"table": [10, 20, 30, 40]}}], "possible_answer": {"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}}
{"id": 127, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dependent_variable': 'Price'. Expected one of ['car_price', '\u6c7d\u8eca\u50f9\u683c']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_126", "question": "\u5728\u8def\u5f91C:/data/cars.csv\u4e2d\u4f7f\u7528\u5f15\u64ce\u5c3a\u5bf8\u548c\u71c3\u6cb9\u7d93\u6fdf\u6027\u4f86\u9810\u6e2c\u6c7d\u8eca\u50f9\u683c\u7684\u6a21\u578b\u7684\u6c7a\u5b9a\u4fc2\u6578\uff08R\u5e73\u65b9\uff09\u662f\u591a\u5c11\uff1f", "function": {"name": "linear_regression.get_r_squared", "description": "Calculate the coefficient of determination of a regression model.", "parameters": {"type": "dict", "properties": {"dataset_path": {"type": "string", "description": "Path to the CSV dataset file."}, "independent_variables": {"type": "array", "items": {"type": "string"}, "description": "The independent variables to use in the regression model."}, "dependent_variable": {"type": "string", "description": "The dependent variable to predict in the regression model."}}, "required": ["dataset_path", "independent_variables", "dependent_variable"]}}}, "model_result_raw": [{"linear_regression_get_r_squared": "{\"dataset_path\":\"C:/data/cars.csv\",\"independent_variables\":[\"EngineSize\",\"FuelEconomy\"],\"dependent_variable\":\"Price\"}"}], "model_result_decoded": [{"linear_regression_get_r_squared": {"dataset_path": "C:/data/cars.csv", "independent_variables": ["EngineSize", "FuelEconomy"], "dependent_variable": "Price"}}], "possible_answer": {"linear_regression.get_r_squared": {"dataset_path": ["C:/data/cars.csv"], "independent_variables": [["engine_size", "fuel_economy"], ["\u5f15\u64ce\u5c3a\u5bf8", "\u71c3\u6cb9\u7d93\u6fdf\u6027"]], "dependent_variable": ["car_price", "\u6c7d\u8eca\u50f9\u683c"]}}}
{"id": 145, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_144", "question": "\u5c0b\u627e\u904e\u53bb5\u5929S&P 500\u548cDow Jones\u7684\u5e02\u5834\u8868\u73fe\u3002", "function": {"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "dict", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}}, "model_result_raw": [{"market_performance_get_data": "{\"indexes\": [\"S&P 500\"], \"days\": 5}"}, {"market_performance_get_data": "{\"indexes\": [\"Dow Jones\"], \"days\": 5}"}], "model_result_decoded": [{"market_performance_get_data": {"indexes": ["S&P 500"], "days": 5}}, {"market_performance_get_data": {"indexes": ["Dow Jones"], "days": 5}}], "possible_answer": {"market_performance.get_data": {"indexes": [["S&P 500", "Dow Jones"]], "days": [5], "detailed": ["", true, false]}}}
{"id": 152, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_151", "question": "\u5c0b\u627e2020\u5e74\u7f8e\u570b\u6700\u9ad8\u71df\u6536\u7684\u9280\u884c\u3002", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}}, "model_result_raw": [{"highest_grossing_banks": "{\"country\":\"USA\",\"year\":2020}"}], "model_result_decoded": [{"highest_grossing_banks": {"country": "USA", "year": 2020}}], "possible_answer": {"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S.", "\u7f8e\u570b"], "year": [2020], "top_n": [1]}}}
{"id": 159, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': 'X'. Expected one of ['Mr. X']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_158", "question": "\u5c0b\u627e2012\u5e74\u81f32015\u5e74\u9593\u7d10\u7d04\u5ddeMr. X\u7684\u5211\u4e8b\u6848\u4ef6\u8cc7\u8a0a\u3002", "function": {"name": "get_criminal_records", "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "from_year": {"type": "integer", "description": "The start year of the time frame."}, "to_year": {"type": "integer", "description": "The end year of the time frame."}}, "required": ["name", "location", "from_year", "to_year"]}}}, "model_result_raw": [{"get_criminal_records": "{\"name\":\"X\",\"location\":\"New York, NY\",\"from_year\":2012,\"to_year\":2015}"}], "model_result_decoded": [{"get_criminal_records": {"name": "X", "location": "New York, NY", "from_year": 2012, "to_year": 2015}}], "possible_answer": {"get_criminal_records": {"name": ["Mr. X"], "location": ["New York, NY", "\u7d10\u7d04", "\u7d10\u7d04\u5dde"], "from_year": [2012], "to_year": [2015]}}}
{"id": 160, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'act_name': '\u5211\u6cd5'. Expected one of ['Criminal Law Amendment Act', 'Criminal Law Amendment', '\u5211\u6cd5\u4fee\u6b63\u6848']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_159", "question": "\u7d66\u62112013\u5e74\u5211\u6cd5\u4fee\u6b63\u6848\u7684\u8a73\u7d30\u5167\u5bb9\u3002", "function": {"name": "get_act_details", "description": "Retrieve the details of a particular legal act based on its name and year of amendment if any.", "parameters": {"type": "dict", "properties": {"act_name": {"type": "string", "description": "The name of the act."}, "amendment_year": {"type": "integer", "description": "Year of amendment if any. If not provided, the latest amendment year will be considered."}}, "required": ["act_name", "amendment_year"]}}}, "model_result_raw": [{"get_act_details": "{\"act_name\":\"\u5211\u6cd5\",\"amendment_year\":2013}"}], "model_result_decoded": [{"get_act_details": {"act_name": "\u5211\u6cd5", "amendment_year": 2013}}], "possible_answer": {"get_act_details": {"act_name": ["Criminal Law Amendment Act", "Criminal Law Amendment", "\u5211\u6cd5\u4fee\u6b63\u6848"], "amendment_year": [2013]}}}
{"id": 166, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u6d1b\u6749\u78ef\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde'. Expected one of ['Los Angeles', 'Los Angeles, California', '\u6d1b\u6749\u78ef', '\u52a0\u5dde\u6d1b\u6749\u78ef', '\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_165", "question": "\u5f9e2020\u5e74\u7684\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef\u7684\u76dc\u7aca\u6848\u4ef6\u4e2d\u6aa2\u7d22\u6848\u4ef6", "function": {"name": "civil_cases.retrieve", "description": "Retrieve civil cases based on given parameters, including year, crime type, and location.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "Year of the cases"}, "crime_type": {"type": "string", "description": "Type of the crime."}, "location": {"type": "string", "description": "Location of the case in the format of city name."}}, "required": ["year", "crime_type", "location"]}}}, "model_result_raw": [{"civil_cases_retrieve": "{\"year\":2020,\"crime_type\":\"\u76dc\u7aca\",\"location\":\"\u6d1b\u6749\u78ef\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\"}"}], "model_result_decoded": [{"civil_cases_retrieve": {"year": 2020, "crime_type": "\u76dc\u7aca", "location": "\u6d1b\u6749\u78ef\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde"}}], "possible_answer": {"civil_cases.retrieve": {"year": [2020], "crime_type": ["theft", "\u7aca\u76dc\u7f6a", "\u76dc\u7aca\u7f6a", "\u76dc\u7aca"], "location": ["Los Angeles", "Los Angeles, California", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef"]}}}
{"id": 167, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'specialty': ['Divorce']. Expected one of [['Divorce', '\u96e2\u5a5a']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_166", "question": "\u5728\u829d\u52a0\u54e5\u5c0b\u627e\u5c08\u9580\u8655\u7406\u96e2\u5a5a\u6848\u4ef6\u4e26\u6bcf\u5c0f\u6642\u6536\u8cbb\u4f4e\u65bc400\u7f8e\u5143\u7684\u5f8b\u5e2b\u3002", "function": {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}}, "model_result_raw": [{"lawyer_find_nearby": "{\"city\":\"Chicago, IL\",\"specialty\":[\"Divorce\"],\"fee\":400}"}], "model_result_decoded": [{"lawyer_find_nearby": {"city": "Chicago, IL", "specialty": ["Divorce"], "fee": 400}}], "possible_answer": {"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL", "\u829d\u52a0\u54e5", "\u4f0a\u5229\u8afe\u5dde\u829d\u52a0\u54e5", "\u829d\u52a0\u54e5, IL"], "specialty": [["Divorce", "\u96e2\u5a5a"]], "fee": [400]}}}
{"id": 184, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara'. Expected one of ['Santa Clara County', '\u8056\u5854\u514b\u62c9\u62c9', '\u8056\u5854\u514b\u62c9\u62c9\u7e23']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_183", "question": "\u5728\u8056\u5854\u514b\u62c9\u62c9\u7e23\u641c\u7d22\u76ee\u524d\u5c0d\u860b\u679c\u63d0\u8d77\u7684\u8a34\u8a1f\u3002", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": [{"lawsuit_search": "{\"entity\":\"Apple\",\"county\":\"Santa Clara\"}"}], "model_result_decoded": [{"lawsuit_search": {"entity": "Apple", "county": "Santa Clara"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple", "\u860b\u679c"], "county": ["Santa Clara County", "\u8056\u5854\u514b\u62c9\u62c9", "\u8056\u5854\u514b\u62c9\u62c9\u7e23"], "state": ["California", "", "\u52a0\u5dde", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde"]}}}
{"id": 187, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'country': 'JP'. Expected one of ['Japan', '\u65e5\u672c']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_186", "question": "\u6771\u4eac\uff0c\u65e5\u672c\u73fe\u5728\u7684\u651d\u6c0f\u6eab\u5ea6\u548c\u6fd5\u5ea6\u6c34\u5e73\u662f\u591a\u5c11\uff1f", "function": {"name": "current_weather_condition", "description": "Get the current weather conditions of a specific city including temperature and humidity.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city that you want to get the current weather conditions for."}, "country": {"type": "string", "description": "The country of the city you specified."}, "measurement": {"type": "string", "description": "You can specify which unit to display the temperature in, 'c' for Celsius, 'f' for Fahrenheit. Default is 'c'."}}, "required": ["city", "country"]}}}, "model_result_raw": [{"current_weather_condition": "{\"city\":\"Tokyo\",\"country\":\"JP\",\"measurement\":\"c\"}"}], "model_result_decoded": [{"current_weather_condition": {"city": "Tokyo", "country": "JP", "measurement": "c"}}], "possible_answer": {"current_weather_condition": {"city": ["Tokyo", "\u6771\u4eac"], "country": ["Japan", "\u65e5\u672c"], "measurement": ["c", "", "\u651d\u6c0f"]}}}
{"id": 198, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time': '12:00 PM'. Expected one of ['12pm', '12:00']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_197", "question": "\u5728\u4e0b\u534812\u9ede\u5c0b\u627e\u8056\u5730\u4e9e\u54e5\u7684\u7a7a\u6c23\u8cea\u91cf\u6307\u6578\u3002", "function": {"name": "get_air_quality_index", "description": "Retrieve the air quality index at a specified location and time.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to get the air quality index for."}, "time": {"type": "string", "description": "The specific time to check the air quality. Default is the current time."}}, "required": ["location", "time"]}}}, "model_result_raw": [{"get_air_quality_index": "{\"location\":\"San Diego\",\"time\":\"12:00 PM\"}"}], "model_result_decoded": [{"get_air_quality_index": {"location": "San Diego", "time": "12:00 PM"}}], "possible_answer": {"get_air_quality_index": {"location": ["San Diego", "\u8056\u5730\u4e9e\u54e5"], "time": ["12pm", "12:00"]}}}
{"id": 201, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fuel_type': 'gasoline'. Expected one of ['gas', '\u6c7d\u6cb9']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_200", "question": "\u4e00\u8f1b\u4ee5\u6c7d\u6cb9\u70ba\u71c3\u6599\uff0c\u6bcf\u5e74\u884c\u99db12,000\u82f1\u91cc\uff0c\u71c3\u6cb9\u6548\u7387\u70ba25\u82f1\u91cc/\u52a0\u4f96\u7684\u6c7d\u8eca\u6bcf\u5e74\u7522\u751f\u591a\u5c11\u4e8c\u6c27\u5316\u78b3\uff1f", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}}, "model_result_raw": [{"calculate_emissions": "{\"distance\":12000,\"fuel_type\":\"gasoline\",\"fuel_efficiency\":25}"}], "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gasoline", "fuel_efficiency": 25}}], "possible_answer": {"calculate_emissions": {"distance": [12000], "fuel_type": ["gas", "\u6c7d\u6cb9"], "fuel_efficiency": ["", 25.0], "efficiency_reduction": [0, ""]}}}
{"id": 202, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'species': 'Giant Panda'. Expected one of ['panda', 'pandas', '\u718a\u8c93', '\u5927\u718a\u8c93', '\u91ce\u751f\u5927\u718a\u8c93']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_201", "question": "\u4f30\u8a08\u4e2d\u570b\u91ce\u751f\u5927\u718a\u8c93\u7684\u4eba\u53e3\u6578\u91cf\u3002", "function": {"name": "estimate_population", "description": "Estimate the population of a particular species in a given country.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which population needs to be estimated."}, "country": {"type": "string", "description": "The country where the species lives."}, "year": {"type": "integer", "description": "The year for which population estimate is sought. Default is the current year."}}, "required": ["species", "country"]}}}, "model_result_raw": [{"estimate_population": "{\"species\":\"Giant Panda\",\"country\":\"China\"}"}], "model_result_decoded": [{"estimate_population": {"species": "Giant Panda", "country": "China"}}], "possible_answer": {"estimate_population": {"species": ["panda", "pandas", "\u718a\u8c93", "\u5927\u718a\u8c93", "\u91ce\u751f\u5927\u718a\u8c93"], "country": ["China", "CN", "\u4e2d\u570b"], "year": ["", 2024]}}}
{"id": 203, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'solar'. Expected one of ['renewable', '\u53ef\u518d\u751f']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_202", "question": "\u5982\u679c\u6211\u5728\u52a0\u5dde\u8f49\u63db\u70ba\u53ef\u518d\u751f\u80fd\u6e90\u4f86\u6e903\u500b\u6708\uff0c\u6211\u5c07\u80fd\u5920\u7bc0\u7701\u591a\u5c11\u6eab\u5ba4\u6c23\u9ad4\u6392\u653e\u91cf\uff1f", "function": {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}}, "model_result_raw": [{"calculate_emission_savings": "{\"energy_type\":\"solar\",\"usage_duration\":3,\"region\":\"California\"}"}], "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "solar", "usage_duration": 3, "region": "California"}}], "possible_answer": {"calculate_emission_savings": {"energy_type": ["renewable", "\u53ef\u518d\u751f"], "usage_duration": [3], "region": ["California", "CA", "\u52a0\u5dde", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde"]}}}
{"id": 208, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_location': 'New York'. Expected one of ['New York, USA', 'New York City', 'New York City, NY', 'NYC', 'NY', '\u7d10\u7d04', '\u7d10\u7d04\u5e02', '\u7f8e\u570b\u7d10\u7d04', '\u7d10\u7d04, \u7f8e\u570b']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_207", "question": "\u7372\u53d6\u7d10\u7d04\uff0c\u7f8e\u570b\u548c\u9081\u963f\u5bc6\u4e4b\u9593\u7684\u6700\u77ed\u99d5\u99db\u8ddd\u96e2\u3002", "function": {"name": "calculate_shortest_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the drive."}, "end_location": {"type": "string", "description": "The destination location for the drive."}, "route_preference": {"type": "string", "enum": ["Shortest", "Scenic"], "description": "The preferred type of route."}}, "required": ["start_location", "end_location", "route_preference"]}}}, "model_result_raw": [{"calculate_shortest_distance": "{\"start_location\":\"New York\",\"end_location\":\"Miami\",\"route_preference\":\"Shortest\"}"}], "model_result_decoded": [{"calculate_shortest_distance": {"start_location": "New York", "end_location": "Miami", "route_preference": "Shortest"}}], "possible_answer": {"calculate_shortest_distance": {"start_location": ["New York, USA", "New York City", "New York City, NY", "NYC", "NY", "\u7d10\u7d04", "\u7d10\u7d04\u5e02", "\u7f8e\u570b\u7d10\u7d04", "\u7d10\u7d04, \u7f8e\u570b"], "end_location": ["Miami, USA", "Miami", "Miami, FL", "FL", "\u9081\u963f\u5bc6", "\u4f5b\u7f85\u91cc\u9054\u5dde\u9081\u963f\u5bc6", "\u4f5b\u7f85\u91cc\u9054\u5dde", "\u7f8e\u570b\u9081\u963f\u5bc6"], "route_preference": ["Shortest", "\u6700\u77ed"]}}}
{"id": 212, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'body': \"Let's meet tomorrow morning at 10 AM.\". Expected one of [\"Let's meet at 10 AM tomorrow\", \"Let's meet at 10 AM tomorrow.\", '\u660e\u5929\u4e0a\u534810\u9ede\u898b\u9762\u5427', '\u660e\u5929\u4e0a\u534810\u9ede\u898b\u9762\u5427']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_211", "question": "\u767c\u9001\u96fb\u5b50\u90f5\u4ef6\u7d66John Doe\uff0c\u96fb\u5b50\u90f5\u4ef6\u5730\u5740\u70bajohn.doe@example.com\uff0c\u4e3b\u984c\u70ba\u300c\u6703\u8b70\u300d\uff0c\u5167\u5bb9\u70ba\u300c\u660e\u5929\u4e0a\u534810\u9ede\u898b\u9762\u5427\u300d\u3002", "function": {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is empty if not specified."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is empty if not specified."}}, "required": ["to", "subject", "body"]}}}, "model_result_raw": [{"send_email": "{\"to\":\"john.doe@example.com\",\"subject\":\"Meeting\",\"body\":\"Let's meet tomorrow morning at 10 AM.\"}"}], "model_result_decoded": [{"send_email": {"to": "john.doe@example.com", "subject": "Meeting", "body": "Let's meet tomorrow morning at 10 AM."}}], "possible_answer": {"send_email": {"to": ["john.doe@example.com"], "subject": ["Meeting", "\u6703\u8b70"], "body": ["Let's meet at 10 AM tomorrow", "Let's meet at 10 AM tomorrow.", "\u660e\u5929\u4e0a\u534810\u9ede\u898b\u9762\u5427", "\u660e\u5929\u4e0a\u534810\u9ede\u898b\u9762\u5427"], "cc": [""], "bcc": [""]}}}
{"id": 213, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company_name': '\u860b\u679c'. Expected one of ['Apple Inc.', '\u860b\u679c\u516c\u53f8']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_212", "question": "\u8acb\u63d0\u4f9b\u95dc\u65bc\u860b\u679c\u516c\u53f8\u80a1\u7968\u7684\u8a73\u7d30\u8cc7\u8a0a\u3002", "function": {"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}}, "model_result_raw": [{"get_stock_info": "{\"company_name\":\"\u860b\u679c\",\"detail_level\":\"detailed\"}"}], "model_result_decoded": [{"get_stock_info": {"company_name": "\u860b\u679c", "detail_level": "detailed"}}], "possible_answer": {"get_stock_info": {"company_name": ["Apple Inc.", "\u860b\u679c\u516c\u53f8"], "detail_level": ["detailed", "\u8a73\u7d30"], "market": ["", "NASDAQ", "\u90a3\u65af\u9054\u514b"]}}}
{"id": 217, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'language': 'zh'. Expected one of ['english', 'English', 'en', '\u4e2d\u6587', '\u7e41\u9ad4\u4e2d\u6587']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_216", "question": "\u5206\u6790\u9867\u5ba2\u8a55\u8ad6\u7684\u60c5\u611f\uff1a\u300c\u6211\u559c\u6b61\u9019\u88e1\u7684\u98df\u7269\uff01\u5b83\u7e3d\u662f\u65b0\u9bae\u53c8\u7f8e\u5473\u3002\u300d", "function": {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}}, "model_result_raw": [{"sentiment_analysis": "{\"text\":\"\u6211\u559c\u6b61\u9019\u88e1\u7684\u98df\u7269\uff01\u5b83\u7e3d\u662f\u65b0\u9bae\u53c8\u7f8e\u5473\u3002\",\"language\":\"zh\"}"}], "model_result_decoded": [{"sentiment_analysis": {"text": "\u6211\u559c\u6b61\u9019\u88e1\u7684\u98df\u7269\uff01\u5b83\u7e3d\u662f\u65b0\u9bae\u53c8\u7f8e\u5473\u3002", "language": "zh"}}], "possible_answer": {"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious.", "\u6211\u559c\u6b61\u9019\u88e1\u7684\u98df\u7269\uff01\u5b83\u7e3d\u662f\u65b0\u9bae\u53c8\u7f8e\u5473\u3002", "\u6211\u559c\u6b61\u9019\u88e1\u7684\u98df\u7269\uff01\u5b83\u7e3d\u662f\u65b0\u9bae\u53c8\u7f8e\u5473"], "language": ["english", "English", "en", "\u4e2d\u6587", "\u7e41\u9ad4\u4e2d\u6587"]}}}
{"id": 220, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'brain_region'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_219", "question": "\u5927\u9f20\u5927\u8166\u4e2d\u7522\u751fGABA\u795e\u7d93\u50b3\u905e\u7269\u8cea\u7684\u795e\u7d93\u5143\u5ea7\u6a19\u662f\u4ec0\u9ebc\uff1f", "function": {"name": "get_neuron_coordinates", "description": "Retrieve the coordinates of the specified neuron in the rat's brain.", "parameters": {"type": "dict", "properties": {"neuron_type": {"type": "string", "description": "Type of neuron to find. For instance, GABA, Glutamate, etc."}, "brain_region": {"type": "string", "description": "The region of the brain to consider.", "default": "All"}}, "required": ["neuron_type", "brain_region"]}}}, "model_result_raw": [{"get_neuron_coordinates": "{\"neuron_type\":\"GABA\"}"}], "model_result_decoded": [{"get_neuron_coordinates": {"neuron_type": "GABA"}}], "possible_answer": {"get_neuron_coordinates": {"neuron_type": ["GABA"], "brain_region": ["All", "all part of the brain", "entire brain", "\u5927\u8166"]}}}
{"id": 225, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'sub_topics': ['behavior', 'group dynamics']. Expected one of [['behaviour', 'group dynamics'], ['\u884c\u70ba', '\u7fa4\u9ad4\u52d5\u529b\u5b78']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_224", "question": "\u5c0b\u627e\u5728\u63a8\u7279\u4e0a\u6700\u53d7\u95dc\u6ce8\u7684\u4eba\uff0c\u4ed6\u7684\u63a8\u6587\u6d89\u53ca\u884c\u70ba\u548c\u7fa4\u9ad4\u52d5\u529b\u5b78\u7684\u5fc3\u7406\u5b78\u3002", "function": {"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic. Default is empty."}, "region": {"type": "string", "description": "Region of interest for twitter search. Default is 'all'."}}, "required": ["topic"]}}}, "model_result_raw": [{"social_media_analytics_most_followed": "{\"topic\":\"psychology\",\"sub_topics\":[\"behavior\",\"group dynamics\"],\"region\":\"all\"}"}], "model_result_decoded": [{"social_media_analytics_most_followed": {"topic": "psychology", "sub_topics": ["behavior", "group dynamics"], "region": "all"}}], "possible_answer": {"social_media_analytics.most_followed": {"topic": ["psychology", "\u5fc3\u7406\u5b78"], "sub_topics": [["behaviour", "group dynamics"], ["\u884c\u70ba", "\u7fa4\u9ad4\u52d5\u529b\u5b78"]], "region": ["", "all"]}}}
{"id": 230, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'characteristics': ['\u9ad8\u6548\u7387', '\u6709\u7d44\u7e54', '\u96a8\u548c', '\u6709\u540c\u60c5\u5fc3']. Expected one of [['efficient', 'organized', 'easy going', 'compassionate'], ['\u9ad8\u6548\u7387', '\u6709\u7d44\u7e54', '\u96a8\u548c', '\u540c\u60c5\u5fc3']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_229", "question": "\u5982\u679c\u6211\u662f\u9ad8\u6548\u7387\u3001\u6709\u7d44\u7e54\u3001\u96a8\u548c\u548c\u6709\u540c\u60c5\u5fc3\u7684\u4eba\uff0c\u6211\u7684\u5927\u4e94\u4eba\u683c\u7279\u8cea\u5f97\u5206\u662f\u591a\u5c11\uff1f", "function": {"name": "get_bigfive_scores", "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.", "parameters": {"type": "dict", "properties": {"characteristics": {"type": "array", "items": {"type": "string"}, "description": "List of user's behavioural characteristics."}, "scale": {"type": "string", "enum": ["high", "medium", "low"], "description": "The scoring scale of traits (default is medium)."}}, "required": ["characteristics"]}}}, "model_result_raw": [{"get_bigfive_scores": "{\"characteristics\":[\"\u9ad8\u6548\u7387\",\"\u6709\u7d44\u7e54\",\"\u96a8\u548c\",\"\u6709\u540c\u60c5\u5fc3\"],\"scale\":\"high\"}"}], "model_result_decoded": [{"get_bigfive_scores": {"characteristics": ["\u9ad8\u6548\u7387", "\u6709\u7d44\u7e54", "\u96a8\u548c", "\u6709\u540c\u60c5\u5fc3"], "scale": "high"}}], "possible_answer": {"get_bigfive_scores": {"characteristics": [["efficient", "organized", "easy going", "compassionate"], ["\u9ad8\u6548\u7387", "\u6709\u7d44\u7e54", "\u96a8\u548c", "\u540c\u60c5\u5fc3"]], "scale": ["medium", "", "\u4e2d"]}}}
{"id": 242, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': 'American Civil War'. Expected one of ['Civil War', '\u5167\u6230', '\u7f8e\u570b\u5167\u6230']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_241", "question": "\u8ab0\u662f\u7f8e\u570b\u5167\u6230\u671f\u9593\u7684\u7e3d\u7d71\uff1f", "function": {"name": "US_President_During_Event", "description": "Returns the U.S. president during a specified historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The historical event."}, "country": {"type": "string", "description": "The country the president leads (optional parameter, defaults to 'USA' if not specified)."}}, "required": ["event"]}}}, "model_result_raw": [{"US_President_During_Event": "{\"event\":\"American Civil War\",\"country\":\"USA\"}"}], "model_result_decoded": [{"US_President_During_Event": {"event": "American Civil War", "country": "USA"}}], "possible_answer": {"US_President_During_Event": {"event": ["Civil War", "\u5167\u6230", "\u7f8e\u570b\u5167\u6230"], "country": ["USA", "", "\u7f8e\u570b"]}}}
{"id": 243, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'discovery': 'evolutionary theory'. Expected one of ['Theory of Evolution', 'theory of evolution', '\u9032\u5316\u8ad6', '\u6f14\u5316\u8ad6']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_242", "question": "\u8ab0\u662f\u9996\u5148\u63d0\u51fa\u9032\u5316\u8ad6\u7684\u79d1\u5b78\u5bb6\uff1f", "function": {"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}}, "model_result_raw": [{"get_scientist_for_discovery": "{\"discovery\":\"evolutionary theory\"}"}], "model_result_decoded": [{"get_scientist_for_discovery": {"discovery": "evolutionary theory"}}], "possible_answer": {"get_scientist_for_discovery": {"discovery": ["Theory of Evolution", "theory of evolution", "\u9032\u5316\u8ad6", "\u6f14\u5316\u8ad6"]}}}
{"id": 253, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_252", "question": "\u5c0b\u627e\u5341\u500b\u8207\u57fa\u7763\u6559\u6709\u95dc\u768416\u4e16\u7d00\u4e3b\u8981\u6b77\u53f2\u4e8b\u4ef6\uff0c\u6309\u91cd\u8981\u6027\u6392\u5e8f\u3002", "function": {"name": "get_religion_history", "description": "Retrieves significant religious events, including the details of the event, its historical context, and its impacts.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion to be queried."}, "century": {"type": "integer", "description": "The century in which the event(s) took place."}, "sort_by": {"type": "string", "enum": ["importance", "chronological"], "default": "chronological", "description": "Order of sorting the events. Default is chronological."}, "count": {"type": "integer", "default": 5, "description": "Number of events to return. Default is 5."}}, "required": ["religion", "century"]}}}, "model_result_raw": [{"get_religion_history": "{\"religion\": \"Christianity\", \"century\": 16, \"sort_by\": \"importance\", \"count\": 10}"}, {"get_religion_history": "{\"religion\": \"Christianity\", \"century\": 16, \"sort_by\": \"chronological\", \"count\": 10}"}], "model_result_decoded": [{"get_religion_history": {"religion": "Christianity", "century": 16, "sort_by": "importance", "count": 10}}, {"get_religion_history": {"religion": "Christianity", "century": 16, "sort_by": "chronological", "count": 10}}], "possible_answer": {"get_religion_history": {"religion": ["Christianity", "\u57fa\u7763\u6559"], "century": [16], "sort_by": ["importance", "\u91cd\u8981\u6027"], "count": [10]}}}
{"id": 265, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'detail': 'dimensions'. Expected one of ['size', '\u5c3a\u5bf8', '\u5927\u5c0f']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_264", "question": "\u5c0b\u627e\u7c73\u958b\u6717\u57fa\u7f85\u7684\u96d5\u5851\u4f5c\u54c1\u300a\u5927\u885b\u300b\u7684\u5c3a\u5bf8\u3002", "function": {"name": "sculpture.get_details", "description": "Retrieve details of a sculpture based on the artist and the title of the sculpture.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist who made the sculpture."}, "title": {"type": "string", "description": "The title of the sculpture."}, "detail": {"type": "string", "description": "The specific detail wanted about the sculpture. Default is 'general information'."}}, "required": ["artist", "title"]}}}, "model_result_raw": [{"sculpture_get_details": "{\"artist\":\"Michelangelo\",\"title\":\"David\",\"detail\":\"dimensions\"}"}], "model_result_decoded": [{"sculpture_get_details": {"artist": "Michelangelo", "title": "David", "detail": "dimensions"}}], "possible_answer": {"sculpture.get_details": {"artist": ["Michelangelo", "\u7c73\u958b\u6717\u57fa\u7f85"], "title": ["David", "\u5927\u885b"], "detail": ["size", "\u5c3a\u5bf8", "\u5927\u5c0f"]}}}
{"id": 268, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY', '\u7d10\u7d04\u5e02', '\u7d10\u7d04']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": "\u5c0b\u627e\u63a5\u4e0b\u4f86\u7684\u5e7e\u500b\u6708\u5728\u7d10\u7d04\u8209\u884c\u7684\u8a55\u50f9\u6700\u9ad8\u7684\u73fe\u4ee3\u96d5\u5851\u5c55\u89bd\u3002", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": [{"find_exhibition": "{\"location\":\"New York\",\"art_form\":\"modern sculpture\",\"month\":\"next\",\"user_ratings\":\"high\"}"}], "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "modern sculpture", "month": "next", "user_ratings": "high"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY", "\u7d10\u7d04\u5e02", "\u7d10\u7d04"], "art_form": ["sculpture", "modern sculpture", "\u96d5\u5851", "\u73fe\u4ee3\u96d5\u5851", "\u96d5\u50cf", "\u73fe\u4ee3\u96d5\u50cf"], "month": [""], "user_ratings": ["high", "\u9ad8", "\u6700\u9ad8"]}}}
{"id": 269, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Optional parameter 'location' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_268", "question": "\u8acb\u5e6b\u6211\u627e\u51fa\u7fa9\u5927\u5229\u7f85\u99ac\u7c73\u958b\u6717\u57fa\u7f85\u7684\u5927\u7406\u77f3\u96d5\u5851\u4f5c\u54c1\u3002", "function": {"name": "sculpture_locator.find_by_artist", "description": "Locate the sculptures of specific artist by material and location", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the Artist of the sculpture"}, "material": {"type": "string", "description": "Material of the sculpture."}, "location": {"type": "string", "description": "The location where you want to find the sculpture. Default is 'all' if not specified."}}, "required": ["artist", "material"]}}}, "model_result_raw": [{"sculpture_locator_find_by_artist": "{\"artist\":\"Michelangelo\",\"material\":\"marble\"}"}], "model_result_decoded": [{"sculpture_locator_find_by_artist": {"artist": "Michelangelo", "material": "marble"}}], "possible_answer": {"sculpture_locator.find_by_artist": {"artist": ["Michelangelo", "\u7c73\u958b\u6717\u57fa\u7f85"], "material": ["Marble", "\u5927\u7406\u77f3"], "location": ["Rome", "Rome, Italy", "\u7f85\u99ac", "\u7fa9\u5927\u5229\u7f85\u99ac"]}}}
{"id": 279, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'instrument': '\u94a2\u7434'. Expected one of ['piano', '\u92fc\u7434']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_278", "question": "\u627e\u51fa\u6211Yamaha\u92fc\u7434\u7684\u5e73\u5747\u50f9\u683c\u548c\u8a55\u7d1a\u3002", "function": {"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}}, "model_result_raw": [{"get_instrument_details": "{\"instrument\":\"\u94a2\u7434\",\"manufacturer\":\"Yamaha\",\"features\":[\"price\",\"rating\"]}"}], "model_result_decoded": [{"get_instrument_details": {"instrument": "\u94a2\u7434", "manufacturer": "Yamaha", "features": ["price", "rating"]}}], "possible_answer": {"get_instrument_details": {"instrument": ["piano", "\u92fc\u7434"], "manufacturer": ["Yamaha", "\u5c71\u8449"], "features": [["price", "rating"], ["price", "rating"], ["\u50f9\u683c", "\u8a55\u7d1a"], ["\u8a55\u7d1a", "\u50f9\u683c"]]}}}
{"id": 282, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'maker': '\u53f2\u7279\u62c9\u5e95\u74e6'. Expected one of ['Stradivarius', '\u53f2\u7279\u62c9\u5e95\u74e6\u91cc\u7434']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_281", "question": "\u5c0b\u627e1721\u5e74\u7531\u201c\u53f2\u7279\u62c9\u5e95\u74e6\u91cc\u7434\u201d\u88fd\u9020\u5546\u88fd\u4f5c\u7684\u97f3\u6a02\u6a02\u5668\u201c\u5c0f\u63d0\u7434\u201d\u7684\u8a73\u7d30\u8cc7\u6599\u3002", "function": {"name": "get_instrument_info", "description": "Retrieve the details about a specific musical instrument based on its name, maker, and manufacturing year.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the instrument."}, "maker": {"type": "string", "description": "The name of the maker who created the instrument."}, "year": {"type": "integer", "description": "The year the instrument was made."}}, "required": ["name", "maker", "year"]}}}, "model_result_raw": [{"get_instrument_info": "{\"name\":\"\u5c0f\u63d0\u7434\",\"maker\":\"\u53f2\u7279\u62c9\u5e95\u74e6\",\"year\":1721}"}], "model_result_decoded": [{"get_instrument_info": {"name": "\u5c0f\u63d0\u7434", "maker": "\u53f2\u7279\u62c9\u5e95\u74e6", "year": 1721}}], "possible_answer": {"get_instrument_info": {"name": ["Violin", "\u5c0f\u63d0\u7434"], "maker": ["Stradivarius", "\u53f2\u7279\u62c9\u5e95\u74e6\u91cc\u7434"], "year": [1721]}}}
{"id": 284, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'Good'. Expected one of ['Excellent', '\u826f\u597d']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_283", "question": "\u5c0b\u627e\u829d\u52a0\u54e5\u5730\u5340\u72c0\u6cc1\u826f\u597d\u7684\u4e8c\u624bGibson Les Paul\u5409\u4ed6\u7684\u50f9\u683c\u3002", "function": {"name": "guitar_price.find", "description": "Retrieve the price of a specific used guitar model based on its condition and location.", "parameters": {"type": "dict", "properties": {"model": {"type": "string", "description": "The model of the guitar."}, "condition": {"type": "string", "enum": ["Poor", "Good", "Excellent"], "description": "The condition of the guitar."}, "location": {"type": "string", "description": "The location where the guitar is being sold."}}, "required": ["model", "condition", "location"]}}}, "model_result_raw": [{"guitar_price_find": "{\"model\":\"Gibson Les Paul\",\"condition\":\"Good\",\"location\":\"Chicago\"}"}], "model_result_decoded": [{"guitar_price_find": {"model": "Gibson Les Paul", "condition": "Good", "location": "Chicago"}}], "possible_answer": {"guitar_price.find": {"model": ["Gibson Les Paul"], "condition": ["Excellent", "\u826f\u597d"], "location": ["Chicago", "Chicago, IL", "Chicago, Illinois", "\u829d\u52a0\u54e5", "\u4f0a\u5229\u8afe\u5dde\u829d\u52a0\u54e5"]}}}
{"id": 289, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': 'New York'. Expected one of ['New York City', 'New York City, NY', 'NYC', '\u7d10\u7d04', '\u7d10\u7d04\u5e02']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_288", "question": "\u7d66\u6211\u5169\u5f35\u4e0b\u4e00\u5834\u5728\u7d10\u7d04\u5e02\u7684Eminem\u6f14\u5531\u6703\u7684\u9580\u7968\u3002", "function": {"name": "concert_booking.book_ticket", "description": "Book concert tickets for a specific artist in a specified city.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist you want to book tickets for."}, "city": {"type": "string", "description": "The city where the concert is."}, "num_tickets": {"type": "integer", "description": "Number of tickets required. Default is 1."}}, "required": ["artist", "city"]}}}, "model_result_raw": [{"concert_booking_book_ticket": "{\"artist\":\"Eminem\",\"city\":\"New York\",\"num_tickets\":2}"}], "model_result_decoded": [{"concert_booking_book_ticket": {"artist": "Eminem", "city": "New York", "num_tickets": 2}}], "possible_answer": {"concert_booking.book_ticket": {"artist": ["Eminem", "\u963f\u59c6"], "city": ["New York City", "New York City, NY", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "num_tickets": [2]}}}
{"id": 306, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'tournament': '\u897f\u7532'. Expected one of ['La Liga', '\u897f\u73ed\u7259\u8db3\u7403\u7532\u7d1a\u806f\u8cfd', '\u897f\u7532\u806f\u8cfd']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_305", "question": "\u8a08\u7b97\u8db3\u7403\u904b\u52d5\u54e1\u6885\u897f\u57282020-2021\u8cfd\u5b63\u897f\u7532\u806f\u8cfd\u4e2d\u7684\u9032\u7403\u548c\u52a9\u653b\u6578\u91cf\u3002", "function": {"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}}, "model_result_raw": [{"sports_stats_get_performance": "{\"player_name\":\"\u6885\u897f\",\"tournament\":\"\u897f\u7532\",\"season\":\"2020-2021\",\"performance_indicator\":[\"Goals Scored\",\"Assists Made\"]}"}], "model_result_decoded": [{"sports_stats_get_performance": {"player_name": "\u6885\u897f", "tournament": "\u897f\u7532", "season": "2020-2021", "performance_indicator": ["Goals Scored", "Assists Made"]}}], "possible_answer": {"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi", "\u6885\u897f", "\u840a\u7d0d\u723e\u00b7\u6885\u897f", "\u840a\u7d0d\u723e\u6885\u897f"], "tournament": ["La Liga", "\u897f\u73ed\u7259\u8db3\u7403\u7532\u7d1a\u806f\u8cfd", "\u897f\u7532\u806f\u8cfd"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"], ["\u9032\u7403", "\u52a9\u653b"]]}}}
{"id": 320, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'league': '\u82f1\u8d85'. Expected one of ['Premier League', '\u82f1\u683c\u862d\u8db3\u7403\u8d85\u7d1a\u806f\u8cfd', '\u82f1\u8d85\u806f\u8cfd']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_319", "question": "\u66fc\u806f\u5728\u82f1\u8d85\u806f\u8cfd\u4e2d\u7684\u6392\u540d\u662f\u591a\u5c11\uff1f", "function": {"name": "sports_ranking", "description": "Fetch the ranking of a specific sports team in a specific league", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the league."}, "season": {"type": "integer", "description": "Optional parameter to specify the season, default is the current season if not specified."}}, "required": ["team", "league"]}}}, "model_result_raw": [{"sports_ranking": "{\"team\":\"\u66fc\u806f\",\"league\":\"\u82f1\u8d85\"}"}], "model_result_decoded": [{"sports_ranking": {"team": "\u66fc\u806f", "league": "\u82f1\u8d85"}}], "possible_answer": {"sports_ranking": {"team": ["Manchester United", "Man United", "Man U", "MUFC", "\u66fc\u5fb9\u65af\u7279\u806f\u8db3\u7403\u4ff1\u6a02\u90e8", "\u66fc\u806f"], "league": ["Premier League", "\u82f1\u683c\u862d\u8db3\u7403\u8d85\u7d1a\u806f\u8cfd", "\u82f1\u8d85\u806f\u8cfd"], "season": [""]}}}
{"id": 326, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team1': '\u829d\u52a0\u54e5\u516c\u725b'. Expected one of ['Chicago Bulls', '\u829d\u52a0\u54e5\u516c\u725b\u968a']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_325", "question": "\u829d\u52a0\u54e5\u516c\u725b\u968a\u548c\u6d1b\u6749\u78ef\u6e56\u4eba\u968a\u6700\u5f8c\u4e00\u5834\u6bd4\u8cfd\u662f\u8ab0\u8d0f\u4e86\uff1f", "function": {"name": "sports.match_results", "description": "Returns the results of a given match between two teams.", "parameters": {"type": "dict", "properties": {"team1": {"type": "string", "description": "The name of the first team."}, "team2": {"type": "string", "description": "The name of the second team."}, "season": {"type": "string", "description": "The season when the match happened. Default is the current season."}}, "required": ["team1", "team2"]}}}, "model_result_raw": [{"sports_match_results": "{\"team1\":\"\u829d\u52a0\u54e5\u516c\u725b\",\"team2\":\"\u6d1b\u6749\u78ef\u6e56\u4eba\"}"}], "model_result_decoded": [{"sports_match_results": {"team1": "\u829d\u52a0\u54e5\u516c\u725b", "team2": "\u6d1b\u6749\u78ef\u6e56\u4eba"}}], "possible_answer": {"sports.match_results": {"team1": ["Chicago Bulls", "\u829d\u52a0\u54e5\u516c\u725b\u968a"], "team2": ["Los Angeles Lakers", "\u6d1b\u6749\u78ef\u6e56\u4eba\u968a", "\u6e56\u4eba\u968a"], "season": [""]}}}
{"id": 329, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': '\u901a\u5f80\u69ae\u8000\u4e4b\u8def'. Expected one of ['Ticket to Ride', '\u9435\u9053\u4efb\u52d9']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_328", "question": "\u5c0b\u627e\u684c\u904a\u300a\u9435\u9053\u4efb\u52d9\u300b\u7684\u8a55\u5206\u548c\u73a9\u5bb6\u4eba\u6578\u3002", "function": {"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}}, "model_result_raw": [{"boardgame_get_info": "{\"name\":\"\u901a\u5f80\u69ae\u8000\u4e4b\u8def\",\"parameters\":[\"player count\",\"rating\"],\"language\":\"English\"}"}], "model_result_decoded": [{"boardgame_get_info": {"name": "\u901a\u5f80\u69ae\u8000\u4e4b\u8def", "parameters": ["player count", "rating"], "language": "English"}}], "possible_answer": {"boardgame.get_info": {"name": ["Ticket to Ride", "\u9435\u9053\u4efb\u52d9"], "parameters": [["rating", "player count"], ["player count", "rating"], ["\u8a55\u5206", "\u73a9\u5bb6\u4eba\u6578"], ["\u73a9\u5bb6\u4eba\u6578", "\u8a55\u5206"]], "language": ["", "English", "\u82f1\u6587"]}}}
{"id": 333, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'variant': 'classic'. Expected one of ['classical', '', '\u7d93\u5178']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_332", "question": "\u99ac\u683c\u52aa\u65af\u00b7\u5361\u723e\u68ee\u7684\u570b\u969b\u8c61\u68cb\u7d93\u5178\u7b49\u7d1a\u662f\u591a\u5c11\uff1f", "function": {"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}}, "model_result_raw": [{"chess_rating": "{\"player_name\":\"Magnus Carlsen\",\"variant\":\"classic\"}"}], "model_result_decoded": [{"chess_rating": {"player_name": "Magnus Carlsen", "variant": "classic"}}], "possible_answer": {"chess.rating": {"player_name": ["Magnus Carlsen", "\u99ac\u683c\u52aa\u65af\u00b7\u5361\u723e\u68ee", "\u99ac\u683c\u52aa\u65af\u5361\u723e\u68ee"], "variant": ["classical", "", "\u7d93\u5178"]}}}
{"id": 334, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'London, UK'. Expected one of ['London, United Kingdom', 'London', '\u502b\u6566', '\u82f1\u570b\u502b\u6566', '\u502b\u6566, \u82f1\u570b']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_333", "question": "\u5c0b\u627e\u82f1\u570b\u502b\u6566\u672a\u4f863\u5929\u7684\u9ad8\u4f4e\u6eab\u5ea6\uff0c\u6fd5\u5ea6\u548c\u964d\u6c34\u91cf\u3002", "function": {"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "array", "items": {"type": "string", "enum": ["high_low_temperature", "humidity", "precipitation"]}, "description": "Specific weather details required in the forecast."}}, "required": ["location", "days", "details"]}}}, "model_result_raw": [{"detailed_weather_forecast": "{\"location\":\"London, UK\",\"days\":3,\"details\":[\"high_low_temperature\",\"humidity\",\"precipitation\"]}"}], "model_result_decoded": [{"detailed_weather_forecast": {"location": "London, UK", "days": 3, "details": ["high_low_temperature", "humidity", "precipitation"]}}], "possible_answer": {"detailed_weather_forecast": {"location": ["London, United Kingdom", "London", "\u502b\u6566", "\u82f1\u570b\u502b\u6566", "\u502b\u6566, \u82f1\u570b"], "days": [3], "details": [["high_low_temperature", "humidity", "precipitation"], ["\u9ad8\u4f4e\u6eab\u5ea6", "\u6fd5\u5ea6", "\u964d\u96e8\u91cf"]]}}}
{"id": 338, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'cards'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_337", "question": "\u5728\u5fb7\u5dde\u64b2\u514b\u904a\u6232\u4e2d\uff0c\u8ab0\u8d0f\u5f97\u4e86\u8207\u73a9\u5bb6Alex\u3001Sam\u3001Robert\u548cSteve\u4e00\u8d77\u73a9\u7684\u64b2\u514b\u724c\u904a\u6232\uff0c\u7d66\u51fa\u7684\u724c\u662fAlex':['\u9ed1\u6843A', '\u9ed1\u6843K']\uff0c'Sam': ['\u65b9\u584a2', '\u6885\u82b13']\uff0c'Robert': ['\u7d05\u5fc3Q', '\u7d05\u5fc310']\uff0c'Steve': ['\u9ed1\u68434', '\u9ed1\u68435']\uff1f", "function": {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}}, "model_result_raw": [{"poker_game_winner": "{\"players\":[\"Alex\",\"Sam\",\"Robert\",\"Steve\"],\"type\":\"Texas Holdem\"}"}], "model_result_decoded": [{"poker_game_winner": {"players": ["Alex", "Sam", "Robert", "Steve"], "type": "Texas Holdem"}}], "possible_answer": {"poker_game_winner": {"players": [["Alex", "Sam", "Robert", "Steve"]], "cards": [{"Alex": [["A of spades", "K of spades"]], "Sam": [["2 of diamonds", "3 of clubs"]], "Robert": [["Q of hearts", "10 of hearts"]], "Steve": [["4 of spades", "5 of spades"]]}, {"Alex": [["\u9ed1\u6843A", "\u9ed1\u6843K"]], "Sam": [["\u65b9\u584a2", "\u6885\u82b13"]], "Robert": [["\u7d05\u5fc3Q", "\u7d05\u5fc310"]], "Steve": [["\u9ed1\u68434", "\u9ed1\u68435"]]}], "type": ["Texas Holdem", "", "\u5fb7\u5dde\u64b2\u514b"]}}}
{"id": 345, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game': 'The Legend of Zelda: Breath of the Wild'. Expected one of ['Legend of Zelda: Breath of the Wild', '\u85a9\u723e\u9054\u50b3\u8aaa \u8352\u91ce\u4e4b\u606f', '\u85a9\u723e\u9054\u50b3\u8aaa\uff1a\u8352\u91ce\u4e4b\u606f']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_344", "question": "\u5728\u904a\u6232\u300a\u85a9\u723e\u9054\u50b3\u8aaa: \u66e0\u91ce\u4e4b\u606f\u300b\u4e2d\uff0c\u6b66\u5668\u300c\u5b88\u8b77\u8005\u4e4b\u528d+\u300d\u7684power rating\u662f\u591a\u5c11\uff1f", "function": {"name": "get_game_item_stats", "description": "Retrieve the statistics of a specific item in a specific video game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game to retrieve information from."}, "item": {"type": "string", "description": "The name of the item in the game."}, "stat": {"type": "string", "description": "Specific statistic required."}}, "required": ["game", "item", "stat"]}}}, "model_result_raw": [{"get_game_item_stats": "{\"game\":\"The Legend of Zelda: Breath of the Wild\",\"item\":\"Guardian Sword+\",\"stat\":\"power rating\"}"}], "model_result_decoded": [{"get_game_item_stats": {"game": "The Legend of Zelda: Breath of the Wild", "item": "Guardian Sword+", "stat": "power rating"}}], "possible_answer": {"get_game_item_stats": {"game": ["Legend of Zelda: Breath of the Wild", "\u85a9\u723e\u9054\u50b3\u8aaa \u8352\u91ce\u4e4b\u606f", "\u85a9\u723e\u9054\u50b3\u8aaa\uff1a\u8352\u91ce\u4e4b\u606f"], "item": ["Guardian Sword+", "\u5b88\u8b77\u8005\u4e4b\u528d+"], "stat": ["Power", "power", "power rating"]}}}
{"id": 352, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_351", "question": "\u627e\u4e00\u500b\u8a55\u5206\u8d85\u904e4.5\u4e14\u8207Windows 10\u76f8\u5bb9\u7684\u591a\u4eba\u904a\u6232\u3002", "function": {"name": "multiplayer_game_finder", "description": "Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.", "parameters": {"type": "dict", "properties": {"platform": {"type": "string", "description": "The platform you want the game to be compatible with, e.g. Windows 10, PS5."}, "rating": {"type": "float", "description": "Desired minimum game rating on a 5.0 scale."}, "genre": {"type": "string", "description": "Desired game genre, e.g. Action, Adventure, Racing. Default is 'Action'.", "enum": ["Action", "Adventure", "Racing", "Strategy", "Simulation"]}}, "required": ["platform", "rating"]}}}, "model_result_raw": [{"multiplayer_game_finder": "{\"platform\": \"Windows 10\", \"rating\": 4.5}"}, {"multiplayer_game_finder": "{\"platform\": \"Windows 10\", \"rating\": 4.5, \"genre\": \"Action\"}"}, {"multiplayer_game_finder": "{\"platform\": \"Windows 10\", \"rating\": 4.5, \"genre\": \"Adventure\"}"}, {"multiplayer_game_finder": "{\"platform\": \"Windows 10\", \"rating\": 4.5, \"genre\": \"Racing\"}"}, {"multiplayer_game_finder": "{\"platform\": \"Windows 10\", \"rating\": 4.5, \"genre\": \"Strategy\"}"}, {"multiplayer_game_finder": "{\"platform\": \"Windows 10\", \"rating\": 4.5, \"genre\": \"Simulation\"}"}], "model_result_decoded": [{"multiplayer_game_finder": {"platform": "Windows 10", "rating": 4.5}}, {"multiplayer_game_finder": {"platform": "Windows 10", "rating": 4.5, "genre": "Action"}}, {"multiplayer_game_finder": {"platform": "Windows 10", "rating": 4.5, "genre": "Adventure"}}, {"multiplayer_game_finder": {"platform": "Windows 10", "rating": 4.5, "genre": "Racing"}}, {"multiplayer_game_finder": {"platform": "Windows 10", "rating": 4.5, "genre": "Strategy"}}, {"multiplayer_game_finder": {"platform": "Windows 10", "rating": 4.5, "genre": "Simulation"}}], "possible_answer": {"multiplayer_game_finder": {"platform": ["Windows 10"], "rating": [4.5], "genre": ["", "Action", "\u52d5\u4f5c"]}}}
{"id": 360, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_359", "question": "\u7d66\u6211\u4e00\u500b\u5169\u4eba\u4efd\u91cf\u7684\u7d20\u98df\u7fa9\u5927\u5229\u9eb5\u548c\u4e73\u916a\u7684\u98df\u8b5c\u3002", "function": {"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "dict", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}}, "model_result_raw": [{"recipe_search": "{\"dietary_restriction\": \"Vegetarian\", \"ingredients\": [\"pasta\", \"cheese\"], \"servings\": 2}"}, {"recipe_search": "{\"dietary_restriction\": \"Vegetarian\", \"ingredients\": [\"pasta\", \"cheese\"], \"servings\": 2}"}], "model_result_decoded": [{"recipe_search": {"dietary_restriction": "Vegetarian", "ingredients": ["pasta", "cheese"], "servings": 2}}, {"recipe_search": {"dietary_restriction": "Vegetarian", "ingredients": ["pasta", "cheese"], "servings": 2}}], "possible_answer": {"recipe_search": {"dietary_restriction": ["Vegetarian", "\u7d20\u98df"], "ingredients": [["pasta", "cheese"], ["\u7fa9\u5927\u5229\u9eb5", "\u4e73\u916a"], ["\u7fa9\u5927\u5229\u9eb5", "\u8d77\u53f8"]], "servings": [2]}}}
{"id": 361, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipeName': '\u610f\u5927\u5229\u78b3\u62cc\u9eb5'. Expected one of ['pasta carbonara', '\u7fa9\u5927\u5229\u78b3\u62cc\u9eb5']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_360", "question": "\u5c0b\u627e\u4e00\u500b\u53ea\u542b\u6709\u5c11\u65bc500\u5361\u8def\u91cc\u7684\u7fa9\u5927\u5229\u78b3\u62cc\u9eb5\u98df\u8b5c\u3002", "function": {"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}}, "model_result_raw": [{"find_recipe": "{\"recipeName\":\"\u610f\u5927\u5229\u78b3\u62cc\u9eb5\",\"maxCalories\":500}"}], "model_result_decoded": [{"find_recipe": {"recipeName": "\u610f\u5927\u5229\u78b3\u62cc\u9eb5", "maxCalories": 500}}], "possible_answer": {"find_recipe": {"recipeName": ["pasta carbonara", "\u7fa9\u5927\u5229\u78b3\u62cc\u9eb5"], "maxCalories": [500]}}}
{"id": 373, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product': 'organic bananas'. Expected one of ['bananas', '\u9999\u8549']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_372", "question": "\u5728\u5168\u98df\u8d85\u5e02\u7684\u8a55\u5206\u57fa\u790e\u4e0a\uff0c\u5c0b\u627e\u524d\u4e94\u500b\u6709\u6a5f\u9999\u8549\u54c1\u724c\u3002", "function": {"name": "whole_foods.find_top_brands", "description": "Get top brands based on a specific product from Whole Foods", "parameters": {"type": "dict", "properties": {"product": {"type": "string", "description": "The product for which the top brands should be fetched."}, "number": {"type": "integer", "description": "Number of top brands to be fetched. Default is 5"}, "organic": {"type": "boolean", "description": "If the product should be organic. Default is false"}}, "required": ["product"]}}}, "model_result_raw": [{"whole_foods_find_top_brands": "{\"product\":\"organic bananas\",\"number\":5,\"organic\":true}"}], "model_result_decoded": [{"whole_foods_find_top_brands": {"product": "organic bananas", "number": 5, "organic": true}}], "possible_answer": {"whole_foods.find_top_brands": {"product": ["bananas", "\u9999\u8549"], "number": [5, ""], "organic": [true]}}}
{"id": 374, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product_list': ['\u860b\u679c', '\u7c73\u98ef', '\u88dd\u6c34']. Expected one of [['apples', 'rice', 'bottled water'], ['apples', 'rice', 'water'], ['\u860b\u679c', '\u7c73\u98ef', '\u6c34'], ['\u860b\u679c', '\u7c73\u98ef', '\u74f6\u88dd\u6c34']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_373", "question": "\u6211\u60f3\u5728\u8056\u8377\u897f\u9644\u8fd1\u7684Walmart\u8cb7\u860b\u679c\u3001\u7c73\u98ef\u548c12\u7f50\u74f6\u88dd\u6c34\u3002\u8acb\u986f\u793a\u7522\u54c1\u8cc7\u8a0a\u548c\u5eab\u5b58\u60c5\u6cc1\u3002", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": [{"walmart_purchase": "{\"loc\":\"San Jose\",\"product_list\":[\"\u860b\u679c\",\"\u7c73\u98ef\",\"\u88dd\u6c34\"],\"pack_size\":[1,1,12]}"}], "model_result_decoded": [{"walmart_purchase": {"loc": "San Jose", "product_list": ["\u860b\u679c", "\u7c73\u98ef", "\u88dd\u6c34"], "pack_size": [1, 1, 12]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA", "\u8056\u8377\u897f", "\u52a0\u5dde\u8056\u8377\u897f", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u8056\u8377\u897f"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"], ["\u860b\u679c", "\u7c73\u98ef", "\u6c34"], ["\u860b\u679c", "\u7c73\u98ef", "\u74f6\u88dd\u6c34"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Optional parameter 'store_location' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_375", "question": "\u5728Walmart\u6aa2\u67e5\u4e09\u500b\u5357\u74dc\u548c\u5169\u6253\u96de\u86cb\u7684\u7e3d\u50f9\u683c\u3002", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": [{"walmart_check_price": "{\"items\":[\"\u5357\u74dc\",\"\u96de\u86cb\"],\"quantities\":[3,24]}"}], "model_result_decoded": [{"walmart_check_price": {"items": ["\u5357\u74dc", "\u96de\u86cb"], "quantities": [3, 24]}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"], ["\u5357\u74dc", "\u96de\u86cb"], ["\u5357\u74dc", "\u86cb"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA", "\u6d1b\u6749\u78ef"]}}}
{"id": 381, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York Manhattan'. Expected one of ['Manhattan, New York', 'Manhattan, NY', 'NYC', 'New York City', '\u7d10\u7d04\u66fc\u54c8\u9813', '\u7d10\u7d04\u5e02']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_380", "question": "\u9810\u8a02\u4e00\u9593\u5bf5\u7269\u53cb\u5584\u7684\u55ae\u4eba\u623f\u9593\uff0c\u5728\u7d10\u7d04\u66fc\u54c8\u9813\u9644\u8fd1\u7684\u9152\u5e97\uff0c\u5f9e2023\u5e743\u670810\u65e5\u958b\u59cb\u5165\u4f4f3\u665a\u3002", "function": {"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}}, "model_result_raw": [{"hotel_booking": "{\"location\":\"New York Manhattan\",\"room_type\":\"single\",\"duration\":3,\"start_date\":\"2023-03-10\",\"preferences\":[\"pet_friendly\"]}"}], "model_result_decoded": [{"hotel_booking": {"location": "New York Manhattan", "room_type": "single", "duration": 3, "start_date": "2023-03-10", "preferences": ["pet_friendly"]}}], "possible_answer": {"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City", "\u7d10\u7d04\u66fc\u54c8\u9813", "\u7d10\u7d04\u5e02"], "room_type": ["single", "\u55ae\u4eba"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023", "2023\u5e743\u670810\u65e5"], "preferences": [["pet_friendly"], ["\u5bf5\u7269\u53cb\u5584"]]}}}
{"id": 387, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': 'Heaven Hotel'. Expected one of ['Hotel Paradise', '\u5929\u5802\u9152\u5e97', '\u62c9\u65af\u7dad\u52a0\u65af\u5929\u5802\u9152\u5e97']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_386", "question": "\u9810\u8a022022\u5e745\u670812\u65e5\u8d77\u70ba\u671f3\u5929\u7684\u62c9\u65af\u7dad\u52a0\u65af\u5929\u5802\u9152\u5e97\u8c6a\u83ef\u5ba2\u623f\uff0c\u4e26\u4eab\u6709\u5e02\u666f\u3002", "function": {"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}}, "model_result_raw": [{"book_hotel": "{\"hotel_name\":\"Heaven Hotel\",\"location\":\"Las Vegas\",\"room_type\":\"Deluxe\",\"start_date\":\"05-12-2022\",\"stay_duration\":3,\"view\":\"City view\"}"}], "model_result_decoded": [{"book_hotel": {"hotel_name": "Heaven Hotel", "location": "Las Vegas", "room_type": "Deluxe", "start_date": "05-12-2022", "stay_duration": 3, "view": "City view"}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hotel Paradise", "\u5929\u5802\u9152\u5e97", "\u62c9\u65af\u7dad\u52a0\u65af\u5929\u5802\u9152\u5e97"], "location": ["Las Vegas", "LV", "\u62c9\u65af\u7dad\u52a0\u65af"], "room_type": ["luxury", "Luxury", "\u8c6a\u83ef"], "start_date": ["05-12-2022", "2022-05-12", "12/05/2022", "May.12,2022", "May 12, 2022", "2022\u5e745\u670812\u65e5"], "stay_duration": [3], "view": ["city view", "city", "\u5e02\u666f"]}}}
{"id": 388, "model_name": "gpt-3.5-turbo-0125-FC", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': 'Times Square Hotel'. Expected one of ['Plaza Hotel', '\u5ee3\u5834\u9152\u5e97', '\u7d10\u7d04\u5ee3\u5834\u9152\u5e97']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_387", "question": "\u9810\u8a022022\u5e746\u67081\u65e5\u8d77\uff0c\u70ba\u671f3\u665a\u7684\u7d10\u7d04\u5ee3\u5834\u9152\u5e97\u5ba2\u623f\u3002", "function": {"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}}, "model_result_raw": [{"hotel_booking": "{\"hotel_name\":\"Times Square Hotel\",\"location\":\"New York, NY\",\"start_date\":\"2022-06-01\",\"end_date\":\"2022-06-04\"}"}], "model_result_decoded": [{"hotel_booking": {"hotel_name": "Times Square Hotel", "location": "New York, NY", "start_date": "2022-06-01", "end_date": "2022-06-04"}}], "possible_answer": {"hotel_booking": {"hotel_name": ["Plaza Hotel", "\u5ee3\u5834\u9152\u5e97", "\u7d10\u7d04\u5ee3\u5834\u9152\u5e97"], "location": ["New York City, NY", "New York, NY", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022", "2022\u5e746\u67081\u65e5"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022", "2022\u5e746\u67084\u65e5"], "rooms": [1, ""]}}}