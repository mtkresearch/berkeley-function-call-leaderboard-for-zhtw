{"accuracy": 0.865, "correct_count": 173, "total_count": 200}
{"id": 8, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "multiple_function_7", "question": "\u5982\u4f55\u8a55\u4f30\u904e\u53bb\u5341\u5e74\u83ef\u76db\u9813\u5dde\u9e7f\u7fa4\u6578\u91cf\u589e\u9577\u53ca\u5176\u5c0d\u6797\u5730\u7684\u5f71\u97ff\uff1f", "function": [{"name": "wildlife_population.assess_growth", "description": "Assesses the population growth of a specific species in a specified location over a period.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which the growth is to be calculated."}, "location": {"type": "string", "description": "The area where the species is present."}, "duration": {"type": "integer", "description": "The time period for which the population growth should be calculated in years."}}, "required": ["species", "location", "duration"]}}, {"name": "ecological_impact.analyze", "description": "Analyzes the impact of a species on a particular ecosystem.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species whose impact is to be calculated."}, "ecosystem": {"type": "string", "description": "The ecosystem being affected."}, "location": {"type": "string", "description": "The area where the impact is analyzed."}, "timeframe": {"type": "integer", "description": "The time period for which the impact analysis should be carried out in years.", "default": 5}}, "required": ["species", "ecosystem", "location"]}}]}, "model_result_raw": "wildlife_population.assess_growth(species='\u9e7f', location='\u83ef\u76db\u9813\u5dde', duration=10), ecological_impact.analyze(species='\u9e7f', ecosystem='\u6797\u5730', location='\u83ef\u76db\u9813\u5dde')", "model_result_decoded": [{"wildlife_population.assess_growth": {"species": "\u9e7f", "location": "\u83ef\u76db\u9813\u5dde", "duration": 10}}, {"ecological_impact.analyze": {"species": "\u9e7f", "ecosystem": "\u6797\u5730", "location": "\u83ef\u76db\u9813\u5dde"}}], "possible_answer": {"wildlife_population.assess_growth": {"species": ["deer", "Deer", "\u9e7f", "\u9e7f\u7fa4"], "location": ["Washington state", "WA", "Washington", "\u83ef\u76db\u9813\u5dde", "\u83ef\u76db\u9813"], "duration": [10]}}}
{"id": 10, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Unexpected parameter: '\u6578\u5b78'."], "sub_error_type": "value_error:dict_key", "model_output_item": {"calculate_average": {"gradeDict": {"\u6578\u5b78": 90, "\u79d1\u5b78": 75, "\u6b77\u53f2": 82, "\u97f3\u6a02": 89}}}, "possible_answer_item": {"calculate_average": {"gradeDict": [{"math": [90], "science": [75], "history": [82], "music": [89]}]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_9", "question": "\u8a08\u7b97\u5b78\u751f\u7d04\u7ff0\u5728\u4e0d\u540c\u79d1\u76ee\u4e2d\u7684\u5e73\u5747\u6210\u7e3e\uff0c\u4ed6\u7684\u6210\u7e3e\u70ba {'math':90, 'science':75, 'history':82, 'music':89}\u3002", "function": [{"name": "calculate_standard_deviation", "description": "This function calculates the standard deviation across different scores for a specific student.", "parameters": {"type": "dict", "properties": {"gradeDict": {"type": "dict", "description": "A dictionary where keys represent subjects and values represent scores"}}, "required": ["gradeDict"]}}, {"name": "calculate_average", "description": "This function calculates the average grade across different subjects for a specific student.", "parameters": {"type": "dict", "properties": {"gradeDict": {"type": "dict", "description": "A dictionary where keys represent subjects and values represent scores"}}, "required": ["gradeDict"]}}, {"name": "highest_grade", "description": "This function finds the subject where the student got the highest score.", "parameters": {"type": "dict", "properties": {"gradeDict": {"type": "dict", "description": "A dictionary where keys represent subjects and values represent scores"}}, "required": ["gradeDict"]}}]}, "model_result_raw": "calculate_average(gradeDict={'\u6578\u5b78':90, '\u79d1\u5b78':75, '\u6b77\u53f2':82, '\u97f3\u6a02':89})", "model_result_decoded": [{"calculate_average": {"gradeDict": {"\u6578\u5b78": 90, "\u79d1\u5b78": 75, "\u6b77\u53f2": 82, "\u97f3\u6a02": 89}}}], "possible_answer": {"calculate_average": {"gradeDict": [{"math": [90], "science": [75], "history": [82], "music": [89]}]}}}
{"id": 19, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'battle': 'Stalingrad Offensive'. Expected one of ['Battle of Stalingrad', 'Stalingrad', '\u53f2\u9054\u6797\u683c\u52d2\u6230\u5f79', '\u53f2\u9054\u6797\u683c\u52d2']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"european_history.battle_details": {"battle": "Stalingrad Offensive"}}, "possible_answer_item": {"european_history.battle_details": {"battle": ["Battle of Stalingrad", "Stalingrad", "\u53f2\u9054\u6797\u683c\u52d2\u6230\u5f79", "\u53f2\u9054\u6797\u683c\u52d2"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_18", "question": "\u8ab0\u662f\u53c3\u8207\u53f2\u9054\u6797\u683c\u52d2\u6230\u5f79\u7684\u4e3b\u8981\u53c3\u8207\u8005\uff0c\u4ee5\u53ca\u6230\u5f79\u7684\u5730\u9ede\u662f\u5728\u54ea\u88e1\uff1f", "function": [{"name": "european_history.war_details", "description": "Get details of a specific historical European war.", "parameters": {"type": "dict", "properties": {"war": {"type": "string", "description": "Name of the war"}}, "required": ["war"]}}, {"name": "european_history.leader_info", "description": "Get information about a specific historical leader in European history.", "parameters": {"type": "dict", "properties": {"leader": {"type": "string", "description": "Name of the leader"}}, "required": ["leader"]}}, {"name": "european_history.battle_details", "description": "Get details of a specific historical European battle.", "parameters": {"type": "dict", "properties": {"battle": {"type": "string", "description": "Name of the battle"}}, "required": ["battle"]}}]}, "model_result_raw": "european_history.battle_details(battle='Stalingrad Offensive')", "model_result_decoded": [{"european_history.battle_details": {"battle": "Stalingrad Offensive"}}], "possible_answer": {"european_history.battle_details": {"battle": ["Battle of Stalingrad", "Stalingrad", "\u53f2\u9054\u6797\u683c\u52d2\u6230\u5f79", "\u53f2\u9054\u6797\u683c\u52d2"]}}}
{"id": 24, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'stats_fields': ['points_per_game', 'assists_per_game', 'minutes_per_game']. Expected one of [['points per game', 'assists', 'minutes per game'], ['points per game', 'minutes per game', 'assists'], ['assists', 'points per game', 'minutes per game'], ['assists', 'minutes per game', 'points per game'], ['minutes per game', 'points per game', 'assists'], ['minutes per game', 'assists', 'points per game'], ['points', 'assists', 'minutes'], ['points', 'minutes', 'assists'], ['assists', 'points', 'minutes'], ['assists', 'minutes', 'points'], ['minutes', 'points', 'assists'], ['minutes', 'assists', 'points'], ['points_per_game', 'assists', 'minutes_per_game'], ['points_per_game', 'minutes_per_game', 'assists'], ['assists', 'points_per_game', 'minutes_per_game'], ['assists', 'minutes_per_game', 'points_per_game'], ['minutes_per_game', 'points_per_game', 'assists'], ['minutes_per_game', 'assists', 'points_per_game'], ['\u5834\u5747\u5f97\u5206', '\u52a9\u653b', '\u5834\u5747\u4e0a\u5834\u6642\u9593'], ['\u5834\u5747\u5f97\u5206', '\u5834\u5747\u4e0a\u5834\u6642\u9593', '\u52a9\u653b'], ['\u52a9\u653b', '\u5834\u5747\u5f97\u5206', '\u5834\u5747\u4e0a\u5834\u6642\u9593'], ['\u52a9\u653b', '\u5834\u5747\u4e0a\u5834\u6642\u9593', '\u5834\u5747\u5f97\u5206'], ['\u5834\u5747\u4e0a\u5834\u6642\u9593', '\u52a9\u653b', '\u5834\u5747\u5f97\u5206'], ['\u5834\u5747\u4e0a\u5834\u6642\u9593', '\u5834\u5747\u5f97\u5206', '\u52a9\u653b']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"basketball.player_stats.get": {"player_name": "\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af", "stats_fields": ["points_per_game", "assists_per_game", "minutes_per_game"]}}, "possible_answer_item": {"basketball.player_stats.get": {"player_name": ["LeBron James", "\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af", "\u52d2\u5e03\u6717\u8a79\u59c6\u65af"], "stats_fields": [["points per game", "assists", "minutes per game"], ["points per game", "minutes per game", "assists"], ["assists", "points per game", "minutes per game"], ["assists", "minutes per game", "points per game"], ["minutes per game", "points per game", "assists"], ["minutes per game", "assists", "points per game"], ["points", "assists", "minutes"], ["points", "minutes", "assists"], ["assists", "points", "minutes"], ["assists", "minutes", "points"], ["minutes", "points", "assists"], ["minutes", "assists", "points"], ["points_per_game", "assists", "minutes_per_game"], ["points_per_game", "minutes_per_game", "assists"], ["assists", "points_per_game", "minutes_per_game"], ["assists", "minutes_per_game", "points_per_game"], ["minutes_per_game", "points_per_game", "assists"], ["minutes_per_game", "assists", "points_per_game"], ["\u5834\u5747\u5f97\u5206", "\u52a9\u653b", "\u5834\u5747\u4e0a\u5834\u6642\u9593"], ["\u5834\u5747\u5f97\u5206", "\u5834\u5747\u4e0a\u5834\u6642\u9593", "\u52a9\u653b"], ["\u52a9\u653b", "\u5834\u5747\u5f97\u5206", "\u5834\u5747\u4e0a\u5834\u6642\u9593"], ["\u52a9\u653b", "\u5834\u5747\u4e0a\u5834\u6642\u9593", "\u5834\u5747\u5f97\u5206"], ["\u5834\u5747\u4e0a\u5834\u6642\u9593", "\u52a9\u653b", "\u5834\u5747\u5f97\u5206"], ["\u5834\u5747\u4e0a\u5834\u6642\u9593", "\u5834\u5747\u5f97\u5206", "\u52a9\u653b"]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_23", "question": "\u7c43\u7403\u9078\u624b\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af\u76ee\u524d\u7684\u6578\u64da\u5305\u62ec\u5834\u5747\u5f97\u5206\u3001\u52a9\u653b\u548c\u5834\u5747\u4e0a\u5834\u6642\u9593\u662f\u591a\u5c11\uff1f", "function": [{"name": "basketball.player_stats.get", "description": "Get current statistics for a specified basketball player", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the player."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including points, assists, rebounds, minutes.", "items": {"type": "string"}}}, "required": ["player_name", "stats_fields"]}}, {"name": "basketball.game_stats.get", "description": "Get the detailed statistical data from a specific basketball game", "parameters": {"type": "dict", "properties": {"team1": {"type": "string", "description": "One of the competing teams in the game."}, "team2": {"type": "string", "description": "One of the competing teams in the game."}, "date": {"type": "string", "description": "The date when the game occurred."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including total points, total assists, total rebounds, turnovers. Default to empty list", "items": {"type": "string"}}}, "required": ["team1", "team2", "date"]}}, {"name": "basketball.team_stats.get", "description": "Get current statistics for a specific basketball team", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the team."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including total points, total assists, total rebounds, win rate.", "items": {"type": "string"}}}, "required": ["team_name", "stats_fields"]}}]}, "model_result_raw": "basketball.player_stats.get(player_name='\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af', stats_fields=['points_per_game', 'assists_per_game','minutes_per_game'])", "model_result_decoded": [{"basketball.player_stats.get": {"player_name": "\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af", "stats_fields": ["points_per_game", "assists_per_game", "minutes_per_game"]}}], "possible_answer": {"basketball.player_stats.get": {"player_name": ["LeBron James", "\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af", "\u52d2\u5e03\u6717\u8a79\u59c6\u65af"], "stats_fields": [["points per game", "assists", "minutes per game"], ["points per game", "minutes per game", "assists"], ["assists", "points per game", "minutes per game"], ["assists", "minutes per game", "points per game"], ["minutes per game", "points per game", "assists"], ["minutes per game", "assists", "points per game"], ["points", "assists", "minutes"], ["points", "minutes", "assists"], ["assists", "points", "minutes"], ["assists", "minutes", "points"], ["minutes", "points", "assists"], ["minutes", "assists", "points"], ["points_per_game", "assists", "minutes_per_game"], ["points_per_game", "minutes_per_game", "assists"], ["assists", "points_per_game", "minutes_per_game"], ["assists", "minutes_per_game", "points_per_game"], ["minutes_per_game", "points_per_game", "assists"], ["minutes_per_game", "assists", "points_per_game"], ["\u5834\u5747\u5f97\u5206", "\u52a9\u653b", "\u5834\u5747\u4e0a\u5834\u6642\u9593"], ["\u5834\u5747\u5f97\u5206", "\u5834\u5747\u4e0a\u5834\u6642\u9593", "\u52a9\u653b"], ["\u52a9\u653b", "\u5834\u5747\u5f97\u5206", "\u5834\u5747\u4e0a\u5834\u6642\u9593"], ["\u52a9\u653b", "\u5834\u5747\u4e0a\u5834\u6642\u9593", "\u5834\u5747\u5f97\u5206"], ["\u5834\u5747\u4e0a\u5834\u6642\u9593", "\u52a9\u653b", "\u5834\u5747\u5f97\u5206"], ["\u5834\u5747\u4e0a\u5834\u6642\u9593", "\u5834\u5747\u5f97\u5206", "\u52a9\u653b"]]}}}
{"id": 25, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Function name 'route_planner.calculate_route' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"chess_club_details.find": {"name": "International Chess Club", "city": "Edinburgh"}}, "possible_answer_item": {"route_planner.calculate_route": {"start": ["London", "\u502b\u6566"], "destination": ["Edinburgh", "\u611b\u4e01\u5821"], "method": ["fastest", "", "\u6700\u5feb"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_24", "question": "\u5f9e\u502b\u6566\u5230\u611b\u4e01\u5821\u53c3\u52a0\u570b\u969b\u8c61\u68cb\u9326\u6a19\u8cfd\u7684\u6700\u5feb\u8def\u7dda\u662f\u4ec0\u9ebc\uff1f\u8acb\u63d0\u4f9b\u5927\u7d04\u7684\u8ddd\u96e2\u4f30\u8a08\u3002", "function": [{"name": "route_planner.calculate_route", "description": "Determines the best route between two points.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "The starting point of the journey."}, "destination": {"type": "string", "description": "The destination of the journey."}, "method": {"type": "string", "enum": ["fastest", "shortest", "balanced"], "description": "The method to use when calculating the route (default is 'fastest').", "default": "fastest"}}, "required": ["start", "destination"]}}, {"name": "chess_club_details.find", "description": "Provides details about a chess club, including location.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the chess club."}, "city": {"type": "string", "description": "The city in which the chess club is located."}, "event": {"type": "string", "description": "The event hosted by the club.", "default": "null"}}, "required": ["name", "city"]}}]}, "model_result_raw": "chess_club_details.find(name='International Chess Club', city='Edinburgh')", "model_result_decoded": [{"chess_club_details.find": {"name": "International Chess Club", "city": "Edinburgh"}}], "possible_answer": {"route_planner.calculate_route": {"start": ["London", "\u502b\u6566"], "destination": ["Edinburgh", "\u611b\u4e01\u5821"], "method": ["fastest", "", "\u6700\u5feb"]}}}
{"id": 27, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "multiple_function_26", "question": "\u5c0b\u627e\u5728Playstation\u5e73\u53f0\u4e0a\u73a9Fortnite\u6642\u4e0d\u540c\u4efb\u52d9\u548c\u734e\u76ca\u7684\u734e\u52f5\u3002", "function": [{"name": "game_scores.get", "description": "Retrieve scores and rankings based on player\u2019s performance in a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "level": {"type": "integer", "description": "The level of the game for which you want to retrieve the scores."}, "player": {"type": "string", "description": "The name of the player for whom you want to retrieve scores. Default ''", "optional": true}}, "required": ["game", "platform", "level"]}}, {"name": "game_rewards.get", "description": "Retrieve information about different types of rewards that you can receive when playing a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "mission": {"type": "string", "description": "The mission for which you want to know the rewards. Default to ''", "optional": true}, "trophy": {"type": "string", "description": "The trophy level for which you want to know the rewards. Default to ''", "optional": true}}, "required": ["game", "platform"]}}, {"name": "game_missions.list", "description": "List all missions for a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}}, "required": ["game"]}}]}, "model_result_raw": "game_missions.list(game='Fortnite'), game_rewards.get(game='Fortnite', platform='Playstation')", "model_result_decoded": [{"game_missions.list": {"game": "Fortnite"}}, {"game_rewards.get": {"game": "Fortnite", "platform": "Playstation"}}], "possible_answer": {"game_rewards.get": {"game": ["Fortnite", "\u8981\u585e\u82f1\u96c4"], "platform": ["Playstation", "PS"], "mission": [""], "trophy": [""]}}}
{"id": 32, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'width': 10. Expected one of [7]."], "sub_error_type": "value_error:others", "model_output_item": {"geometry_rectangle.calculate": {"width": 10, "length": 7}}, "possible_answer_item": {"geometry_rectangle.calculate": {"width": [7], "length": [10]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_31", "question": "\u9019\u500b\u5bec\u5ea6\u70ba7\u55ae\u4f4d\u3001\u9577\u5ea6\u70ba10\u55ae\u4f4d\u7684\u9577\u65b9\u5f62\u7684\u9762\u7a4d\u548c\u5468\u9577\u662f\u591a\u5c11\uff1f", "function": [{"name": "geometry_square.calculate", "description": "Calculates the area and perimeter of a square given the side length.", "parameters": {"type": "dict", "properties": {"side": {"type": "integer", "description": "The length of a side of the square."}}, "required": ["side"]}}, {"name": "geometry_circle.calculate", "description": "Calculates the area and circumference of a circle given the radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}, {"name": "geometry_rectangle.calculate", "description": "Calculates the area and perimeter of a rectangle given the width and length.", "parameters": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the rectangle."}, "length": {"type": "integer", "description": "The length of the rectangle."}}, "required": ["width", "length"]}}]}, "model_result_raw": "geometry_rectangle.calculate(width=10, length=7)", "model_result_decoded": [{"geometry_rectangle.calculate": {"width": 10, "length": 7}}], "possible_answer": {"geometry_rectangle.calculate": {"width": [7], "length": [10]}}}
{"id": 52, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Optional parameter 'n_rolls' not provided and not marked as optional."], "sub_error_type": "simple_function_checker:missing_optional", "model_output_item": {"dice_roll_probability": {"desired_sum": 7, "sides_per_die": 6}}, "possible_answer_item": {"dice_roll_probability": {"desired_sum": [7], "sides_per_die": [6], "n_rolls": [2]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_51", "question": "\u8a08\u7b97\u5728\u64f2\u5169\u500b\u9ab0\u5b50\u6642\u7e3d\u548c\u70ba7\u7684\u6a5f\u7387\u3002", "function": [{"name": "dice_roll_probability", "description": "Calculate the probability of a specific sum appearing from rolling two dice.", "parameters": {"type": "dict", "properties": {"desired_sum": {"type": "integer", "description": "The sum for which to calculate the probability."}, "n_rolls": {"type": "integer", "description": "Number of dice to be rolled. Default is 1", "optional": true}, "sides_per_die": {"type": "integer", "description": "Number of sides on each die."}}, "required": ["desired_sum", "sides_per_die"]}}, {"name": "flip_coin_probability", "description": "Calculate the probability of a specific outcome appearing from flipping a coin.", "parameters": {"type": "dict", "properties": {"desired_outcome": {"type": "string", "description": "The outcome for which to calculate the probability."}, "n_flips": {"type": "integer", "description": "Number of coins to be flipped. Default 1", "optional": true}}, "required": ["desired_outcome"]}}, {"name": "shuffle_card_probability", "description": "Calculate the probability of a specific card appearing from a shuffled deck.", "parameters": {"type": "dict", "properties": {"desired_card": {"type": "string", "description": "The card for which to calculate the probability."}, "n_decks": {"type": "integer", "description": "Number of decks to shuffle. Default 1", "optional": true}}, "required": ["desired_card"]}}]}, "model_result_raw": "dice_roll_probability(desired_sum=7, sides_per_die=6)", "model_result_decoded": [{"dice_roll_probability": {"desired_sum": 7, "sides_per_die": 6}}], "possible_answer": {"dice_roll_probability": {"desired_sum": [7], "sides_per_die": [6], "n_rolls": [2]}}}
{"id": 62, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'specialization': 'small-scale garden design'. Expected one of ['small space garden design', '\u5c0f\u578b\u5ead\u5712\u8a2d\u8a08']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"landscape_architect.find_specialty": {"location": "Portland, OR", "specialization": "small-scale garden design", "years_experience": 5}}, "possible_answer_item": {"landscape_architect.find_specialty": {"location": ["Portland", "Portland, OR", "\u6ce2\u7279\u862d", "\u4fc4\u52d2\u5ca1\u5dde\u6ce2\u7279\u862d", "\u6ce2\u7279\u862d, OR"], "specialization": ["small space garden design", "\u5c0f\u578b\u5ead\u5712\u8a2d\u8a08"], "years_experience": [5]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_61", "question": "\u5c0b\u627e\u4e00\u4f4d\u5728\u6ce2\u7279\u862d\u64c1\u67095\u5e74\u5c0f\u578b\u5ead\u5712\u8a2d\u8a08\u7d93\u9a57\u7684\u666f\u89c0\u5efa\u7bc9\u5e2b\u3002", "function": [{"name": "home_renovation_expert.find_specialty", "description": "Search for a home renovation expert based on the location and specialization", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the professional is based, e.g. Portland, OR."}, "specialization": {"type": "string", "description": "A specific area of expertise, such as kitchen or bathroom renovation."}, "years_experience": {"type": "integer", "description": "Number of years the professional has been practicing in their field. (optional)", "default": 0}}, "required": ["location", "specialization"]}}, {"name": "landscape_architect.find_specialty", "description": "Search for a landscape architect based on the location and specialization", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the professional is based, e.g. Portland, OR."}, "specialization": {"type": "string", "description": "A specific area of expertise. Common areas include residential design, commercial design, urban design, and park design."}, "years_experience": {"type": "integer", "description": "Number of years the professional has been practicing in their field. (optional)", "default": 0}}, "required": ["location", "specialization"]}}]}, "model_result_raw": "landscape_architect.find_specialty(location='Portland, OR', specialization='small-scale garden design', years_experience=5)", "model_result_decoded": [{"landscape_architect.find_specialty": {"location": "Portland, OR", "specialization": "small-scale garden design", "years_experience": 5}}], "possible_answer": {"landscape_architect.find_specialty": {"location": ["Portland", "Portland, OR", "\u6ce2\u7279\u862d", "\u4fc4\u52d2\u5ca1\u5dde\u6ce2\u7279\u862d", "\u6ce2\u7279\u862d, OR"], "specialization": ["small space garden design", "\u5c0f\u578b\u5ead\u5712\u8a2d\u8a08"], "years_experience": [5]}}}
{"id": 66, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'origin': 'New York'. Expected one of ['New York City', 'NYC', '\u7d10\u7d04\u5e02']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"geodistance.find": {"origin": "New York", "destination": "Los Angeles"}}, "possible_answer_item": {"geodistance.find": {"origin": ["New York City", "NYC", "\u7d10\u7d04\u5e02"], "destination": ["Los Angeles", "LA", "\u6d1b\u6749\u78ef"], "unit": ["miles", "", "\u82f1\u91cc", "\u82f1\u54e9"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_65", "question": "\u5c0b\u627e\u7d10\u7d04\u5e02\u548c\u6d1b\u6749\u78ef\u4e4b\u9593\u7684\u8ddd\u96e2\u3002", "function": [{"name": "timezones.get_difference", "description": "Find the time difference between two cities.", "parameters": {"type": "dict", "properties": {"city1": {"type": "string", "description": "The first city."}, "city2": {"type": "string", "description": "The second city."}}, "required": ["city1", "city2"]}}, {"name": "geodistance.find", "description": "Find the distance between two cities on the globe.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "The originating city for the distance calculation."}, "destination": {"type": "string", "description": "The destination city for the distance calculation."}, "unit": {"type": "string", "default": "miles", "description": "The unit of measure for the distance calculation."}}, "required": ["origin", "destination"]}}, {"name": "flights.search", "description": "Find flights between two cities.", "parameters": {"type": "dict", "properties": {"from_city": {"type": "string", "description": "The city to depart from."}, "to_city": {"type": "string", "description": "The city to arrive at."}, "date": {"type": "string", "default": "next monday", "description": "The date to fly."}}, "required": ["from_city", "to_city"]}}]}, "model_result_raw": "geodistance.find(origin='New York', destination='Los Angeles')", "model_result_decoded": [{"geodistance.find": {"origin": "New York", "destination": "Los Angeles"}}], "possible_answer": {"geodistance.find": {"origin": ["New York City", "NYC", "\u7d10\u7d04\u5e02"], "destination": ["Los Angeles", "LA", "\u6d1b\u6749\u78ef"], "unit": ["miles", "", "\u82f1\u91cc", "\u82f1\u54e9"]}}}
{"id": 79, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'museum': 'London Natural History Museum'. Expected one of ['Natural History Museum', '\u81ea\u7136\u53f2\u535a\u7269\u9928', '\u81ea\u7136\u6b77\u53f2\u535a\u7269\u9928']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"museum_info": {"museum": "London Natural History Museum", "city": "London", "features": "timings, exhibitions, accessibility"}}, "possible_answer_item": {"museum_info": {"museum": ["Natural History Museum", "\u81ea\u7136\u53f2\u535a\u7269\u9928", "\u81ea\u7136\u6b77\u53f2\u535a\u7269\u9928"], "city": ["London", "\u502b\u6566"], "features": [["timings", "exhibitions", "accessibility"], ["exhibitions", "timings", "accessibility"], ["exhibitions", "accessibility", "timings"], ["accessibility", "timings", "exhibitions"], ["accessibility", "exhibitions", "timings"], ["timings", "accessibility", "exhibitions"], ["\u958b\u653e\u6642\u9593", "\u5c55\u89bd\u5167\u5bb9", "\u7121\u969c\u7919\u8a2d\u65bd"], ["\u5c55\u89bd\u5167\u5bb9", "\u958b\u653e\u6642\u9593", "\u7121\u969c\u7919\u8a2d\u65bd"], ["\u5c55\u89bd\u5167\u5bb9", "\u7121\u969c\u7919\u8a2d\u65bd", "\u958b\u653e\u6642\u9593"], ["\u7121\u969c\u7919\u8a2d\u65bd", "\u958b\u653e\u6642\u9593", "\u5c55\u89bd\u5167\u5bb9"], ["\u7121\u969c\u7919\u8a2d\u65bd", "\u5c55\u89bd\u5167\u5bb9", "\u958b\u653e\u6642\u9593"], ["\u958b\u653e\u6642\u9593", "\u7121\u969c\u7919\u8a2d\u65bd", "\u5c55\u89bd\u5167\u5bb9"]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_78", "question": "\u8acb\u63d0\u4f9b\u6709\u95dc\u502b\u6566\u81ea\u7136\u6b77\u53f2\u535a\u7269\u9928\u7684\u8cc7\u8a0a\uff0c\u5305\u62ec\u958b\u653e\u6642\u9593\u3001\u5c55\u89bd\u5167\u5bb9\u548c\u7121\u969c\u7919\u8a2d\u65bd\u3002", "function": [{"name": "tourist_spot_info", "description": "Retrieve information about a specific tourist spot.", "parameters": {"type": "dict", "properties": {"spot": {"type": "string", "description": "The name of the tourist spot you want to get information for."}, "city": {"type": "string", "description": "The city where the tourist spot is located."}, "details": {"type": "array", "items": {"type": "string", "enum": ["timing", "attractions", "tickets", "accessibility", "history"]}, "description": "Details of the tourist spot to get information on. For multiple details, separate them by comma.", "default": "timing, attractions"}}, "required": ["spot", "city"]}}, {"name": "museum_info", "description": "Retrieve information about a specific museum.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum you want to get information for."}, "city": {"type": "string", "description": "The city where the museum is located."}, "features": {"type": "array", "items": {"type": "string", "enum": ["timings", "exhibitions", "accessibility", "events", "history"]}, "description": "Features of the museum to get information on. For multiple features, separate them by comma.", "default": "timings, exhibitions"}}, "required": ["museum", "city"]}}]}, "model_result_raw": "museum_info(museum='London Natural History Museum', city='London', features='timings, exhibitions, accessibility')", "model_result_decoded": [{"museum_info": {"museum": "London Natural History Museum", "city": "London", "features": "timings, exhibitions, accessibility"}}], "possible_answer": {"museum_info": {"museum": ["Natural History Museum", "\u81ea\u7136\u53f2\u535a\u7269\u9928", "\u81ea\u7136\u6b77\u53f2\u535a\u7269\u9928"], "city": ["London", "\u502b\u6566"], "features": [["timings", "exhibitions", "accessibility"], ["exhibitions", "timings", "accessibility"], ["exhibitions", "accessibility", "timings"], ["accessibility", "timings", "exhibitions"], ["accessibility", "exhibitions", "timings"], ["timings", "accessibility", "exhibitions"], ["\u958b\u653e\u6642\u9593", "\u5c55\u89bd\u5167\u5bb9", "\u7121\u969c\u7919\u8a2d\u65bd"], ["\u5c55\u89bd\u5167\u5bb9", "\u958b\u653e\u6642\u9593", "\u7121\u969c\u7919\u8a2d\u65bd"], ["\u5c55\u89bd\u5167\u5bb9", "\u7121\u969c\u7919\u8a2d\u65bd", "\u958b\u653e\u6642\u9593"], ["\u7121\u969c\u7919\u8a2d\u65bd", "\u958b\u653e\u6642\u9593", "\u5c55\u89bd\u5167\u5bb9"], ["\u7121\u969c\u7919\u8a2d\u65bd", "\u5c55\u89bd\u5167\u5bb9", "\u958b\u653e\u6642\u9593"], ["\u958b\u653e\u6642\u9593", "\u7121\u969c\u7919\u8a2d\u65bd", "\u5c55\u89bd\u5167\u5bb9"]]}}}
{"id": 81, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'services': ['Guitar Lessons', 'Violin Lessons']. Expected one of [['Violin Lessons'], ['\u5c0f\u63d0\u7434\u8ab2\u7a0b']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"music_shop.find_nearby": {"location": "Nashville, TN", "services": ["Guitar Lessons", "Violin Lessons"]}}, "possible_answer_item": {"music_shop.find_nearby": {"location": ["Nashville, TN", "Nashville", "\u7d0d\u4ec0\u7dad\u723e", "\u7530\u7d0d\u897f\u5dde\u7d0d\u4ec0\u7dad\u723e", "\u7d0d\u4ec0\u7dad\u723e, TN"], "services": [["Violin Lessons"], ["\u5c0f\u63d0\u7434\u8ab2\u7a0b"]], "instruments": [["Guitars"], ["\u5409\u4ed6"]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_80", "question": "\u5c0b\u627e\u4f4d\u65bc\u7d0d\u4ec0\u7dad\u723e\u7684\u672c\u5730\u5409\u4ed6\u5e97\uff0c\u540c\u6642\u63d0\u4f9b\u5c0f\u63d0\u7434\u8ab2\u7a0b\u3002", "function": [{"name": "music_shop.find_nearby", "description": "Locate nearby music shops based on specific criteria like instrument lessons availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "services": {"type": "array", "items": {"type": "string", "enum": ["Guitar Lessons", "Violin Lessons", "Piano Lessons", "Ukulele Lessons"]}, "description": "Types of instrument lessons offered in the shop. Default empty array"}, "instruments": {"type": "array", "items": {"type": "string", "enum": ["Guitars", "Violins", "Pianos", "Drums"]}, "description": "Types of instruments sold in the shop. Default empty array"}}, "required": ["location"]}}, {"name": "gym.find_nearby", "description": "Locate nearby gyms based on specific criteria like types of fitness classes availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "classes": {"type": "array", "items": {"type": "string", "enum": ["Yoga", "Spin", "Zumba", "CrossFit"]}, "description": "Types of fitness classes offered in the gym. Default empty array"}, "equipment": {"type": "array", "items": {"type": "string", "enum": ["Treadmills", "Ellipticals", "Weight Machines", "Free Weights"]}, "description": "Types of gym equipment available. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "music_shop.find_nearby(location='Nashville, TN', services=['Guitar Lessons', 'Violin Lessons'])", "model_result_decoded": [{"music_shop.find_nearby": {"location": "Nashville, TN", "services": ["Guitar Lessons", "Violin Lessons"]}}], "possible_answer": {"music_shop.find_nearby": {"location": ["Nashville, TN", "Nashville", "\u7d0d\u4ec0\u7dad\u723e", "\u7530\u7d0d\u897f\u5dde\u7d0d\u4ec0\u7dad\u723e", "\u7d0d\u4ec0\u7dad\u723e, TN"], "services": [["Violin Lessons"], ["\u5c0f\u63d0\u7434\u8ab2\u7a0b"]], "instruments": [["Guitars"], ["\u5409\u4ed6"]]}}}
{"id": 84, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'team_name': 'FC Barcelona'. Expected one of ['Barcelona', '\u5df4\u585e\u9686\u7d0d\u8db3\u7403\u4ff1\u6a02\u90e8', '\u5df4\u585e', '\u5df4\u585e\u9686\u7d0d']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"player_stats.get_all_time_goals": {"player_name": "Lionel Messi", "team_name": "FC Barcelona"}}, "possible_answer_item": {"player_stats.get_all_time_goals": {"player_name": ["Lionel Messi", "\u6885\u897f", "\u840a\u7d0d\u723e\u00b7\u6885\u897f", "\u840a\u7d0d\u723e\u6885\u897f"], "team_name": ["Barcelona", "\u5df4\u585e\u9686\u7d0d\u8db3\u7403\u4ff1\u6a02\u90e8", "\u5df4\u585e", "\u5df4\u585e\u9686\u7d0d"], "competition": [""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_83", "question": "Lionel Messi \u5728\u5df4\u585e\u9686\u7d0d\u5230\u76ee\u524d\u70ba\u6b62\u5df2\u7d93\u9032\u4e86\u591a\u5c11\u7403\uff1f", "function": [{"name": "team_stats.get_top_scorer", "description": "Fetch the top scorer of a specified football team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the football team."}, "competition": {"type": "string", "description": "Competition for which to fetch stats (optional). Default ''"}}, "required": ["team_name"]}}, {"name": "league_stats.get_top_scorer", "description": "Fetch the top scorer of a specified football league.", "parameters": {"type": "dict", "properties": {"league_name": {"type": "string", "description": "The name of the football league."}, "season": {"type": "string", "description": "Season for which to fetch stats (optional). Default ''"}}, "required": ["league_name"]}}, {"name": "player_stats.get_all_time_goals", "description": "Fetch all-time goals scored by a particular football player for a specified team.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the football player."}, "team_name": {"type": "string", "description": "The name of the team for which player has played."}, "competition": {"type": "string", "description": "Competition for which to fetch stats (optional). Default ''"}}, "required": ["player_name", "team_name"]}}]}, "model_result_raw": "player_stats.get_all_time_goals(player_name='Lionel Messi', team_name='FC Barcelona')", "model_result_decoded": [{"player_stats.get_all_time_goals": {"player_name": "Lionel Messi", "team_name": "FC Barcelona"}}], "possible_answer": {"player_stats.get_all_time_goals": {"player_name": ["Lionel Messi", "\u6885\u897f", "\u840a\u7d0d\u723e\u00b7\u6885\u897f", "\u840a\u7d0d\u723e\u6885\u897f"], "team_name": ["Barcelona", "\u5df4\u585e\u9686\u7d0d\u8db3\u7403\u4ff1\u6a02\u90e8", "\u5df4\u585e", "\u5df4\u585e\u9686\u7d0d"], "competition": [""]}}}
{"id": 92, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'ingredientLimit': 5. Expected one of [4]."], "sub_error_type": "value_error:others", "model_output_item": {"recipe.find": {"mainIngredient": "\u860b\u679c\u6d3e", "ingredientLimit": 5}}, "possible_answer_item": {"recipe.find": {"mainIngredient": ["apple pie", "apple", "\u860b\u679c", "\u860b\u679c\u6d3e"], "ingredientLimit": [4]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_91", "question": "\u6211\u80fd\u627e\u5230\u4e00\u500b\u597d\u7684\u860b\u679c\u6d3e\u70f9\u98ea\u98df\u8b5c\uff0c\u4f7f\u7528\u5c11\u65bc5\u7a2e\u6210\u5206\u55ce\uff1f", "function": [{"name": "restaurant.find", "description": "Locate restaurants based on specific criteria such as cuisine and price range", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "The type of cuisine preferred."}, "price": {"type": "array", "items": {"type": "string"}, "description": "Price range of the restaurant in format ['low', 'mid', 'high']. Default ['low', 'mid', 'high']"}}, "required": ["cuisine"]}}, {"name": "recipe.find", "description": "Locate cooking recipes based on specific criteria such as main ingredient and number of ingredients", "parameters": {"type": "dict", "properties": {"mainIngredient": {"type": "string", "description": "Main ingredient for the recipe."}, "ingredientLimit": {"type": "integer", "description": "Max number of ingredients the recipe should use."}}, "required": ["mainIngredient", "ingredientLimit"]}}]}, "model_result_raw": "recipe.find(mainIngredient='\u860b\u679c\u6d3e', ingredientLimit=5)", "model_result_decoded": [{"recipe.find": {"mainIngredient": "\u860b\u679c\u6d3e", "ingredientLimit": 5}}], "possible_answer": {"recipe.find": {"mainIngredient": ["apple pie", "apple", "\u860b\u679c", "\u860b\u679c\u6d3e"], "ingredientLimit": [4]}}}
{"id": 94, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'location': '\u7d10\u7d04\u842c\u8c6a\u9152\u5e97'. Expected one of ['New York', 'New York, NY', 'NYC', '\u7d10\u7d04', '\u7d10\u7d04\u5e02']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"hotel.book": {"location": "\u7d10\u7d04\u842c\u8c6a\u9152\u5e97", "roomType": "\u8c6a\u83ef\u5ba2\u623f", "nights": 2, "additional_services": ["breakfast"]}}, "possible_answer_item": {"hotel.book": {"location": ["New York", "New York, NY", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "roomType": ["deluxe", "Deluxe", "\u8c6a\u83ef"], "nights": [2], "additional_services": [["breakfast"], ["\u65e9\u9910"]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_93", "question": "\u5728\u7d10\u7d04\u7684\u842c\u8c6a\u9152\u5e97\u9810\u8a02\u4e00\u9593\u8c6a\u83ef\u5ba2\u623f\uff0c\u4e26\u589e\u52a0\u65e9\u9910\u4f5c\u70ba\u984d\u5916\u670d\u52d9\uff0c\u5171\u4f4f\u5169\u665a\u3002", "function": [{"name": "car.rental", "description": "Rent a car at the specified location for a specific number of days", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the car rental."}, "days": {"type": "integer", "description": "Number of days for which to rent the car."}, "car_type": {"type": "string", "description": "Type of the car to rent."}, "pick_up": {"type": "string", "description": "Location of where to pick up the car. Default ''"}}, "required": ["location", "days", "car_type"]}}, {"name": "hotel.book", "description": "Book a hotel room given the location, room type, and number of nights and additional services", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the hotel."}, "roomType": {"type": "string", "description": "Type of the room to be booked."}, "nights": {"type": "integer", "description": "Number of nights to book the room for."}, "additional_services": {"type": "array", "items": {"type": "string", "description": "Additonal services that can be booked.", "enum": ["breakfast", "parking", "spa"]}, "description": "Additional services to be added. Default empty array"}}, "required": ["location", "roomType", "nights"]}}]}, "model_result_raw": "hotel.book(location='\u7d10\u7d04\u842c\u8c6a\u9152\u5e97', roomType='\u8c6a\u83ef\u5ba2\u623f', nights=2, additional_services=['breakfast'])", "model_result_decoded": [{"hotel.book": {"location": "\u7d10\u7d04\u842c\u8c6a\u9152\u5e97", "roomType": "\u8c6a\u83ef\u5ba2\u623f", "nights": 2, "additional_services": ["breakfast"]}}], "possible_answer": {"hotel.book": {"location": ["New York", "New York, NY", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "roomType": ["deluxe", "Deluxe", "\u8c6a\u83ef"], "nights": [2], "additional_services": [["breakfast"], ["\u65e9\u9910"]]}}}
{"id": 95, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'roomType': 'Suite with King Bed'. Expected one of ['suite with queen size bed', '\u5e36\u6709\u5927\u865f\u5e8a\u7684\u5957\u623f']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"hotel_room_pricing.get": {"hotelName": "Hilton New York", "roomType": "Suite with King Bed", "nights": 3}}, "possible_answer_item": {"hotel_room_pricing.get": {"hotelName": ["Hilton New York", "\u7d10\u7d04\u5e0c\u723e\u9813"], "roomType": ["suite with queen size bed", "\u5e36\u6709\u5927\u865f\u5e8a\u7684\u5957\u623f"], "nights": [3]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_94", "question": "\u6211\u60f3\u9810\u8a02Hilton New York\u7684\u4e00\u9593\u5e36\u6709\u5927\u865f\u5e8a\u7684\u5957\u623f\uff0c\u70ba\u671f3\u665a\u3002\u4f60\u80fd\u5e6b\u6211\u67e5\u8a62\u50f9\u683c\u55ce\uff1f", "function": [{"name": "hotel_room_pricing.get", "description": "Get pricing for a specific type of hotel room for specified number of nights.", "parameters": {"type": "dict", "properties": {"hotelName": {"type": "string", "description": "The name of the hotel e.g. Hilton New York"}, "roomType": {"type": "string", "description": "Type of the room to be booked."}, "nights": {"type": "integer", "description": "Number of nights to book the room for."}}, "required": ["hotelName", "roomType", "nights"]}}, {"name": "car_rental_pricing.get", "description": "Get pricing for a specific type of rental car for a specified number of days.", "parameters": {"type": "dict", "properties": {"rentalCompany": {"type": "string", "description": "The name of the rental company."}, "carType": {"type": "string", "description": "Type of the car to be rented."}, "days": {"type": "integer", "description": "Number of days to rent the car."}}, "required": ["rentalCompany", "carType", "days"]}}, {"name": "flight_ticket_pricing.get", "description": "Get pricing for a specific type of flight ticket for specified number of passengers.", "parameters": {"type": "dict", "properties": {"airline": {"type": "string", "description": "The name of the airline."}, "flightClass": {"type": "string", "description": "Class of the flight."}, "passengers": {"type": "integer", "description": "Number of passengers."}}, "required": ["airline", "flightClass", "passengers"]}}]}, "model_result_raw": "hotel_room_pricing.get(hotelName='Hilton New York', roomType='Suite with King Bed', nights=3)", "model_result_decoded": [{"hotel_room_pricing.get": {"hotelName": "Hilton New York", "roomType": "Suite with King Bed", "nights": 3}}], "possible_answer": {"hotel_room_pricing.get": {"hotelName": ["Hilton New York", "\u7d10\u7d04\u5e0c\u723e\u9813"], "roomType": ["suite with queen size bed", "\u5e36\u6709\u5927\u865f\u5e8a\u7684\u5957\u623f"], "nights": [3]}}}
{"id": 135, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Optional parameter 'details' not provided and not marked as optional."], "sub_error_type": "simple_function_checker:missing_optional", "model_output_item": {"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego"}}, "possible_answer_item": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "San Diego County", "\u8056\u5730\u7259\u54e5"], "details": [true]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_134", "question": "\u67e5\u8a62\u8056\u5730\u7259\u54e5\u7e23\u6848\u4ef6\u7de8\u865fCA123456\u7684\u91cd\u5927\u72af\u7f6a\u8a18\u9304\u8a73\u60c5", "function": [{"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "float", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}, {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}, {"name": "get_highest_scoring_player", "description": "Retrieve the highest scoring player in a specific game and season.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game in which you want to find the highest scoring player."}, "season": {"type": "string", "description": "The season during which the high score was achieved."}, "region": {"type": "string", "description": "The geographical region in which the game is being played (Optional). Defaults to 'USA'"}}, "required": ["game", "season"]}}, {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "dict", "properties": {"principle": {"type": "float", "description": "The initial amount of the investment."}, "interest_rate": {"type": "float", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}]}, "model_result_raw": "crime_record.get_record(case_number='CA123456', county='San Diego')", "model_result_decoded": [{"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego"}}], "possible_answer": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "San Diego County", "\u8056\u5730\u7259\u54e5"], "details": [true]}}}
{"id": 140, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Optional parameter 'case_type' not provided and not marked as optional."], "sub_error_type": "simple_function_checker:missing_optional", "model_output_item": {"lawsuit_details.find": {"company_name": "\u860b\u679c\u516c\u53f8", "year": 2010}}, "possible_answer_item": {"lawsuit_details.find": {"company_name": ["Apple Inc.", "\u860b\u679c\u516c\u53f8"], "year": [2010], "case_type": ["Patent", "\u5c08\u5229"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_139", "question": "\u5c0b\u627e2010\u5e74\u4ee5\u4f86\u6d89\u53ca\u201c\u860b\u679c\u516c\u53f8\u201d\u7684\u5c08\u5229\u8a34\u8a1f\u8a73\u60c5\u3002", "function": [{"name": "get_collectables_in_season", "description": "Retrieve a list of collectable items in a specific game during a specified season.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the game."}, "season": {"type": "string", "description": "The season for which to retrieve the collectable items."}, "item_type": {"type": "string", "description": "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."}}, "required": ["game_name", "season"]}}, {"name": "game_score.highest", "description": "Retrieve the highest score achieved by any player in a specific game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the online game."}, "platform": {"type": "string", "description": "The platform where the game is played, e.g. PC, Xbox, Playstation"}, "region": {"type": "string", "description": "The geographic region of the player. Defaults to 'Global'"}}, "required": ["game", "platform"]}}, {"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. This is an optional parameter. Default is 'all'."}}, "required": ["company_name", "year"]}}, {"name": "calculate_binomial_probability", "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.", "parameters": {"type": "dict", "properties": {"number_of_trials": {"type": "integer", "description": "The total number of trials."}, "number_of_successes": {"type": "integer", "description": "The desired number of successful outcomes."}, "probability_of_success": {"type": "float", "description": "The probability of a successful outcome on any given trial.", "default": 0.5}}, "required": ["number_of_trials", "number_of_successes"]}}]}, "model_result_raw": "lawsuit_details.find(company_name='\u860b\u679c\u516c\u53f8', year=2010)", "model_result_decoded": [{"lawsuit_details.find": {"company_name": "\u860b\u679c\u516c\u53f8", "year": 2010}}], "possible_answer": {"lawsuit_details.find": {"company_name": ["Apple Inc.", "\u860b\u679c\u516c\u53f8"], "year": [2010], "case_type": ["Patent", "\u5c08\u5229"]}}}
{"id": 143, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'location': 'Miami, FL'. Expected one of ['Miami', 'Miami, Florida', 'FL', '\u4f5b\u7f85\u91cc\u9054\u5dde\u9081\u963f\u5bc6', '\u9081\u963f\u5bc6']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"weather.humidity_forecast": {"location": "Miami, FL", "days": 7}}, "possible_answer_item": {"weather.humidity_forecast": {"location": ["Miami", "Miami, Florida", "FL", "\u4f5b\u7f85\u91cc\u9054\u5dde\u9081\u963f\u5bc6", "\u9081\u963f\u5bc6"], "days": [7], "min_humidity": ["", 0]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_142", "question": "\u4f5b\u7f85\u91cc\u9054\u5dde\u9081\u963f\u5bc6\u5728\u672a\u4f867\u5929\u7684\u6fd5\u5ea6\u6c34\u5e73\u662f\u591a\u5c11\uff1f", "function": [{"name": "weather.humidity_forecast", "description": "Retrieve a humidity forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the humidity for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "min_humidity": {"type": "integer", "description": "Minimum level of humidity (in percentage) to filter the result. Optional parameter. Default is 0."}}, "required": ["location", "days"]}}, {"name": "get_team_score", "description": "Retrieves the latest game score, individual player stats, and team stats for a specified sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The league that the team is part of."}, "include_player_stats": {"type": "boolean", "default": false, "description": "Indicates if individual player statistics should be included in the result. Default is false."}}, "required": ["team_name", "league"]}}]}, "model_result_raw": "weather.humidity_forecast(location='Miami, FL', days=7)", "model_result_decoded": [{"weather.humidity_forecast": {"location": "Miami, FL", "days": 7}}], "possible_answer": {"weather.humidity_forecast": {"location": ["Miami", "Miami, Florida", "FL", "\u4f5b\u7f85\u91cc\u9054\u5dde\u9081\u963f\u5bc6", "\u9081\u963f\u5bc6"], "days": [7], "min_humidity": ["", 0]}}}
{"id": 147, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'cuisine': '\u4e2d\u9910'. Expected one of ['Chinese', '\u4e2d\u5f0f']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"restaurant.find_nearby": {"location": "\u897f\u96c5\u5716, WA", "cuisine": "\u4e2d\u9910", "max_distance": 10}}, "possible_answer_item": {"restaurant.find_nearby": {"location": ["Seattle", "Seattle, WA", "\u897f\u96c5\u5716", "\u83ef\u76db\u9813\u5dde\u897f\u96c5\u5716", "\u897f\u96c5\u5716, WA"], "cuisine": ["Chinese", "\u4e2d\u5f0f"], "max_distance": [10]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_146", "question": "\u5728\u897f\u96c5\u5716\u9644\u8fd110\u82f1\u91cc\u5167\u5c0b\u627e\u63d0\u4f9b\u4e2d\u5f0f\u7684\u9910\u5ef3\u3002", "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria like cuisine type.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine in restaurant."}, "max_distance": {"type": "integer", "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."}}, "required": ["location", "cuisine"]}}, {"name": "ecology_data.precipitation_stats", "description": "Retrieve precipitation data for a specified location and time period.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location, e.g., 'Amazon rainforest'."}, "time_frame": {"type": "string", "enum": ["six_months", "year", "five_years"], "description": "The time period for which data is required."}}, "required": ["location", "time_frame"]}}]}, "model_result_raw": "restaurant.find_nearby(location='\u897f\u96c5\u5716, WA', cuisine='\u4e2d\u9910', max_distance=10)", "model_result_decoded": [{"restaurant.find_nearby": {"location": "\u897f\u96c5\u5716, WA", "cuisine": "\u4e2d\u9910", "max_distance": 10}}], "possible_answer": {"restaurant.find_nearby": {"location": ["Seattle", "Seattle, WA", "\u897f\u96c5\u5716", "\u83ef\u76db\u9813\u5dde\u897f\u96c5\u5716", "\u897f\u96c5\u5716, WA"], "cuisine": ["Chinese", "\u4e2d\u5f0f"], "max_distance": [10]}}}
{"id": 152, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'sub_topics': ['Behavior', 'Group Dynamics']. Expected one of [['behaviour', 'group dynamics'], ['group dynamics', 'behaviour'], ['\u884c\u70ba', '\u7fa4\u9ad4\u52d5\u529b\u5b78'], ['\u7fa4\u9ad4\u52d5\u529b\u5b78', '\u884c\u70ba']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"social_media_analytics.most_followed": {"topic": "Psychology", "sub_topics": ["Behavior", "Group Dynamics"]}}, "possible_answer_item": {"social_media_analytics.most_followed": {"topic": ["psychology", "Psychology", "\u5fc3\u7406\u5b78"], "sub_topics": [["behaviour", "group dynamics"], ["group dynamics", "behaviour"], ["\u884c\u70ba", "\u7fa4\u9ad4\u52d5\u529b\u5b78"], ["\u7fa4\u9ad4\u52d5\u529b\u5b78", "\u884c\u70ba"]], "region": ["", "global"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_151", "question": "\u5c0b\u627e\u5728\u63a8\u7279\u4e0a\u6700\u53d7\u95dc\u6ce8\u7684\u4eba\uff0c\u4ed6/\u5979\u767c\u63a8\u6587\u95dc\u65bc\u884c\u70ba\u548c\u7fa4\u9ad4\u52d5\u529b\u5b78\u76f8\u95dc\u7684\u5fc3\u7406\u5b78\u3002", "function": [{"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic, Optional. Default is an empty list."}, "region": {"type": "string", "description": "Region of interest for twitter search, Optional. Default is 'global'."}}, "required": ["topic"]}}, {"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}, {"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}]}, "model_result_raw": "social_media_analytics.most_followed(topic='Psychology', sub_topics=['Behavior', 'Group Dynamics'])", "model_result_decoded": [{"social_media_analytics.most_followed": {"topic": "Psychology", "sub_topics": ["Behavior", "Group Dynamics"]}}], "possible_answer": {"social_media_analytics.most_followed": {"topic": ["psychology", "Psychology", "\u5fc3\u7406\u5b78"], "sub_topics": [["behaviour", "group dynamics"], ["group dynamics", "behaviour"], ["\u884c\u70ba", "\u7fa4\u9ad4\u52d5\u529b\u5b78"], ["\u7fa4\u9ad4\u52d5\u529b\u5b78", "\u884c\u70ba"]], "region": ["", "global"]}}}
{"id": 154, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_153", "question": "\u91cc\u65af\u672c\u689d\u7d04\u662f\u4ec0\u9ebc\u6642\u5019\u7c3d\u7f72\u7684\uff1f", "function": [{"name": "locate_tallest_mountains", "description": "Find the tallest mountains within a specified radius of a location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city from which to calculate distance."}, "radius": {"type": "float", "description": "The radius within which to find mountains, measured in kilometers."}, "amount": {"type": "integer", "description": "The number of mountains to find, listed from tallest to smallest."}}, "required": ["location", "radius", "amount"]}}, {"name": "calculate_entropy_change", "description": "Calculate the entropy change for an isothermal and reversible process.", "parameters": {"type": "dict", "properties": {"initial_temp": {"type": "float", "description": "The initial temperature in Kelvin."}, "final_temp": {"type": "float", "description": "The final temperature in Kelvin."}, "heat_capacity": {"type": "float", "description": "The heat capacity in J/K."}, "isothermal": {"type": "boolean", "description": "Whether the process is isothermal. Default is True."}}, "required": ["initial_temp", "final_temp", "heat_capacity"]}}, {"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Defaults to global if not specified"}}, "required": ["event"]}}]}, "model_result_raw": "I'm sorry, but the function you're looking to call doesn't appear to be provided in the list. The function you're trying to call, `get_event_date`, is designed to retrieve the date of a historical event. However, the specific event you're interested in, \"\u91cc\u65af\u672c\u689d\u7d04\", is not included in the list of provided functions. \n\n You can use the `get_event_date` function to get the date of a historical event. Just make sure to provide the event name as a parameter. For example: \n\n ```python\nget_event_date(event='\u91cc\u65af\u672c\u689d\u7d04')\n``` \n\n If you have any more questions or need further assistance, feel free to ask!", "possible_answer": {"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon", "\u91cc\u65af\u672c\u689d\u7d04", "\u91cc\u65af\u672c\u689d\u7d04\u7c3d\u7f72", "\u7c3d\u7f72\u91cc\u65af\u672c\u689d\u7d04"], "location": ["", "global"]}}}
{"id": 161, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'artist_name': 'James Prins'. Expected one of ['James Plensa', '\u8a79\u59c6\u65af\u00b7\u666e\u502b\u85a9', '\u8a79\u59c6\u65af\u666e\u502b\u85a9']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"get_sculpture_info": {"artist_name": "James Prins", "detail": true}}, "possible_answer_item": {"get_sculpture_info": {"artist_name": ["James Plensa", "\u8a79\u59c6\u65af\u00b7\u666e\u502b\u85a9", "\u8a79\u59c6\u65af\u666e\u502b\u85a9"], "detail": [true], "year": [2000, ""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_160", "question": "\u8acb\u7d66\u6211\u8a73\u7d30\u63cf\u8ff0\u7684\u6700\u65b0\u8a79\u59c6\u65af\u00b7\u666e\u502b\u85a9\u85dd\u8853\u96d5\u5851\u3002", "function": [{"name": "get_zodiac_compatibility", "description": "Retrieve the compatibility score between two Zodiac signs.", "parameters": {"type": "dict", "properties": {"sign1": {"type": "string", "description": "The first Zodiac sign."}, "sign2": {"type": "string", "description": "The second Zodiac sign."}, "scale": {"type": "string", "enum": ["percentage", "0-10 scale"], "description": "The scale on which compatibility should be shown. Default is 'percentage'."}}, "required": ["sign1", "sign2"]}}, {"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}, {"name": "get_sculpture_info", "description": "Retrieves the most recent artwork by a specified artist with its detailed description.", "parameters": {"type": "dict", "properties": {"artist_name": {"type": "string", "description": "The name of the artist."}, "year": {"type": "integer", "description": "Year of the sculpture. This is optional. Default 2000"}, "detail": {"type": "boolean", "description": "If True, it provides detailed description of the sculpture. Defaults to False."}}, "required": ["artist_name"]}}, {"name": "monarch.getMonarchOfYear", "description": "Retrieve the monarch of a specific location during a specified year.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location (e.g., country) whose monarch needs to be found."}, "year": {"type": "integer", "description": "The year to search the monarch."}, "fullName": {"type": "boolean", "default": "false", "description": "If true, returns the full name and title of the monarch."}}, "required": ["location", "year"]}}]}, "model_result_raw": "get_sculpture_info(artist_name='James Prins', detail=True)", "model_result_decoded": [{"get_sculpture_info": {"artist_name": "James Prins", "detail": true}}], "possible_answer": {"get_sculpture_info": {"artist_name": ["James Plensa", "\u8a79\u59c6\u65af\u00b7\u666e\u502b\u85a9", "\u8a79\u59c6\u65af\u666e\u502b\u85a9"], "detail": [true], "year": [2000, ""]}}}
{"id": 166, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'condition': 'Good'. Expected one of ['Excellent', '\u826f\u597d']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"guitar_price.find": {"model": "Gibson Les Paul", "condition": "Good", "location": "\u829d\u52a0\u54e5"}}, "possible_answer_item": {"guitar_price.find": {"model": ["Gibson Les Paul"], "condition": ["Excellent", "\u826f\u597d"], "location": ["Chicago", "Chicago area", "\u829d\u52a0\u54e5"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_165", "question": "\u5c0b\u627e\u829d\u52a0\u54e5\u5730\u5340\u72c0\u6cc1\u826f\u597d\u7684\u4e8c\u624bGibson Les Paul\u5409\u4ed6\u7684\u50f9\u683c\u3002", "function": [{"name": "identify_color_rgb", "description": "This function identifies the RGB values of a named color.", "parameters": {"type": "dict", "properties": {"color_name": {"type": "string", "description": "Name of the color."}, "standard": {"type": "string", "description": "The color standard (e.g. basic, pantone). Default is 'basic'"}}, "required": ["color_name"]}}, {"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}, {"name": "guitar_price.find", "description": "Retrieve the price of a specific used guitar model based on its condition and location.", "parameters": {"type": "dict", "properties": {"model": {"type": "string", "description": "The model of the guitar."}, "condition": {"type": "string", "enum": ["Poor", "Good", "Excellent"], "description": "The condition of the guitar."}, "location": {"type": "string", "description": "The location where the guitar is being sold."}}, "required": ["model", "condition", "location"]}}]}, "model_result_raw": "guitar_price.find(model='Gibson Les Paul', condition='Good', location='\u829d\u52a0\u54e5')", "model_result_decoded": [{"guitar_price.find": {"model": "Gibson Les Paul", "condition": "Good", "location": "\u829d\u52a0\u54e5"}}], "possible_answer": {"guitar_price.find": {"model": ["Gibson Les Paul"], "condition": ["Excellent", "\u826f\u597d"], "location": ["Chicago", "Chicago area", "\u829d\u52a0\u54e5"]}}}
{"id": 176, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'sport': '\u7f51\u7403'. Expected one of ['tennis', '\u7db2\u7403']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"sports_ranking.get_top_player": {"sport": "\u7f51\u7403", "gender": "women"}}, "possible_answer_item": {"sports_ranking.get_top_player": {"sport": ["tennis", "\u7db2\u7403"], "gender": ["women", "\u5973\u5b50", "\u5973"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_175", "question": "\u8ab0\u5728\u5973\u5b50\u7db2\u7403\u4e2d\u6392\u540d\u7b2c\u4e00\uff1f", "function": [{"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "dict", "properties": {"budget": {"type": "float", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument, Optional parameter. Default is ''"}}, "required": ["budget", "type"]}}, {"name": "calculate_binomial_probability", "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.", "parameters": {"type": "dict", "properties": {"number_of_trials": {"type": "integer", "description": "The total number of trials."}, "number_of_successes": {"type": "integer", "description": "The desired number of successful outcomes."}, "probability_of_success": {"type": "float", "description": "The probability of a successful outcome on any given trial.", "default": 0.5}}, "required": ["number_of_trials", "number_of_successes"]}}, {"name": "electromagnetic_force", "description": "Calculate the electromagnetic force between two charges placed at a certain distance.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "float", "description": "The magnitude of the first charge in coulombs."}, "charge2": {"type": "float", "description": "The magnitude of the second charge in coulombs."}, "distance": {"type": "float", "description": "The distance between the two charges in meters."}, "medium_permittivity": {"type": "float", "description": "The relative permittivity of the medium in which the charges are present. Default is 8.854 x 10^-12 F/m (vacuum permittivity)."}}, "required": ["charge1", "charge2", "distance"]}}, {"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}]}, "model_result_raw": "sports_ranking.get_top_player(sport='\u7f51\u7403', gender='women')", "model_result_decoded": [{"sports_ranking.get_top_player": {"sport": "\u7f51\u7403", "gender": "women"}}], "possible_answer": {"sports_ranking.get_top_player": {"sport": ["tennis", "\u7db2\u7403"], "gender": ["women", "\u5973\u5b50", "\u5973"]}}}
{"id": 185, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'ingredients': ['spaghetti', 'tomato', 'cheese']. Expected one of [['pasta', 'cheese'], ['cheese', 'pasta'], ['\u7fa9\u5927\u5229\u9eb5', '\u4e73\u916a'], ['\u4e73\u916a', '\u7fa9\u5927\u5229\u9eb5'], ['\u7fa9\u5927\u5229\u9eb5', '\u8d77\u53f8'], ['\u8d77\u53f8', '\u7fa9\u5927\u5229\u9eb5']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"recipe_search": {"dietary_restriction": "Vegetarian", "ingredients": ["spaghetti", "tomato", "cheese"], "servings": 2}}, "possible_answer_item": {"recipe_search": {"dietary_restriction": ["Vegetarian", "\u7d20\u98df"], "ingredients": [["pasta", "cheese"], ["cheese", "pasta"], ["\u7fa9\u5927\u5229\u9eb5", "\u4e73\u916a"], ["\u4e73\u916a", "\u7fa9\u5927\u5229\u9eb5"], ["\u7fa9\u5927\u5229\u9eb5", "\u8d77\u53f8"], ["\u8d77\u53f8", "\u7fa9\u5927\u5229\u9eb5"]], "servings": [2]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_184", "question": "\u7d66\u6211\u4e00\u500b\u5169\u4eba\u4efd\u91cf\u7684\u7d20\u98df\u7fa9\u5927\u5229\u9eb5\u914d\u4e73\u916a\u7684\u98df\u8b5c\u3002", "function": [{"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "duration": {"type": "integer", "description": "Duration in hours for the detailed forecast."}, "include_precipitation": {"type": "boolean", "description": "Whether to include precipitation data in the forecast. Default is false."}}, "required": ["location", "duration"]}}, {"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "dict", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "dict", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}]}, "model_result_raw": "recipe_search(dietary_restriction='Vegetarian', ingredients=['spaghetti', 'tomato', 'cheese'], servings=2)", "model_result_decoded": [{"recipe_search": {"dietary_restriction": "Vegetarian", "ingredients": ["spaghetti", "tomato", "cheese"], "servings": 2}}], "possible_answer": {"recipe_search": {"dietary_restriction": ["Vegetarian", "\u7d20\u98df"], "ingredients": [["pasta", "cheese"], ["cheese", "pasta"], ["\u7fa9\u5927\u5229\u9eb5", "\u4e73\u916a"], ["\u4e73\u916a", "\u7fa9\u5927\u5229\u9eb5"], ["\u7fa9\u5927\u5229\u9eb5", "\u8d77\u53f8"], ["\u8d77\u53f8", "\u7fa9\u5927\u5229\u9eb5"]], "servings": [2]}}}
{"id": 191, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'hotel_name': 'Hilton Chicago'. Expected one of ['Hilton Hotel', 'Hilton', '\u5e0c\u723e\u9813\u9152\u5e97', '\u5e0c\u723e\u9813']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"book_hotel": {"hotel_name": "Hilton Chicago", "location": "Chicago", "room_type": "Single", "start_date": "2022-12-10", "nights": 2}}, "possible_answer_item": {"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton", "\u5e0c\u723e\u9813\u9152\u5e97", "\u5e0c\u723e\u9813"], "location": ["Chicago", "\u829d\u52a0\u54e5"], "room_type": ["single", "Single", "\u55ae\u4eba", "\u55ae\u4eba\u623f"], "start_date": ["2022-12-10", "10/12/2022", "Dec.10,2022", "10th December 2022", "10 December 2022", "2022\u5e7412\u670810\u65e5"], "nights": [2]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_190", "question": "\u9810\u8a02\u4e00\u9593\u55ae\u4eba\u623f\uff0c\u65bc2022\u5e7412\u670810\u65e5\u8d77\u5728\u829d\u52a0\u54e5\u5e0c\u723e\u9813\u9152\u5e97\u4f4f\u5169\u665a\u3002", "function": [{"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "dict", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}, {"name": "currency_converter", "description": "Calculates the cost in target currency given the amount in base currency and exchange rate", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency"}}, "required": ["base_currency", "target_currency", "amount"]}}, {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}]}, "model_result_raw": "book_hotel(hotel_name='Hilton Chicago', location='Chicago', room_type='Single', start_date='2022-12-10', nights=2)", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton Chicago", "location": "Chicago", "room_type": "Single", "start_date": "2022-12-10", "nights": 2}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton", "\u5e0c\u723e\u9813\u9152\u5e97", "\u5e0c\u723e\u9813"], "location": ["Chicago", "\u829d\u52a0\u54e5"], "room_type": ["single", "Single", "\u55ae\u4eba", "\u55ae\u4eba\u623f"], "start_date": ["2022-12-10", "10/12/2022", "Dec.10,2022", "10th December 2022", "10 December 2022", "2022\u5e7412\u670810\u65e5"], "nights": [2]}}}