{"accuracy": 0.92, "correct_count": 46, "total_count": 50}
{"id": 8, "model_name": "gorilla-openfunctions-v2", "test_category": "executable_multiple_function", "valid": false, "error": ["Failed to decode executable. "], "error_type": "executable_decoder:decoder_failed", "prompt": {"id": "executable_multiple_function_7", "question": "\u4f5c\u70ba\u4e00\u540d\u8cc7\u6599\u5206\u6790\u5e2b\uff0c\u6211\u5df2\u7d93\u8ffd\u8e64\u4e86\u904e\u53bb\u4e00\u500b\u6708\u7279\u5b9a\u57ce\u5e02\u7684\u6bcf\u65e5\u6eab\u5ea6\u3002\u6211\u8a18\u9304\u7684\u6eab\u5ea6\u7bc4\u570d\u5f9e\u651d\u6c0f22\u5ea6\u523080\u5ea6\uff0c\u6bcf\u5929\u8b8a\u53162\u5ea6\u3002\u6211\u9700\u8981\u5f9e\u9019\u7d44\u6578\u64da\u4e2d\u8a08\u7b97\u51fa\u5e73\u5747\u6bcf\u6708\u6eab\u5ea6\uff0c\u4ee5\u66f4\u597d\u5730\u4e86\u89e3\u6c23\u5019\u8da8\u52e2\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": [{"name": "get_time_zone_by_coord", "description": "Finds the timezone of a coordinate.", "parameters": {"type": "dict", "properties": {"long": {"type": "string", "description": "The longitude of the coordinate."}, "lat": {"type": "string", "description": "The latitude of the coordinate."}}, "required": ["long", "lat"]}}, {"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "integer"}, "description": "The list of numbers."}}, "required": ["numbers"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_mean(numbers=[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])"], "execution_result": [51.0]}, "model_result_raw": "Error"}
{"id": 44, "model_name": "gorilla-openfunctions-v2", "test_category": "executable_multiple_function", "valid": false, "error": ["Wrong number of functions provided. Expected 1, but got 2."], "error_type": "value_error:exec_result_count", "prompt": {"id": "executable_multiple_function_43", "question": "\u6211\u5df2\u7d93\u6e96\u5099\u4e86100\u842c\u7f8e\u5143\u4f5c\u70ba\u521d\u59cb\u6295\u8cc7\uff0c\u4e26\u8a08\u5283\u6bcf\u5e74\u589e\u52a01000\u7f8e\u5143\u3002\u6211\u6b63\u5728\u8003\u616e\u672a\u4f86\u4e09\u5e74\u7684\u6f5b\u5728\u5e74\u5229\u7387\u70ba10\uff05\u3002\u7136\u800c\uff0c\u6211\u4e5f\u60f3\u8003\u616e\u901a\u8ca8\u81a8\u8139\u7387\uff0c\u6211\u9810\u8a08\u7b2c\u4e00\u5e74\u70ba1\uff05\uff0c\u63a5\u4e0b\u4f86\u5169\u5e74\u70ba4\uff05\u3002\u6211\u9700\u8981\u8a08\u7b97\u8003\u616e\u9019\u4e9b\u901a\u8ca8\u81a8\u8139\u7387\u5f8c\uff0c\u6295\u8cc7\u5728\u4e09\u5e74\u5f8c\u7684\u50f9\u503c\u3002\u4f60\u80fd\u5e6b\u6211\u55ce\uff1f", "function": [{"name": "calculate_future_value", "description": "Calculates the future value of an investment with periodic contributions.", "parameters": {"type": "dict", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "annual_contribution": {"type": "integer", "description": "The amount contributed to the investment annually."}, "years": {"type": "integer", "description": "The number of years the investment will grow."}, "rate_of_return": {"type": "float", "description": "The annual rate of return on the investment."}}, "required": ["present_value", "annual_contribution", "years", "rate_of_return"]}}, {"name": "adjust_for_inflation", "description": "Adjusts the investment value for inflation for each year.", "parameters": {"type": "dict", "properties": {"investment_value": {"type": "float", "description": "The value of the investment to adjust."}, "inflation_rates": {"type": "array", "items": {"type": "float"}, "description": "The inflation rates for each year."}}, "required": ["investment_value", "inflation_rates"]}}, {"name": "calculate_investment_value", "description": "Calculates the value of an investment over time.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "annual_contribution": {"type": "integer", "description": "The annual contribution amount."}, "years": {"type": "integer", "description": "The number of years to calculate the investment value for."}, "annual_return": {"type": "float", "description": "The annual return rate, ranging from 0 to 1."}, "inflation_rate": {"type": "array", "items": {"type": "float"}, "description": "The inflation rate for each year in percentage, ranging from 0 to 1."}, "adjust_for_inflation": {"type": "boolean", "default": true, "description": "Whether to adjust the investment value for inflation."}}, "required": ["initial_investment", "annual_contribution", "years", "annual_return", "inflation_rate"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["calculate_investment_value(initial_investment=1000000, annual_contribution=1000, years=3, annual_return=0.10, inflation_rate=[0.01, 0.04, 0.04])"], "execution_result": [1227813.9640000002]}, "model_result_raw": "calculate_future_value(present_value=100000, annual_contribution=1000, years=3, rate_of_return=0.1), adjust_for_inflation(investment_value=calculate_future_value(present_value=100000, annual_contribution=1000, years=3, rate_of_return=0.1), inflation_rates=[0.01, 0.04, 0.04])", "model_result_decoded": ["calculate_future_value(present_value=100000,annual_contribution=1000,years=3,rate_of_return=0.1)", "adjust_for_inflation(investment_value={'calculate_future_value': {'present_value': 100000, 'annual_contribution': 1000, 'years': 3, 'rate_of_return': 0.1}},inflation_rates=[0.01, 0.04, 0.04])"]}
{"id": 46, "model_name": "gorilla-openfunctions-v2", "test_category": "executable_multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Error in execution: \"book_room(room_type={'type': 'luxury', 'price': 1000},check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')\". Error: book_room() missing 1 required positional argument: 'price'"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}], "error_type": "executable_checker:cannot_find_match", "prompt": {"id": "executable_multiple_function_45", "question": "\u6211\u60f3\u8981\u70ba\u4e00\u4f4d\u5ba2\u6236\uff08ID\u70ba123\uff09\u9810\u8a02\u4e00\u9593\u8c6a\u83ef\u623f\u9593\u3002\u4ed6\u5011\u5c07\u65bc2024\u5e748\u670811\u65e5\u81f38\u670815\u65e5\u5165\u4f4f\u3002\u623f\u9593\u7684\u6bcf\u665a\u50f9\u683c\u70ba1000\u7f8e\u5143\u3002\u4f60\u80fd\u5e6b\u6211\u8655\u7406\u9810\u8a02\u55ce\uff1f", "function": [{"name": "book_room", "description": "Books a room for a customer.", "parameters": {"type": "dict", "properties": {"room_type": {"type": "dict", "description": "The room type to book."}, "check_in_date": {"type": "string", "description": "The check-in date in format of MM-DD-YYYY."}, "check_out_date": {"type": "string", "description": "The check-out date in format of MM-DD-YYYY."}, "customer_id": {"type": "string", "description": "The customer ID."}, "discount_code": {"type": "string", "description": "The discount code (if any).", "default": null}}, "required": ["room_type", "check_in_date", "check_out_date", "customer_id"]}}, {"name": "calculate_total_price", "description": "Calculates the total price of the room booking.", "parameters": {"type": "dict", "properties": {"room_price": {"type": "float", "description": "The price per night of the room."}, "nights": {"type": "integer", "description": "The number of nights for the booking."}, "discount": {"type": "float", "description": "The discount amount (if any).", "default": 0}}, "required": ["room_price", "nights"]}}, {"name": "confirm_booking", "description": "Confirms the room booking and sends a confirmation to the customer.", "parameters": {"type": "dict", "properties": {"customer_id": {"type": "string", "description": "The customer ID."}, "room_number": {"type": "string", "description": "The room number assigned to the booking."}, "total_price": {"type": "float", "description": "The total price for the booking."}}, "required": ["customer_id", "room_number", "total_price"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["book_room(room_type='deluxe',price=1000,check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')"], "execution_result": [{"customer_id": "123", "room_number": "deluxe", "check_in_date": "08-11-2024", "check_out_date": "08-15-2024", "total_price": 1000}]}, "model_result_raw": "book_room(room_type={'type': 'luxury', 'price': 1000}, check_in_date='08-11-2024', check_out_date='08-15-2024', customer_id='123')", "model_result_decoded": ["book_room(room_type={'type': 'luxury', 'price': 1000},check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')"]}
{"id": 49, "model_name": "gorilla-openfunctions-v2", "test_category": "executable_multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Error in execution: \"get_movie_rating(movie_name='\u963f\u51e1\u9054')\". Error: 'Rated'"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}], "error_type": "executable_checker:cannot_find_match", "prompt": {"id": "executable_multiple_function_48", "question": "\u6211\u6b63\u5728\u8a08\u5283\u9019\u500b\u9031\u672b\u70ba\u6211\u7684\u5bb6\u4eba\u8209\u8fa6\u4e00\u500b\u96fb\u5f71\u4e4b\u591c\uff0c\u6211\u60f3\u78ba\u4fdd\u9019\u90e8\u96fb\u5f71\u9069\u5408\u6240\u6709\u5e74\u9f61\u5c64\u89c0\u770b\u3002\u6211\u5011\u5df2\u7d93\u6c7a\u5b9a\u8981\u770b\u300a\u963f\u51e1\u9054\u300b\uff0c\u4f46\u6211\u9700\u8981\u78ba\u8a8d\u5b83\u7684\u5e74\u9f61\u5206\u7d1a\u624d\u80fd\u7e7c\u7e8c\u3002\u4f60\u80fd\u5e6b\u5fd9\u67e5\u8a62\u4e00\u4e0b\u96fb\u5f71\u300a\u963f\u51e1\u9054\u300b\u7684\u5e74\u9f61\u5206\u7d1a\u55ce\uff1f", "function": [{"name": "get_movie_rating", "description": "Fetches the age rating of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, {"name": "get_movie_genre", "description": "Retrieves the genre of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie to retrieve the genre for."}}, "required": ["movie_name"]}}, {"name": "get_director_by_movie_name", "description": "Gets the director of a movie.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The movie to find the director of."}}, "required": ["movie_name"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["get_movie_rating(movie_name='Avatar')"], "execution_result": ["PG-13"]}, "model_result_raw": "get_movie_rating(movie_name='\u963f\u51e1\u9054')", "model_result_decoded": ["get_movie_rating(movie_name='\u963f\u51e1\u9054')"]}