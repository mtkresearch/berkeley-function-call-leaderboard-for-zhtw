{"accuracy": 0.92, "correct_count": 92, "total_count": 100}
{"id": 15, "model_name": "gorilla-openfunctions-v2", "test_category": "executable_simple", "valid": false, "error": ["Error in execution: \"calculate_mean(numbers='list(range(22, 82, 2))')\". Error: unsupported operand type(s) for +: 'int' and 'str'"], "error_type": "executable_checker:execution_error", "prompt": {"id": "executable_simple_14", "question": "\u4f5c\u70ba\u6211\u7684\u6578\u64da\u5206\u6790\u9805\u76ee\u7684\u4e00\u90e8\u5206\uff0c\u6211\u88ab\u8981\u6c42\u6aa2\u67e5\u904e\u53bb\u4e00\u500b\u6708\u7684\u6eab\u5ea6\u8da8\u52e2\u3002\u6211\u5df2\u7d93\u6536\u96c6\u4e86\u4e00\u7d44\u6bcf\u65e5\u6eab\u5ea6\u8b80\u6578\uff0c\u9700\u8981\u9032\u884c\u89e3\u8b80\u3002\u6578\u64da\u96c6\u5305\u62ec\u5f9e\u651d\u6c0f22\u5ea6\u523080\u5ea6\u7684\u6eab\u5ea6\uff0c\u6bcf\u5929\u589e\u52a02\u5ea6\u3002\u70ba\u4e86\u66f4\u597d\u5730\u4e86\u89e3\u6574\u9ad4\u6c23\u5019\u6a21\u5f0f\uff0c\u4f60\u80fd\u8a08\u7b97\u51fa\u9019\u6bb5\u6642\u9593\u7684\u5e73\u5747\u6eab\u5ea6\u55ce\uff1f", "function": {"name": "calculate_mean", "description": "Calculates the mean of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers."}}, "required": ["numbers"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_mean(numbers=[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80])"], "execution_result": [51.0]}, "model_result_raw": "calculate_mean(numbers=list(range(22, 82, 2)))", "model_result_decoded": ["calculate_mean(numbers='list(range(22, 82, 2))')"]}
{"id": 53, "model_name": "gorilla-openfunctions-v2", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result pattern for \"get_stock_history(stock_name='AAPL',interval='1mo',diffandsplits='true')\". Expect type Dict, but key '1725544145' not found in the model output."], "error_type": "executable_checker:wrong_result_type:dict_key_not_found", "prompt": {"id": "executable_simple_52", "question": "\u6211\u4e00\u76f4\u5728\u8ffd\u8e64\u860b\u679c\u80a1\u7968\u7684\u8868\u73fe\uff0c\u6211\u6709\u8208\u8da3\u6df1\u5165\u7814\u7a76\u5b83\u7684\u6b77\u53f2\u3002\u6211\u60f3\u770b\u770b\u6bcf\u6708\u7684\u8da8\u52e2\uff0c\u4e5f\u60f3\u6aa2\u67e5\u6700\u8fd1\u662f\u5426\u6709\u80a1\u7968\u62c6\u5206\u6216\u767c\u653e\u80a1\u606f\u3002\u4f60\u80fd\u5e6b\u6211\u67e5\u8a62AAPL\u7684\u6b77\u53f2\u8a18\u9304\u55ce\uff1f\u8acb\u6309\u6708\u9593\u9694\u5217\u51fa\u80a1\u7968\u62c6\u5206\u548c\u80a1\u606f\u4fe1\u606f\u3002", "function": {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "string", "description": "The diff and splits of the stock history. Allows one of following : true|false. Default as false"}}, "required": ["stock_name", "interval"]}}, "execution_result_type": ["structural_match"], "ground_truth": ["get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits='true')"], "execution_result": [{"1704085200": {"date": "01-01-2024", "date_utc": 1704085200, "open": 187.15, "high": 196.38, "low": 180.17, "close": 184.4, "volume": 1187219300, "adjclose": 183.7}, "1706763600": {"date": "01-02-2024", "date_utc": 1706763600, "open": 183.99, "high": 191.05, "low": 179.25, "close": 180.75, "volume": 1161627000, "adjclose": 180.07}, "1709269200": {"date": "01-03-2024", "date_utc": 1709269200, "open": 179.55, "high": 180.53, "low": 168.49, "close": 171.48, "volume": 1432782800, "adjclose": 171.05}, "1711944000": {"date": "01-04-2024", "date_utc": 1711944000, "open": 171.19, "high": 178.36, "low": 164.08, "close": 170.33, "volume": 1245717000, "adjclose": 169.9}, "1714536000": {"date": "01-05-2024", "date_utc": 1714536000, "open": 169.58, "high": 193, "low": 169.11, "close": 192.25, "volume": 1336537700, "adjclose": 191.77}, "1717214400": {"date": "01-06-2024", "date_utc": 1717214400, "open": 192.9, "high": 220.2, "low": 192.15, "close": 210.62, "volume": 1723984500, "adjclose": 210.38}, "1719806400": {"date": "01-07-2024", "date_utc": 1719806400, "open": 212.09, "high": 237.23, "low": 211.92, "close": 222.08, "volume": 1153099800, "adjclose": 221.82}, "1722484800": {"date": "01-08-2024", "date_utc": 1722484800, "open": 224.37, "high": 232.92, "low": 196, "close": 229, "volume": 1122667000, "adjclose": 228.74}, "1725163200": {"date": "01-09-2024", "date_utc": 1725163200, "open": 228.55, "high": 229, "low": 217.48, "close": 220.85, "volume": 93970700, "adjclose": 220.85}, "1725544145": {"date": "05-09-2024", "date_utc": 1725544145, "open": 221.52, "high": 223.98, "low": 221.52, "close": 223.1, "volume": 5614002, "adjclose": 223.1}}]}, "model_result_raw": "get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits='true')", "model_result_decoded": ["get_stock_history(stock_name='AAPL',interval='1mo',diffandsplits='true')"], "model_executed_output": {"1704085200": {"date": "01-01-2024", "date_utc": 1704085200, "open": 187.15, "high": 196.38, "low": 180.17, "close": 184.4, "volume": 1187219300, "adjclose": 183.7}, "1706763600": {"date": "01-02-2024", "date_utc": 1706763600, "open": 183.99, "high": 191.05, "low": 179.25, "close": 180.75, "volume": 1161627000, "adjclose": 180.07}, "1709269200": {"date": "01-03-2024", "date_utc": 1709269200, "open": 179.55, "high": 180.53, "low": 168.49, "close": 171.48, "volume": 1432782800, "adjclose": 171.05}, "1711944000": {"date": "01-04-2024", "date_utc": 1711944000, "open": 171.19, "high": 178.36, "low": 164.08, "close": 170.33, "volume": 1245717000, "adjclose": 169.9}, "1714536000": {"date": "01-05-2024", "date_utc": 1714536000, "open": 169.58, "high": 193, "low": 169.11, "close": 192.25, "volume": 1336537700, "adjclose": 191.77}, "1717214400": {"date": "01-06-2024", "date_utc": 1717214400, "open": 192.9, "high": 220.2, "low": 192.15, "close": 210.62, "volume": 1723984500, "adjclose": 210.38}, "1719806400": {"date": "01-07-2024", "date_utc": 1719806400, "open": 212.09, "high": 237.23, "low": 211.92, "close": 222.08, "volume": 1153099800, "adjclose": 221.82}, "1722484800": {"date": "01-08-2024", "date_utc": 1722484800, "open": 224.37, "high": 232.92, "low": 196, "close": 229, "volume": 1122667000, "adjclose": 228.74}, "1725163200": {"date": "01-09-2024", "date_utc": 1725163200, "open": 228.55, "high": 229, "low": 217.48, "close": 220.85, "volume": 93970700, "adjclose": 220.85}, "1725544369": {"date": "05-09-2024", "date_utc": 1725544369, "open": 221.52, "high": 224.33, "low": 221.52, "close": 224.09, "volume": 6042037, "adjclose": 224.09}}}
{"id": 54, "model_name": "gorilla-openfunctions-v2", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result pattern for \"get_stock_history(stock_name='MSFT',interval='1wk',diffandsplits='false')\". Expect type Dict, but key '1725544145' not found in the model output."], "error_type": "executable_checker:wrong_result_type:dict_key_not_found", "prompt": {"id": "executable_simple_53", "question": "\u6211\u9700\u8981\u5206\u6790\u5fae\u8edf\u904e\u53bb\u5e7e\u500b\u6708\u7684\u80a1\u7968\u8868\u73fe\uff0c\u4f46\u8981\u6392\u9664\u80a1\u606f\u6216\u80a1\u7968\u5206\u5272\u7684\u5e72\u64fe\u3002\u4f60\u80fd\u5426\u63d0\u4f9b\u80a1\u7968\u4ee3\u78bc\u70ba'MSFT'\u7684\u6bcf\u9031\u6b77\u53f2\u6578\u64da\uff0c\u4e26\u78ba\u4fdd\u5728\u6578\u64da\u96c6\u4e2d\u6392\u9664\u5206\u5272\u548c\u80a1\u606f\uff1f", "function": {"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "string", "description": "The diff and splits of the stock history. Allows one of following : true|false. Default as false"}}, "required": ["stock_name", "interval"]}}, "execution_result_type": ["structural_match"], "ground_truth": ["get_stock_history(stock_name='MSFT', interval='1wk', diffandsplits='true')"], "execution_result": [{"1720411200": {"date": "08-07-2024", "date_utc": 1720411200, "open": 466.55, "high": 467.7, "low": 450.65, "close": 453.55, "volume": 87801100, "adjclose": 452.73}, "1721016000": {"date": "15-07-2024", "date_utc": 1721016000, "open": 453.3, "high": 457.26, "low": 432, "close": 437.11, "volume": 95118300, "adjclose": 436.32}, "1721620800": {"date": "22-07-2024", "date_utc": 1721620800, "open": 441.79, "high": 448.39, "low": 417.27, "close": 425.27, "volume": 109249300, "adjclose": 424.5}, "1722225600": {"date": "29-07-2024", "date_utc": 1722225600, "open": 431.58, "high": 432.15, "low": 404.34, "close": 408.49, "volume": 150439100, "adjclose": 407.76}, "1722830400": {"date": "05-08-2024", "date_utc": 1722830400, "open": 389.17, "high": 410.08, "low": 385.58, "close": 406.02, "volume": 125786300, "adjclose": 405.29}, "1723435200": {"date": "12-08-2024", "date_utc": 1723435200, "open": 407.06, "high": 421.34, "low": 404.24, "close": 418.47, "volume": 97971900, "adjclose": 417.72}, "1724040000": {"date": "19-08-2024", "date_utc": 1724040000, "open": 418.96, "high": 426.79, "low": 412.09, "close": 416.79, "volume": 85544600, "adjclose": 416.79}, "1724644800": {"date": "26-08-2024", "date_utc": 1724644800, "open": 416.37, "high": 422.05, "low": 407.31, "close": 417.14, "volume": 82881900, "adjclose": 417.14}, "1725249600": {"date": "02-09-2024", "date_utc": 1725249600, "open": 417.91, "high": 419.88, "low": 404.37, "close": 408.9, "volume": 35394300, "adjclose": 408.9}, "1725544145": {"date": "05-09-2024", "date_utc": 1725544145, "open": 408.2, "high": 413.09, "low": 407.72, "close": 410.15, "volume": 1733457, "adjclose": 410.15}}]}, "model_result_raw": "get_stock_history(stock_name='MSFT', interval='1wk', diffandsplits='false')", "model_result_decoded": ["get_stock_history(stock_name='MSFT',interval='1wk',diffandsplits='false')"], "model_executed_output": {"1720411200": {"date": "08-07-2024", "date_utc": 1720411200, "open": 466.55, "high": 467.7, "low": 450.65, "close": 453.55, "volume": 87801100, "adjclose": 452.73}, "1721016000": {"date": "15-07-2024", "date_utc": 1721016000, "open": 453.3, "high": 457.26, "low": 432, "close": 437.11, "volume": 95118300, "adjclose": 436.32}, "1721620800": {"date": "22-07-2024", "date_utc": 1721620800, "open": 441.79, "high": 448.39, "low": 417.27, "close": 425.27, "volume": 109249300, "adjclose": 424.5}, "1722225600": {"date": "29-07-2024", "date_utc": 1722225600, "open": 431.58, "high": 432.15, "low": 404.34, "close": 408.49, "volume": 150439100, "adjclose": 407.76}, "1722830400": {"date": "05-08-2024", "date_utc": 1722830400, "open": 389.17, "high": 410.08, "low": 385.58, "close": 406.02, "volume": 125786300, "adjclose": 405.29}, "1723435200": {"date": "12-08-2024", "date_utc": 1723435200, "open": 407.06, "high": 421.34, "low": 404.24, "close": 418.47, "volume": 97971900, "adjclose": 417.72}, "1724040000": {"date": "19-08-2024", "date_utc": 1724040000, "open": 418.96, "high": 426.79, "low": 412.09, "close": 416.79, "volume": 85544600, "adjclose": 416.79}, "1724644800": {"date": "26-08-2024", "date_utc": 1724644800, "open": 416.37, "high": 422.05, "low": 407.31, "close": 417.14, "volume": 82881900, "adjclose": 417.14}, "1725249600": {"date": "02-09-2024", "date_utc": 1725249600, "open": 417.91, "high": 419.88, "low": 404.37, "close": 408.9, "volume": 35394300, "adjclose": 408.9}, "1725544369": {"date": "05-09-2024", "date_utc": 1725544369, "open": 408.2, "high": 413.09, "low": 407.72, "close": 410.69, "volume": 1808872, "adjclose": 410.69}}}
{"id": 88, "model_name": "gorilla-openfunctions-v2", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result for 'calculate_investment_value(initial_investment=100000,annual_contribution=1000,years=3,annual_return=0.1,inflation_rate=[0.01, 0.04, 0.04],adjust_for_inflation=True)'. Expected: 1227813.9640000002, but got: 125562.36400000003."], "error_type": "executable_checker:wrong_result", "prompt": {"id": "executable_simple_87", "question": "\u6211\u5df2\u7d93\u6e96\u5099\u4e86100\u842c\u7f8e\u5143\u4f5c\u70ba\u521d\u59cb\u6295\u8cc7\uff0c\u4e26\u8a08\u5283\u6bcf\u5e74\u589e\u52a01000\u7f8e\u5143\u3002\u6211\u6253\u7b97\u57283\u5e74\u7684\u6642\u9593\u5167\u9032\u884c\u6295\u8cc7\uff0c\u9810\u8a08\u6bcf\u5e74\u7684\u56de\u5831\u7387\u7d04\u70ba10\uff05\u3002\u4f46\u662f\uff0c\u6211\u4e5f\u60f3\u8003\u616e\u9019\u4e9b\u5e74\u4efd\u7684\u901a\u8ca8\u81a8\u8139\u7387\uff0c\u6211\u9810\u6e2c\u5206\u5225\u70ba1\uff05\uff0c4\uff05\u548c4\uff05\u3002\u60a8\u80fd\u8a08\u7b97\u51fa\u8003\u616e\u901a\u8ca8\u81a8\u8139\u5f8c\uff0c\u6211\u7684\u6295\u8cc7\u5728\u6b64\u671f\u9593\u7d50\u675f\u6642\u7684\u50f9\u503c\u55ce\uff1f", "function": {"name": "calculate_investment_value", "description": "Calculates the value of an investment over time.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "annual_contribution": {"type": "integer", "description": "The annual contribution amount."}, "years": {"type": "integer", "description": "The number of years to calculate the investment value for."}, "annual_return": {"type": "float", "description": "The annual return rate, ranging from 0 to 1."}, "inflation_rate": {"type": "array", "items": {"type": "float"}, "description": "The inflation rate for each year in percentage, ranging from 0 to 1."}, "adjust_for_inflation": {"type": "boolean", "default": true, "description": "Whether to adjust the investment value for inflation."}}, "required": ["initial_investment", "annual_contribution", "years", "annual_return", "inflation_rate"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_investment_value(initial_investment=1000000,annual_contribution=1000,years=3,annual_return=0.1,inflation_rate=[0.01,0.04,0.04])"], "execution_result": [1227813.9640000002]}, "model_result_raw": "calculate_investment_value(initial_investment=100000, annual_contribution=1000, years=3, annual_return=0.1, inflation_rate=[0.01, 0.04, 0.04], adjust_for_inflation=True)", "model_result_decoded": ["calculate_investment_value(initial_investment=100000,annual_contribution=1000,years=3,annual_return=0.1,inflation_rate=[0.01, 0.04, 0.04],adjust_for_inflation=True)"], "model_executed_output": 125562.36400000003}
{"id": 91, "model_name": "gorilla-openfunctions-v2", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result for \"book_room(room_type='luxury',price=1000.0,check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')\". Expected: {'customer_id': '123', 'room_number': 'deluxe', 'check_in_date': '08-11-2024', 'check_out_date': '08-15-2024', 'total_price': 1000}, but got: {'customer_id': '123', 'room_number': 'luxury', 'check_in_date': '08-11-2024', 'check_out_date': '08-15-2024', 'total_price': 1000.0}."], "error_type": "executable_checker:wrong_result", "prompt": {"id": "executable_simple_90", "question": "\u6211\u6b63\u5728\u8a08\u5283\u524d\u5f80\u7d10\u7d04\u7684\u5546\u52d9\u65c5\u884c\uff0c\u4e26\u6c7a\u5b9a\u5ef6\u9577\u6211\u7684\u505c\u7559\u6642\u9593\uff0c\u597d\u597d\u4eab\u53d7\u9019\u5ea7\u57ce\u5e02\u3002\u6211\u60f3\u9810\u8a02\u4e00\u9593\u8c6a\u83ef\u5ba2\u623f\uff0c\u4ee5\u4fbf\u5728\u6211\u7684\u65c5\u884c\u671f\u9593\u5165\u4f4f\u3002\u6211\u6240\u8003\u616e\u7684\u65e5\u671f\u662f\u5f9e2024\u5e748\u670811\u65e5\u52302024\u5e748\u670815\u65e5\u3002\u6211\u5df2\u7d93\u6e96\u5099\u597d\u9810\u7b97\u7528\u65bc\u4f4f\u5bbf\uff0c\u4e26\u9858\u610f\u82b1\u8cbb\u9ad8\u90541000\u7f8e\u5143\u4eab\u53d7\u8212\u9069\u7684\u4f4f\u5bbf\u3002\u6211\u7684\u5ba2\u6236\u7de8\u865f\u662f123\u3002\u4f60\u80fd\u5e6b\u6211\u9810\u8a02\u90a3\u9593\u5ba2\u623f\u55ce\uff1f", "function": {"name": "book_room", "description": "Books a room for a customer.", "parameters": {"type": "dict", "properties": {"room_type": {"type": "string", "description": "The room type to book."}, "price": {"type": "float", "description": "The max price of the room. Default 0.0"}, "check_in_date": {"type": "string", "description": "The check-in date in format of MM-DD-YYYY. "}, "check_out_date": {"type": "string", "description": "The check-out date in format of MM-DD-YYYY."}, "customer_id": {"type": "string", "description": "The customer ID."}, "discount_code": {"type": "string", "description": "The discount code (if any).", "default": null}}, "required": ["room_type", "check_in_date", "check_out_date", "customer_id"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["book_room(room_type='deluxe',price=1000,check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')"], "execution_result": [{"customer_id": "123", "room_number": "deluxe", "check_in_date": "08-11-2024", "check_out_date": "08-15-2024", "total_price": 1000}]}, "model_result_raw": "book_room(room_type='luxury', price=1000.0, check_in_date='08-11-2024', check_out_date='08-15-2024', customer_id='123')", "model_result_decoded": ["book_room(room_type='luxury',price=1000.0,check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')"], "model_executed_output": {"customer_id": "123", "room_number": "luxury", "check_in_date": "08-11-2024", "check_out_date": "08-15-2024", "total_price": 1000.0}}
{"id": 92, "model_name": "gorilla-openfunctions-v2", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result for \"book_room(room_type='\u7279\u5927\u5e8a\u623f',price=10000,check_in_date='12-11-2023',check_out_date='08-15-2024',customer_id='123',discount_code='null')\". Expected: {'customer_id': '123', 'room_number': 'king', 'check_in_date': '12-11-2023', 'check_out_date': '08-15-2024', 'total_price': 10000}, but got: {'customer_id': '123', 'room_number': '\u7279\u5927\u5e8a\u623f', 'check_in_date': '12-11-2023', 'check_out_date': '08-15-2024', 'total_price': 10000}."], "error_type": "executable_checker:wrong_result", "prompt": {"id": "executable_simple_91", "question": "\u6211\u60f3\u70ba\u4e00\u4f4dID\u70ba123\u7684\u5ba2\u6236\u9810\u8a02\u4e00\u9593\u7279\u5927\u5e8a\u623f\u3002\u9810\u8a02\u65e5\u671f\u5f9e2023\u5e7412\u670811\u65e5\u52302024\u5e748\u670815\u65e5\u3002\u50f9\u683c\u70ba$10,000\u3002\u6b64\u9810\u8a02\u4e0d\u9069\u7528\u4efb\u4f55\u6298\u6263\u4ee3\u78bc\u3002\u60a8\u80fd\u5e6b\u6211\u8655\u7406\u9019\u6b21\u9810\u8a02\u55ce\uff1f", "function": {"name": "book_room", "description": "Books a room for a customer.", "parameters": {"type": "dict", "properties": {"room_type": {"type": "string", "description": "The room type to book."}, "price": {"type": "float", "description": "The max price of the room. Default 0.0"}, "check_in_date": {"type": "string", "description": "The check-in date in format of MM-DD-YYYY. "}, "check_out_date": {"type": "string", "description": "The check-out date in format of MM-DD-YYYY."}, "customer_id": {"type": "string", "description": "The customer ID."}, "discount_code": {"type": "string", "description": "The discount code (if any).", "default": null}}, "required": ["room_type", "check_in_date", "check_out_date", "customer_id"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["book_room(room_type='king',price=10000,check_in_date='12-11-2023',check_out_date='08-15-2024',customer_id='123')"], "execution_result": [{"customer_id": "123", "room_number": "king", "check_in_date": "12-11-2023", "check_out_date": "08-15-2024", "total_price": 10000}]}, "model_result_raw": "book_room(room_type='\u7279\u5927\u5e8a\u623f', price=10000, check_in_date='12-11-2023', check_out_date='08-15-2024', customer_id='123', discount_code=null)", "model_result_decoded": ["book_room(room_type='\u7279\u5927\u5e8a\u623f',price=10000,check_in_date='12-11-2023',check_out_date='08-15-2024',customer_id='123',discount_code='null')"], "model_executed_output": {"customer_id": "123", "room_number": "\u7279\u5927\u5e8a\u623f", "check_in_date": "12-11-2023", "check_out_date": "08-15-2024", "total_price": 10000}}
{"id": 95, "model_name": "gorilla-openfunctions-v2", "test_category": "executable_simple", "valid": false, "error": ["Error in execution: \"get_movie_director(movie_name='\u963f\u51e1\u9054')\". Error: 'Director'"], "error_type": "executable_checker:execution_error", "prompt": {"id": "executable_simple_94", "question": "\u6211\u6628\u665a\u548c\u670b\u53cb\u8a0e\u8ad6\u96fb\u5f71\uff0c\u6211\u5011\u958b\u59cb\u8ac7\u8ad6\u300a\u963f\u51e1\u9054\u300b\u3002\u6211\u610f\u8b58\u5230\u6211\u4e0d\u8a18\u5f97\u662f\u8ab0\u5c0e\u6f14\u7684\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u51fa\u5c0e\u6f14\u7684\u540d\u5b57\u55ce\uff1f", "function": {"name": "get_movie_director", "description": "Fetches the director of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_movie_director(movie_name='Avatar')"], "execution_result": ["James Cameron"]}, "model_result_raw": "get_movie_director(movie_name='\u963f\u51e1\u9054')", "model_result_decoded": ["get_movie_director(movie_name='\u963f\u51e1\u9054')"]}
{"id": 97, "model_name": "gorilla-openfunctions-v2", "test_category": "executable_simple", "valid": false, "error": ["Error in execution: \"get_movie_rating(movie_name='\u963f\u51e1\u9054')\". Error: 'Rated'"], "error_type": "executable_checker:execution_error", "prompt": {"id": "executable_simple_96", "question": "\u6211\u6b63\u5728\u8003\u616e\u5728\u9019\u500b\u9031\u672b\u7684\u5bb6\u5ead\u96fb\u5f71\u4e4b\u591c\u4e0a\u64ad\u653e\u96fb\u5f71\u300a\u963f\u51e1\u9054\u300b\uff0c\u4f46\u6211\u9700\u8981\u78ba\u4fdd\u5b83\u9069\u5408\u6240\u6709\u5e74\u9f61\u5c64\u3002\u4f60\u80fd\u5e6b\u6211\u67e5\u4e00\u4e0b\u300a\u963f\u51e1\u9054\u300b\u7684\u5e74\u9f61\u5206\u7d1a\u55ce\uff1f", "function": {"name": "get_movie_rating", "description": "Fetches the age rating of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_movie_rating(movie_name='Avatar')"], "execution_result": ["PG-13"]}, "model_result_raw": "get_movie_rating(movie_name='\u963f\u51e1\u9054')", "model_result_decoded": ["get_movie_rating(movie_name='\u963f\u51e1\u9054')"]}