{"accuracy": 0.725, "correct_count": 145, "total_count": 200}
{"id": 4, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [2] of model output for index 2 of possible answers.", {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'protein_name': 'MouseHemoglobin'. Expected one of ['rat hemoglobin', '\u5927\u9f20\u8840\u7d05\u86cb\u767d']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"protein_info.get_sequence_and_3D": {"protein_name": "MouseHemoglobin"}}, "possible_answer_item": {"protein_info.get_sequence_and_3D_3": {"protein_name": ["rat hemoglobin", "\u5927\u9f20\u8840\u7d05\u86cb\u767d"], "model_3d": [true, ""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_3", "question": "\u7372\u53d6\u4eba\u985eHbA1c\u3001\u6b63\u5e38\u8840\u7d05\u86cb\u767d\u548c\u5927\u9f20\u8840\u7d05\u86cb\u767d\u7684\u86cb\u767d\u8cea\u5e8f\u5217\u548c\u5b83\u5011\u76843D\u6a21\u578b\u3002", "function": {"name": "protein_info.get_sequence_and_3D", "description": "Retrive the sequence and 3D models of proteins.", "parameters": {"type": "dict", "properties": {"protein_name": {"type": "string", "description": "The name of the protein."}, "model_3d": {"type": "boolean", "description": "Set true to get 3D model of the protein.", "default": true}}, "required": ["protein_name"]}}}, "model_result_raw": "protein_info.get_sequence_and_3D(protein_name='HbA1c'), protein_info.get_sequence_and_3D(protein_name='NormalHemoglobin'), protein_info.get_sequence_and_3D(protein_name='MouseHemoglobin')", "model_result_decoded": [{"protein_info.get_sequence_and_3D": {"protein_name": "HbA1c"}}, {"protein_info.get_sequence_and_3D": {"protein_name": "NormalHemoglobin"}}, {"protein_info.get_sequence_and_3D": {"protein_name": "MouseHemoglobin"}}], "possible_answer": {"protein_info.get_sequence_and_3D_1": {"protein_name": ["human HbA1c", "HbA1c", "\u4eba\u985eHbA1c"], "model_3d": [true, ""]}, "protein_info.get_sequence_and_3D_2": {"protein_name": ["normal hemoglobin", "\u6b63\u5e38\u8840\u7d05\u86cb\u767d"], "model_3d": [true, ""]}, "protein_info.get_sequence_and_3D_3": {"protein_name": ["rat hemoglobin", "\u5927\u9f20\u8840\u7d05\u86cb\u767d"], "model_3d": [true, ""]}}}
{"id": 10, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_9", "question": "\u5c0b\u627e\u5169\u5bb6\u96fb\u5f71\u9662\uff0c\u4f4d\u65bc\u8056\u5730\u7259\u54e5\u9644\u8fd1\uff0c\u63d0\u4f9b\u4e0b\u53485\u9ede\u7684\u300a\u5929\u80fd\u300b\u548c\u665a\u4e0a7\u9ede\u534a\u7684\u300a007\u751f\u6b7b\u4ea4\u6230\u300b\u5834\u6b21\u3002", "function": {"name": "find_movie_showing", "description": "Find local movie theatres and their schedule for a specific movie", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. San Diego, CA"}, "movie": {"type": "array", "items": {"type": "string", "enum": ["Tenet", "No Time To Die"]}, "description": "Preferred movie to watch."}, "time": {"type": "array", "items": {"type": "string", "description": "Show time for each movie"}}}, "required": ["location", "movie", "time"]}}}, "model_result_raw": "find_movie_showing(location='San Diego, CA', movie=['Tenet', 'No Time To Die'], time=['5:00 PM', '7:30 PM'])", "model_result_decoded": [{"find_movie_showing": {"location": "San Diego, CA", "movie": ["Tenet", "No Time To Die"], "time": ["5:00 PM", "7:30 PM"]}}], "possible_answer": {"find_movie_showing_1": {"location": ["San Diego", "San Diego, CA", "CA", "\u8056\u5730\u7259\u54e5", "\u52a0\u5dde\u8056\u5730\u7259\u54e5", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u8056\u5730\u7259\u54e5", "\u8056\u5730\u7259\u54e5, CA"], "movie": [["Tenet"], ["TENET\u5929\u80fd"], ["\u5929\u80fd"]], "time": [["5 pm"], ["17:00"], ["\u4e0b\u53485\u9ede"]]}, "find_movie_showing_2": {"location": ["San Diego", "San Diego, CA", "CA", "\u8056\u5730\u7259\u54e5", "\u52a0\u5dde\u8056\u5730\u7259\u54e5", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u8056\u5730\u7259\u54e5", "\u8056\u5730\u7259\u54e5, CA"], "movie": [["No Time To Die"], ["007\u751f\u6b7b\u4ea4\u6230"]], "time": [["7:30 pm"], ["19:30"], ["\u665a\u4e0a7\u9ede\u534a"]]}}}
{"id": 23, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_22", "question": "\u6848\u4ef6\u7de8\u865fXY1234\u5728Los Angeles County Court\u548c\u6848\u4ef6\u7de8\u865fGH5678\u5728Orange County Court\u7684\u72c0\u614b\u548c\u9810\u5b9a\u5be9\u5224\u65e5\u671f\u662f\u4ec0\u9ebc\uff1f", "function": {"name": "court_info.get_case_status", "description": "Retrieves the status and trial dates for court cases from specified county courts.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The specific court case number."}, "court": {"type": "string", "description": "The county court where the case is filed."}, "details": {"type": "string", "enum": ["status", "trial_date"], "description": "Specific details required about the court case. Defaults to 'status'."}}, "required": ["case_number", "court"]}}}, "model_result_raw": "court_info.get_case_status(case_number='XY1234', court='Los Angeles County Court', details='status'), court_info.get_case_status(case_number='GH5678', court='Orange County Court', details='trial_date')", "model_result_decoded": [{"court_info.get_case_status": {"case_number": "XY1234", "court": "Los Angeles County Court", "details": "status"}}, {"court_info.get_case_status": {"case_number": "GH5678", "court": "Orange County Court", "details": "trial_date"}}], "possible_answer": {"court_info.get_case_status_1": {"case_number": ["XY1234"], "court": ["Los Angeles County Court", "Los Angeles", "Los Angeles, CA", "LA"], "details": ["status", "", "\u72c0\u614b"]}, "court_info.get_case_status_2": {"case_number": ["GH5678"], "court": ["Orange County Court", "Orange County", "OC"], "details": ["status", "", "\u72c0\u614b"]}, "court_info.get_case_status_3": {"case_number": ["XY1234"], "court": ["Los Angeles County Court", "Los Angeles", "Los Angeles, CA", "LA"], "details": ["trial_date", "\u9810\u5b9a\u5be9\u5224\u65e5\u671f", "\u5be9\u5224\u65e5\u671f"]}, "court_info.get_case_status_4": {"case_number": ["GH5678"], "court": ["Orange County Court", "Orange County", "OC"], "details": ["trial_date", "\u9810\u5b9a\u5be9\u5224\u65e5\u671f", "\u5be9\u5224\u65e5\u671f"]}}}
{"id": 27, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_26", "question": "\u5c0b\u627e\u7d10\u7d04\u5730\u5340\u6cd5\u9662\u8a34\u8a1f\u6848\u4ef6\u7de8\u865f\u70ba\u300c67813\u300d\u3001\u300c71249\u300d\u7684\u300c\u6c11\u4e8b\u300d\u548c\u300c\u5211\u4e8b\u300d\u985e\u578b\u7684\u8a73\u7d30\u8cc7\u6599\u3002", "function": {"name": "court_case.find", "description": "Locate details of court cases based on specific parameters like case number and case type.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and court where the lawsuit is filed."}, "case_number": {"type": "array", "items": {"type": "string"}, "description": "The unique case numbers of the lawsuits."}, "case_type": {"type": "string", "enum": ["Civil", "Criminal"], "description": "Type of the court case.", "default": "Civil"}}, "required": ["location", "case_number"]}}}, "model_result_raw": "court_case.find(location='New York', case_number=['67813', '71249'], case_type='Civil')", "model_result_decoded": [{"court_case.find": {"location": "New York", "case_number": ["67813", "71249"], "case_type": "Civil"}}], "possible_answer": {"court_case.find_1": {"location": ["New York District", "NY District", "New York", "New York, NY", "NY", "\u7d10\u7d04", "\u7d10\u7d04\u5730\u5340", "\u7d10\u7d04\u5730\u5340\u6cd5\u9662"], "case_number": [["67813"]], "case_type": ["Civil", "", "\u6c11\u4e8b"]}, "court_case.find_2": {"location": ["New York District", "NY District", "New York", "New York, NY", "NY", "\u7d10\u7d04", "\u7d10\u7d04\u5730\u5340", "\u7d10\u7d04\u5730\u5340\u6cd5\u9662"], "case_number": [["71249"]], "case_type": ["Criminal", "\u5211\u4e8b"]}, "court_case.find_3": {"location": ["New York District", "NY District", "New York", "New York, NY", "NY", "\u7d10\u7d04", "\u7d10\u7d04\u5730\u5340"], "case_number": [["67813"]], "case_type": ["Criminal", "\u5211\u4e8b"]}, "court_case.find_4": {"location": ["New York District", "NY District", "New York", "New York, NY", "NY", "\u7d10\u7d04", "\u7d10\u7d04\u5730\u5340"], "case_number": [["71249"]], "case_type": ["Civil", "", "\u6c11\u4e8b"]}}}
{"id": 29, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_28", "question": "\u73fe\u5728\u897f\u96c5\u5716\u548c\u6d1b\u6749\u78ef\u7684\u6eab\u5ea6\u662f\u591a\u5c11\uff1f\u63a5\u4e0b\u4f86\u4e09\u5c0f\u6642\u7684\u6eab\u5ea6\u6703\u662f\u591a\u5c11\uff1f", "function": {"name": "get_current_and_future_temperature", "description": "Provides the current temperature and forecasts the temperature for the next few hours at a particular location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the temperature for."}, "hours": {"type": "integer", "description": "Number of hours for the temperature forecast."}}, "required": ["location", "hours"]}}}, "model_result_raw": "get_current_and_future_temperature(location='\u897f\u96c5\u5716', hours=3)", "model_result_decoded": [{"get_current_and_future_temperature": {"location": "\u897f\u96c5\u5716", "hours": 3}}], "possible_answer": {"get_current_and_future_temperature_1": {"location": ["Seattle", "Seattle, Washington", "Seattle, WA", "\u897f\u96c5\u5716", "\u83ef\u76db\u9813\u897f\u96c5\u5716", "\u83ef\u76db\u9813\u5dde\u897f\u96c5\u5716"], "hours": [3]}, "get_current_and_future_temperature_2": {"location": ["Los Angeles", "Los Angeles, CA", "LA", "Los Angeles, California", "Los Angeles, CA", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef"], "hours": [3]}}}
{"id": 30, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [1] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'adults': 1. Expected one of [0]."], "sub_error_type": "value_error:dict_value", "model_output_item": {"waste_calculation.calculate": {"population": {"adults": 1, "children": 0, "singles": 1}, "location": "New York"}}, "possible_answer_item": {"waste_calculation.calculate_2": {"population": [{"adults": [0], "children": [0], "singles": [1]}], "location": ["New York", "New York, NY", "NY", "New York City", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_29", "question": "\u627e\u51fa\u4e00\u500b\u56db\u53e3\u4e4b\u5bb6\u5728\u6d1b\u6749\u78ef\u7522\u751f\u591a\u5c11\u5783\u573e\uff0c\u5047\u8a2d\u6709\u5169\u500b\u5b69\u5b50\u548c\u5169\u500b\u6210\u4eba\u3002\u540c\u6642\uff0c\u8a08\u7b97\u4e00\u500b\u55ae\u8eab\u6f22\u5728\u7d10\u7d04\u7684\u5783\u573e\u7522\u91cf\u3002", "function": {"name": "waste_calculation.calculate", "description": "Calculates the estimated waste generated by different population sizes in a specific location.", "parameters": {"type": "dict", "properties": {"population": {"type": "dict", "description": "The description of population. 'adults' is the number of adults in the household. 'children' is the number of children. 'singles' is the number of single adults living alone.", "required": ["adults", "children", "singles"]}, "location": {"type": "string", "description": "The city where the population resides."}}, "required": ["population", "location"]}}}, "model_result_raw": "waste_calculation.calculate(population={'adults': 2, 'children': 2,'singles': 0}, location='Los Angeles'), waste_calculation.calculate(population={'adults': 1, 'children': 0,'singles': 1}, location='New York')", "model_result_decoded": [{"waste_calculation.calculate": {"population": {"adults": 2, "children": 2, "singles": 0}, "location": "Los Angeles"}}, {"waste_calculation.calculate": {"population": {"adults": 1, "children": 0, "singles": 1}, "location": "New York"}}], "possible_answer": {"waste_calculation.calculate_1": {"population": [{"adults": [2], "children": [2], "singles": [0]}], "location": ["Los Angeles", "Los Angeles, CA", "LA", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef"]}, "waste_calculation.calculate_2": {"population": [{"adults": [0], "children": [0], "singles": [1]}], "location": ["New York", "New York, NY", "NY", "New York City", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"]}}}
{"id": 35, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_34", "question": "\u6211\u60f3\u4e86\u89e3\u57fa\u7763\u6559\u5728\u57c3\u53ca\u548c\u571f\u8033\u5176\u4ece\u516c\u5143100\u5e74\u52301500\u5e74\u7684\u5174\u8870\u3002", "function": {"name": "religion_history.track", "description": "Track the historical development of a specific religion in a specific area within a specific time frame.", "parameters": {"type": "dict", "properties": {"region": {"type": "string", "description": "The geographical area where the religion's history is to be tracked."}, "religion": {"type": "string", "description": "The name of the religion."}, "start_year": {"type": "integer", "description": "The beginning year of the time frame."}, "end_year": {"type": "integer", "description": "The ending year of the time frame."}}, "required": ["region", "religion", "start_year", "end_year"]}}}, "model_result_raw": "religion_history.track(region='Egypt and Turkey', religion='Christianity', start_year=100, end_year=1500)", "model_result_decoded": [{"religion_history.track": {"region": "Egypt and Turkey", "religion": "Christianity", "start_year": 100, "end_year": 1500}}], "possible_answer": {"religion_history.track_1": {"region": ["Egypt", "\u57c3\u53ca"], "religion": ["Christianity", "\u57fa\u7763\u6559"], "start_year": [100], "end_year": [1500]}, "religion_history.track_2": {"region": ["Turkey", "\u571f\u8033\u5176"], "religion": ["Christianity", "\u57fa\u7763\u6559"], "start_year": [100], "end_year": [1500]}}}
{"id": 37, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_36", "question": "\u4f7f\u7528\u6c34\u5f69\uff0c\u6211\u61c9\u8a72\u6df7\u5408\u54ea\u4e9b\u984f\u8272\u624d\u80fd\u5f97\u5230\u6d0b\u7d05\u8272\uff0c\u6bcf\u7a2e\u984f\u8272\u7684\u6578\u91cf\u662f\u591a\u5c11\uff1f\u540c\u6642\uff0c\u6211\u60f3\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u58d3\u514b\u529b\u4f86\u5f97\u5230\u6d77\u8ecd\u85cd\uff0c\u4ee5\u53ca\u5b83\u5011\u5404\u81ea\u7684\u6578\u91cf\u3002", "function": {"name": "paint_color_mixture", "description": "Gives a combination of primary colors to mix for creating a certain color. This function requires type of paint and color.", "parameters": {"type": "dict", "properties": {"paint_type": {"type": "string", "description": "The type of paint (Watercolor, Oil, Acrylic)."}, "color": {"type": "string", "description": "The color to be produced from the mixture."}}, "required": ["paint_type", "color"]}}}, "model_result_raw": "paint_color_mixture(paint_type='Watercolor', color='Purple')", "model_result_decoded": [{"paint_color_mixture": {"paint_type": "Watercolor", "color": "Purple"}}], "possible_answer": {"paint_color_mixture 1": {"paint_type": ["Watercolor", "watercolor", "\u6c34\u5f69"], "color": ["Magenta", "magenta", "\u6d0b\u7d05\u8272"]}, "paint_color_mixture 2": {"paint_type": ["Acrylic", "acrylic", "\u58d3\u514b\u529b"], "color": ["Navy", "navy", "\u6d77\u8ecd\u85cd"]}}}
{"id": 40, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'details': ['Opening hours', 'Adult tickets']. Expected one of [['Opening hours', 'Adult tickets', 'Child tickets'], ['Opening hours', 'Child tickets', 'Adult tickets'], ['Child tickets', 'Opening hours', 'Adult tickets'], ['Child tickets', 'Adult tickets', 'Opening hours'], ['Adult tickets', 'Opening hours', 'Child tickets'], ['Adult tickets', 'Child tickets', 'Opening hours'], ['\u958b\u653e\u6642\u9593', '\u6210\u4eba\u9580\u7968', '\u5152\u7ae5\u9580\u7968'], ['\u958b\u653e\u6642\u9593', '\u5152\u7ae5\u9580\u7968', '\u6210\u4eba\u9580\u7968'], ['\u5152\u7ae5\u9580\u7968', '\u958b\u653e\u6642\u9593', '\u6210\u4eba\u9580\u7968'], ['\u5152\u7ae5\u9580\u7968', '\u6210\u4eba\u9580\u7968', '\u958b\u653e\u6642\u9593'], ['\u6210\u4eba\u9580\u7968', '\u958b\u653e\u6642\u9593', '\u5152\u7ae5\u9580\u7968'], ['\u6210\u4eba\u9580\u7968', '\u5152\u7ae5\u9580\u7968', '\u958b\u653e\u6642\u9593']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"museum_info.get_info": {"location": "\u83ef\u76db\u9813\u7279\u5340", "details": ["Opening hours", "Adult tickets"]}}, "possible_answer_item": {"museum_info.get_info 1": {"location": ["Washington D.C.", "Washington DC", "\u83ef\u76db\u9813\u7279\u5340"], "details": [["Opening hours", "Adult tickets", "Child tickets"], ["Opening hours", "Child tickets", "Adult tickets"], ["Child tickets", "Opening hours", "Adult tickets"], ["Child tickets", "Adult tickets", "Opening hours"], ["Adult tickets", "Opening hours", "Child tickets"], ["Adult tickets", "Child tickets", "Opening hours"], ["\u958b\u653e\u6642\u9593", "\u6210\u4eba\u9580\u7968", "\u5152\u7ae5\u9580\u7968"], ["\u958b\u653e\u6642\u9593", "\u5152\u7ae5\u9580\u7968", "\u6210\u4eba\u9580\u7968"], ["\u5152\u7ae5\u9580\u7968", "\u958b\u653e\u6642\u9593", "\u6210\u4eba\u9580\u7968"], ["\u5152\u7ae5\u9580\u7968", "\u6210\u4eba\u9580\u7968", "\u958b\u653e\u6642\u9593"], ["\u6210\u4eba\u9580\u7968", "\u958b\u653e\u6642\u9593", "\u5152\u7ae5\u9580\u7968"], ["\u6210\u4eba\u9580\u7968", "\u5152\u7ae5\u9580\u7968", "\u958b\u653e\u6642\u9593"]]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'location': '\u5df4\u9ece'. Expected one of ['Washington D.C.', 'Washington DC', '\u83ef\u76db\u9813\u7279\u5340']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"museum_info.get_info": {"location": "\u5df4\u9ece", "details": ["Opening hours", "Adult tickets", "Child tickets"]}}, "possible_answer_item": {"museum_info.get_info 1": {"location": ["Washington D.C.", "Washington DC", "\u83ef\u76db\u9813\u7279\u5340"], "details": [["Opening hours", "Adult tickets", "Child tickets"], ["Opening hours", "Child tickets", "Adult tickets"], ["Child tickets", "Opening hours", "Adult tickets"], ["Child tickets", "Adult tickets", "Opening hours"], ["Adult tickets", "Opening hours", "Child tickets"], ["Adult tickets", "Child tickets", "Opening hours"], ["\u958b\u653e\u6642\u9593", "\u6210\u4eba\u9580\u7968", "\u5152\u7ae5\u9580\u7968"], ["\u958b\u653e\u6642\u9593", "\u5152\u7ae5\u9580\u7968", "\u6210\u4eba\u9580\u7968"], ["\u5152\u7ae5\u9580\u7968", "\u958b\u653e\u6642\u9593", "\u6210\u4eba\u9580\u7968"], ["\u5152\u7ae5\u9580\u7968", "\u6210\u4eba\u9580\u7968", "\u958b\u653e\u6642\u9593"], ["\u6210\u4eba\u9580\u7968", "\u958b\u653e\u6642\u9593", "\u5152\u7ae5\u9580\u7968"], ["\u6210\u4eba\u9580\u7968", "\u5152\u7ae5\u9580\u7968", "\u958b\u653e\u6642\u9593"]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_39", "question": "\u5c0b\u627e\u83ef\u76db\u9813\u7279\u5340\u7684\u570b\u5bb6\u535a\u7269\u9928\u548c\u5df4\u9ece\u7684\u7f85\u6d6e\u5bae\u535a\u7269\u9928\u7684\u958b\u653e\u6642\u9593\u548c\u6210\u4eba\u9580\u7968\u53ca\u5152\u7ae5\u9580\u7968\u3002", "function": {"name": "museum_info.get_info", "description": "Retrieve specific details about museums, such as opening hours and ticket prices.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City where the museum is located."}, "details": {"type": "array", "items": {"type": "string", "enum": ["Opening hours", "Adult tickets", "Child tickets"]}, "description": "List of details to retrieve about the museum."}}, "required": ["location", "details"]}}}, "model_result_raw": "museum_info.get_info(location='\u83ef\u76db\u9813\u7279\u5340', details=['Opening hours', 'Adult tickets']), museum_info.get_info(location='\u5df4\u9ece', details=['Opening hours', 'Adult tickets', 'Child tickets'])", "model_result_decoded": [{"museum_info.get_info": {"location": "\u83ef\u76db\u9813\u7279\u5340", "details": ["Opening hours", "Adult tickets"]}}, {"museum_info.get_info": {"location": "\u5df4\u9ece", "details": ["Opening hours", "Adult tickets", "Child tickets"]}}], "possible_answer": {"museum_info.get_info 1": {"location": ["Washington D.C.", "Washington DC", "\u83ef\u76db\u9813\u7279\u5340"], "details": [["Opening hours", "Adult tickets", "Child tickets"], ["Opening hours", "Child tickets", "Adult tickets"], ["Child tickets", "Opening hours", "Adult tickets"], ["Child tickets", "Adult tickets", "Opening hours"], ["Adult tickets", "Opening hours", "Child tickets"], ["Adult tickets", "Child tickets", "Opening hours"], ["\u958b\u653e\u6642\u9593", "\u6210\u4eba\u9580\u7968", "\u5152\u7ae5\u9580\u7968"], ["\u958b\u653e\u6642\u9593", "\u5152\u7ae5\u9580\u7968", "\u6210\u4eba\u9580\u7968"], ["\u5152\u7ae5\u9580\u7968", "\u958b\u653e\u6642\u9593", "\u6210\u4eba\u9580\u7968"], ["\u5152\u7ae5\u9580\u7968", "\u6210\u4eba\u9580\u7968", "\u958b\u653e\u6642\u9593"], ["\u6210\u4eba\u9580\u7968", "\u958b\u653e\u6642\u9593", "\u5152\u7ae5\u9580\u7968"], ["\u6210\u4eba\u9580\u7968", "\u5152\u7ae5\u9580\u7968", "\u958b\u653e\u6642\u9593"]]}, "museum_info.get_info 2": {"location": ["Paris", "\u5df4\u9ece"], "details": [["Opening hours", "Adult tickets", "Child tickets"], ["Opening hours", "Child tickets", "Adult tickets"], ["Child tickets", "Opening hours", "Adult tickets"], ["Child tickets", "Adult tickets", "Opening hours"], ["Adult tickets", "Opening hours", "Child tickets"], ["Adult tickets", "Child tickets", "Opening hours"], ["\u958b\u653e\u6642\u9593", "\u6210\u4eba\u9580\u7968", "\u5152\u7ae5\u9580\u7968"], ["\u958b\u653e\u6642\u9593", "\u5152\u7ae5\u9580\u7968", "\u6210\u4eba\u9580\u7968"], ["\u5152\u7ae5\u9580\u7968", "\u958b\u653e\u6642\u9593", "\u6210\u4eba\u9580\u7968"], ["\u5152\u7ae5\u9580\u7968", "\u6210\u4eba\u9580\u7968", "\u958b\u653e\u6642\u9593"], ["\u6210\u4eba\u9580\u7968", "\u958b\u653e\u6642\u9593", "\u5152\u7ae5\u9580\u7968"], ["\u6210\u4eba\u9580\u7968", "\u5152\u7ae5\u9580\u7968", "\u958b\u653e\u6642\u9593"]]}}}
{"id": 42, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_41", "question": "\u8acb\u7d66\u6211\u770b\u6700\u63a5\u8fd1\u7684\u97f3\u6a02\u5e97\uff0c\u5728\u52a0\u5dde\u820a\u91d1\u5c71\u548c\u4f0a\u5229\u8afe\u5dde\u829d\u52a0\u54e5\uff0c\u6211\u53ef\u4ee5\u8cfc\u8cb7Yamaha acoustic guitar\u548cKawai piano\u3002", "function": {"name": "find_music_instrument_store", "description": "Locate nearby music instrument stores that sell specific brands or instruments", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state e.g. San Francisco, CA."}, "instruments": {"type": "array", "items": {"type": "string"}, "description": "A list of specific instruments or brands you are looking for."}}, "required": ["location", "instruments"]}}}, "model_result_raw": "find_music_instrument_store(location='San Francisco, CA', instruments=['Yamaha acoustic guitar', 'Kawai piano'])", "model_result_decoded": [{"find_music_instrument_store": {"location": "San Francisco, CA", "instruments": ["Yamaha acoustic guitar", "Kawai piano"]}}], "possible_answer": {"find_music_instrument_store_1": {"location": ["San Francisco, CA", "San Francisco, CA", "San Francisco, California", "\u52a0\u5dde\u820a\u91d1\u5c71"], "instruments": [["Yamaha Acoustic Guitar", "Kawai Piano"], ["Kawai Piano", "Yamaha Acoustic Guitar"], ["Yamaha acoustic guitar", "Kawai piano"], ["Kawai piano", "Yamaha acoustic guitar"]]}, "find_music_instrument_store_2": {"location": ["Chicago, IL", "Chicago, Illinois", "Chicago, IL.", "\u4f0a\u5229\u8afe\u5dde\u829d\u52a0\u54e5"], "instruments": [["Yamaha Acoustic Guitar", "Kawai Piano"], ["Kawai Piano", "Yamaha Acoustic Guitar"], ["Yamaha acoustic guitar", "Kawai piano"], ["Kawai piano", "Yamaha acoustic guitar"]]}}}
{"id": 44, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_43", "question": "\u4f60\u80fd\u5e6b\u6211\u627e\u5230\u63a5\u4e0b\u4f86\u4e00\u500b\u6708\u5728\u52a0\u5dde\u820a\u91d1\u5c71\u548c\u7d10\u7d04\u7684\u6416\u6efe\u548c\u7235\u58eb\u97f3\u6a02\u6703\u55ce\uff1f", "function": {"name": "concert_finder", "description": "Locate upcoming concerts based on music genre in specified city and state.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state to find concerts."}, "music_genre": {"type": "string", "description": "Music genre of the concerts."}, "time_period": {"type": "integer", "description": "Number of days to search upcoming concerts.", "default": 30}}, "required": ["location", "music_genre"]}}}, "model_result_raw": "concert_finder(location='San Francisco, CA', music_genre='rock'), concert_finder(location='New York, NY', music_genre='jazz')", "model_result_decoded": [{"concert_finder": {"location": "San Francisco, CA", "music_genre": "rock"}}, {"concert_finder": {"location": "New York, NY", "music_genre": "jazz"}}], "possible_answer": {"concert_finder_1": {"location": ["San Francisco, California", "San Francisco, CA", "SF, California", "SF, CA", "\u52a0\u5dde\u820a\u91d1\u5c71", "\u820a\u91d1\u5c71", "\u820a\u91d1\u5c71, \u52a0\u5dde"], "music_genre": ["rock", "\u6416\u6efe"], "time_period": [30, ""]}, "concert_finder_2": {"location": ["San Francisco, California", "San Francisco, CA", "SF, California", "SF, CA", "\u52a0\u5dde\u820a\u91d1\u5c71", "\u820a\u91d1\u5c71", "\u820a\u91d1\u5c71, \u52a0\u5dde"], "music_genre": ["jazz", "\u7235\u58eb"], "time_period": [30, ""]}, "concert_finder_3": {"location": ["New York, New York", "New York, NY", "NYC", "NY, NY", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "music_genre": ["rock", "\u6416\u6efe"], "time_period": [30, ""]}, "concert_finder_4": {"location": ["New York, New York", "New York, NY", "NYC", "NY, NY", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "music_genre": ["jazz", "\u7235\u58eb"], "time_period": [30, ""]}}}
{"id": 45, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_44", "question": "\u8acb\u5e6b\u6211\u627e\u51fa\u4e0b\u9031\u4e94\u5728\u67cf\u6797\u548c\u5df4\u9ece\u9644\u8fd1\u7684\u6240\u6709\u53e4\u5178\u97f3\u6a02\u6703\uff0c\u6211\u53ea\u5c0d\u6709\u505c\u8eca\u4f4d\u7684\u97f3\u6a02\u6703\u611f\u8208\u8da3\u3002", "function": {"name": "concert.find_nearby", "description": "Locate nearby concerts based on specific criteria like genre and availability of parking.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the user wants to find a concert."}, "date": {"type": "string", "description": "The date on which the user wants to attend a concert."}, "genre": {"type": "string", "description": "The genre of music of the concert."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Parking", "Food and Beverages", "VIP Seating", "Disability Access"]}, "description": "Amenities preferred at the concert.", "default": ["Parking"]}}, "required": ["location", "date", "genre"]}}}, "model_result_raw": "concert.find_nearby(location='Berlin', date='2023-04-21', genre='Classical', amenities=['Parking'])", "model_result_decoded": [{"concert.find_nearby": {"location": "Berlin", "date": "2023-04-21", "genre": "Classical", "amenities": ["Parking"]}}], "possible_answer": {"concert.find_nearby_1": {"location": ["Berlin", "\u67cf\u6797"], "date": ["next Friday", "\u4e0b\u9031\u4e94"], "genre": ["Classical", "classical", "\u53e4\u5178"], "amenities": [["Parking"], "", ["\u505c\u8eca\u4f4d"], ["\u6709\u505c\u8eca\u4f4d"]]}, "concert.find_nearby_2": {"location": ["Paris", "\u5df4\u9ece"], "genre": ["Classical", "classical", "\u53e4\u5178"], "amenities": [["Parking"], "", ["\u505c\u8eca\u4f4d"], ["\u6709\u505c\u8eca\u4f4d"]]}}}
{"id": 46, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_45", "question": "\u76ee\u524d\u6700\u53d7\u6b61\u8fce\u7684\u6d41\u884c\u6b4c\u66f2\u662f\u4ec0\u9ebc\uff1f\u9084\u8acb\u5e6b\u6211\u627e\u51fa\u6fb3\u6d32\u76ee\u524d\u6700\u53d7\u6b61\u8fce\u7684\u6416\u6efe\u6b4c\u66f2\u3002", "function": {"name": "musicCharts.getMostPlayed", "description": "This function retrieves the most played song in a particular genre from a specified region", "parameters": {"type": "dict", "properties": {"genre": {"type": "string", "description": "Music genre e.g., Rock, Pop, HipHop etc."}, "region": {"type": "string", "description": "Region where the song popularity is to be checked"}, "duration": {"type": "integer", "description": "Time duration in hours for which the music played count will be considered. default is 0"}}, "required": ["genre", "region"]}}}, "model_result_raw": "musicCharts.getMostPlayed(genre='Pop', region='Australia')", "model_result_decoded": [{"musicCharts.getMostPlayed": {"genre": "Pop", "region": "Australia"}}], "possible_answer": {"musicCharts.getMostPlayed_1": {"genre": ["Pop", "\u6d41\u884c\u6b4c\u66f2", "\u6d41\u884c"], "region": ["Australia", "AU", "\u6fb3\u6d32"], "duration": ["", 0]}, "musicCharts.getMostPlayed_2": {"genre": ["Rock", "\u6416\u6efe\u6b4c\u66f2", "\u6416\u6efe"], "region": ["Australia", "AU", "\u6fb3\u6d32"], "duration": ["", 0]}}}
{"id": 52, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [1] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Optional parameter 'diet' not provided and not marked as optional."], "sub_error_type": "simple_function_checker:missing_optional", "model_output_item": {"recipe_search.find": {"dish": "\u7d14\u7d20\u6c99\u62c9"}}, "possible_answer_item": {"recipe_search.find_2": {"dish": ["Salad", "salad", "Vegan Salad", "vegan salad", "\u7d14\u7d20\u6c99\u62c9", "\u6c99\u62c9"], "diet": ["Vegan", "\u7d14\u7d20", "\u7d20"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_51", "question": "\u641c\u5c0b\u96de\u6e6f\u9eb5\u98df\u8b5c\u548c\u7d14\u7d20\u6c99\u62c9\u98df\u8b5c\u3002", "function": {"name": "recipe_search.find", "description": "Locate recipes based on the type of dish.", "parameters": {"type": "dict", "properties": {"dish": {"type": "string", "description": "The name of the dish to search for."}, "diet": {"type": "string", "enum": ["Vegan", "Vegetarian", "Paleo", "Keto"], "description": "Dietary preference.", "default": "Keto"}}, "required": ["dish"]}}}, "model_result_raw": "recipe_search.find(dish='\u96de\u6e6f\u9eb5'), recipe_search.find(dish='\u7d14\u7d20\u6c99\u62c9')", "model_result_decoded": [{"recipe_search.find": {"dish": "\u96de\u6e6f\u9eb5"}}, {"recipe_search.find": {"dish": "\u7d14\u7d20\u6c99\u62c9"}}], "possible_answer": {"recipe_search.find_1": {"dish": ["Chicken Noodle Soup", "\u96de\u6e6f\u9eb5"], "diet": ["", "Keto"]}, "recipe_search.find_2": {"dish": ["Salad", "salad", "Vegan Salad", "vegan salad", "\u7d14\u7d20\u6c99\u62c9", "\u6c99\u62c9"], "diet": ["Vegan", "\u7d14\u7d20", "\u7d20"]}}}
{"id": 53, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [1] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'cuisine': 'Sushi'. Expected one of ['Japanese', '\u65e5\u672c', '\u65e5\u5f0f']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"restaurant_finder": {"location": "Los Angeles, CA", "cuisine": "Sushi", "preferences": ["Delivery"]}}, "possible_answer_item": {"restaurant_finder_2": {"location": ["Los Angeles", "Los Angeles, CA", "LA", "L.A.", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef"], "cuisine": ["Japanese", "\u65e5\u672c", "\u65e5\u5f0f"], "preferences": [["Delivery"], "", ["\u5916\u9001\u670d\u52d9"], ["\u5916\u9001"]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_52", "question": "\u5c0b\u627e\u7d10\u7d04\u9644\u8fd1\u63d0\u4f9b\u7d20\u98df\u9078\u9805\u7684\u7fa9\u5927\u5229\u9910\u5ef3\uff0c\u4ee5\u53ca\u6d1b\u6749\u78ef\u63d0\u4f9b\u5916\u9001\u670d\u52d9\u7684\u65e5\u672c\u58fd\u53f8\u9910\u5ef3\u3002", "function": {"name": "restaurant_finder", "description": "Search for restaurants based on location, cuisine type and other preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state, e.g. New York, NY."}, "cuisine": {"type": "string", "description": "Type of cuisine the user is interested in, e.g. Italian, Japanese etc."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["Vegetarian", "Delivery", "Vegan", "Takeout"]}, "description": "Extra features in the restaurant. default is ['Delivery']."}}, "required": ["location", "cuisine"]}}}, "model_result_raw": "restaurant_finder(location='New York, NY', cuisine='Italian', preferences=['Vegetarian']), restaurant_finder(location='Los Angeles, CA', cuisine='Sushi', preferences=['Delivery'])", "model_result_decoded": [{"restaurant_finder": {"location": "New York, NY", "cuisine": "Italian", "preferences": ["Vegetarian"]}}, {"restaurant_finder": {"location": "Los Angeles, CA", "cuisine": "Sushi", "preferences": ["Delivery"]}}], "possible_answer": {"restaurant_finder_1": {"location": ["New York", "New York, NY", "New York City", "NYC", "NY", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "cuisine": ["Italian", "\u7fa9\u5927\u5229", "\u7fa9\u5f0f"], "preferences": [["Vegetarian"], ["\u7d20\u98df\u9078\u9805"], ["\u7d20\u98df"]]}, "restaurant_finder_2": {"location": ["Los Angeles", "Los Angeles, CA", "LA", "L.A.", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef"], "cuisine": ["Japanese", "\u65e5\u672c", "\u65e5\u5f0f"], "preferences": [["Delivery"], "", ["\u5916\u9001\u670d\u52d9"], ["\u5916\u9001"]]}}}
{"id": 55, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'location': '\u5e02\u4e2d\u5fc3\u7684\u5168\u98df\u8d85\u5e02'. Expected one of ['downtown', 'Downtown', '\u5e02\u4e2d\u5fc3']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"whole_foods.order": {"location": "\u5e02\u4e2d\u5fc3\u7684\u5168\u98df\u8d85\u5e02", "items": ["\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9", "\u96de\u8089\u51f1\u6492\u6c99\u62c9"], "size": "large"}}, "possible_answer_item": {"whole_foods.order_1": {"location": ["downtown", "Downtown", "\u5e02\u4e2d\u5fc3"], "items": [["pepperoni pizza", "chicken Caesar salad"], ["chicken Caesar salad", "pepperoni pizza"], ["\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9", "\u96de\u8089\u51f1\u6492\u6c99\u62c9"], ["\u96de\u8089\u51f1\u6492\u6c99\u62c9", "\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9"]], "size": ["large", "\u5927\u578b", "\u5927"]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'location': '\u5e02\u90ca\u7684\u5168\u98df\u8d85\u5e02'. Expected one of ['downtown', 'Downtown', '\u5e02\u4e2d\u5fc3']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"whole_foods.order": {"location": "\u5e02\u90ca\u7684\u5168\u98df\u8d85\u5e02", "items": ["\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9", "\u96de\u8089\u51f1\u6492\u6c99\u62c9"], "size": "large"}}, "possible_answer_item": {"whole_foods.order_1": {"location": ["downtown", "Downtown", "\u5e02\u4e2d\u5fc3"], "items": [["pepperoni pizza", "chicken Caesar salad"], ["chicken Caesar salad", "pepperoni pizza"], ["\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9", "\u96de\u8089\u51f1\u6492\u6c99\u62c9"], ["\u96de\u8089\u51f1\u6492\u6c99\u62c9", "\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9"]], "size": ["large", "\u5927\u578b", "\u5927"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_54", "question": "\u6211\u60f3\u8981\u5728\u5e02\u4e2d\u5fc3\u7684\u5168\u98df\u8d85\u5e02\u8a02\u8cfc\u4e00\u4efd\u5927\u578b\u7684\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9\u548c\u4e00\u4efd\u96de\u8089\u51f1\u6492\u6c99\u62c9\uff0c\u7136\u5f8c\u518d\u5728\u5e02\u90ca\u8a02\u8cfc\u540c\u6a23\u7684\u9910\u9ede\u3002", "function": {"name": "whole_foods.order", "description": "Order food from Whole Foods", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of Whole Foods."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "size": {"type": "string", "description": "Size of the order.", "enum": ["small", "medium", "large"]}}, "required": ["location", "items", "size"]}}}, "model_result_raw": "whole_foods.order(location='\u5e02\u4e2d\u5fc3\u7684\u5168\u98df\u8d85\u5e02', items=['\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9', '\u96de\u8089\u51f1\u6492\u6c99\u62c9'], size='large'), whole_foods.order(location='\u5e02\u90ca\u7684\u5168\u98df\u8d85\u5e02', items=['\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9', '\u96de\u8089\u51f1\u6492\u6c99\u62c9'], size='large')", "model_result_decoded": [{"whole_foods.order": {"location": "\u5e02\u4e2d\u5fc3\u7684\u5168\u98df\u8d85\u5e02", "items": ["\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9", "\u96de\u8089\u51f1\u6492\u6c99\u62c9"], "size": "large"}}, {"whole_foods.order": {"location": "\u5e02\u90ca\u7684\u5168\u98df\u8d85\u5e02", "items": ["\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9", "\u96de\u8089\u51f1\u6492\u6c99\u62c9"], "size": "large"}}], "possible_answer": {"whole_foods.order_1": {"location": ["downtown", "Downtown", "\u5e02\u4e2d\u5fc3"], "items": [["pepperoni pizza", "chicken Caesar salad"], ["chicken Caesar salad", "pepperoni pizza"], ["\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9", "\u96de\u8089\u51f1\u6492\u6c99\u62c9"], ["\u96de\u8089\u51f1\u6492\u6c99\u62c9", "\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9"]], "size": ["large", "\u5927\u578b", "\u5927"]}, "whole_foods.order_2": {"location": ["uptown", "Uptown", "\u5e02\u90ca"], "items": [["pepperoni pizza", "chicken Caesar salad"], ["chicken Caesar salad", "pepperoni pizza"], ["\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9", "\u96de\u8089\u51f1\u6492\u6c99\u62c9"], ["\u96de\u8089\u51f1\u6492\u6c99\u62c9", "\u7fa9\u5f0f\u81d8\u8178\u62ab\u85a9"]], "size": ["large", "\u5927\u578b", "\u5927"]}}}
{"id": 57, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'hotel_name': 'Queen Hotel'. Expected one of ['Queens Hotel', '\u7687\u540e\u98ef\u5e97']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"hotel_booking.check_availability": {"hotel_name": "Queen Hotel", "location": "Berlin", "check_in_date": "2022-03-10", "check_out_date": "2022-03-20"}}, "possible_answer_item": {"hotel_booking.check_availability_1": {"hotel_name": ["Queens Hotel", "\u7687\u540e\u98ef\u5e97"], "location": ["Berlin, Germany", "\u5fb7\u570b\u67cf\u6797"], "check_in_date": ["2022-03-10", "03/10/2022", "Mar.10,2022", "2022\u5e743\u670810\u65e5"], "check_out_date": ["2022-03-20", "03/20/2022", "Mar.20,2022", "2022\u5e743\u670820\u65e5"]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'hotel_name': 'Royal Hotel'. Expected one of ['Queens Hotel', '\u7687\u540e\u98ef\u5e97']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"hotel_booking.check_availability": {"hotel_name": "Royal Hotel", "location": "Paris", "check_in_date": "2022-04-05", "check_out_date": "2022-04-15"}}, "possible_answer_item": {"hotel_booking.check_availability_1": {"hotel_name": ["Queens Hotel", "\u7687\u540e\u98ef\u5e97"], "location": ["Berlin, Germany", "\u5fb7\u570b\u67cf\u6797"], "check_in_date": ["2022-03-10", "03/10/2022", "Mar.10,2022", "2022\u5e743\u670810\u65e5"], "check_out_date": ["2022-03-20", "03/20/2022", "Mar.20,2022", "2022\u5e743\u670820\u65e5"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_56", "question": "\u8acb\u67e5\u8a622022\u5e743\u670810\u65e5\u81f33\u670820\u65e5\u5fb7\u570b\u67cf\u6797\u7684\u7687\u540e\u98ef\u5e97\u548c2022\u5e744\u67085\u65e5\u81f34\u670815\u65e5\u6cd5\u570b\u5df4\u9ece\u7684\u7687\u5bb6\u98ef\u5e97\u7684\u5ba2\u623f\u4f9b\u61c9\u72c0\u6cc1\u3002", "function": {"name": "hotel_booking.check_availability", "description": "Check room availability for a particular hotel for given dates.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "check_in_date": {"type": "string", "description": "The check-in date in YYYY-MM-DD format."}, "check_out_date": {"type": "string", "description": "The check-out date in YYYY-MM-DD format."}}, "required": ["hotel_name", "location", "check_in_date", "check_out_date"]}}}, "model_result_raw": "hotel_booking.check_availability(hotel_name='Queen Hotel', location='Berlin', check_in_date='2022-03-10', check_out_date='2022-03-20'), hotel_booking.check_availability(hotel_name='Royal Hotel', location='Paris', check_in_date='2022-04-05', check_out_date='2022-04-15')", "model_result_decoded": [{"hotel_booking.check_availability": {"hotel_name": "Queen Hotel", "location": "Berlin", "check_in_date": "2022-03-10", "check_out_date": "2022-03-20"}}, {"hotel_booking.check_availability": {"hotel_name": "Royal Hotel", "location": "Paris", "check_in_date": "2022-04-05", "check_out_date": "2022-04-15"}}], "possible_answer": {"hotel_booking.check_availability_1": {"hotel_name": ["Queens Hotel", "\u7687\u540e\u98ef\u5e97"], "location": ["Berlin, Germany", "\u5fb7\u570b\u67cf\u6797"], "check_in_date": ["2022-03-10", "03/10/2022", "Mar.10,2022", "2022\u5e743\u670810\u65e5"], "check_out_date": ["2022-03-20", "03/20/2022", "Mar.20,2022", "2022\u5e743\u670820\u65e5"]}, "hotel_booking.check_availability_2": {"hotel_name": ["Royal Hotel", "\u7687\u5bb6\u98ef\u5e97"], "location": ["Paris, France", "\u6cd5\u570b\u5df4\u9ece"], "check_in_date": ["2022-04-05", "04/05/2022", "Apr.5,2022", "2022\u5e744\u67085\u65e5"], "check_out_date": ["2022-04-15", "04/15/2022", "Apr.15,2022", "2022\u5e744\u670815\u65e5"]}}}
{"id": 69, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Optional parameter 'unit' not provided and not marked as optional."], "sub_error_type": "simple_function_checker:missing_optional", "model_output_item": {"calculate_area": {"base": 12, "height": 15}}, "possible_answer_item": {"calculate_area_1": {"base": [12], "height": [15], "unit": ["m", "meters", "meter", "\u516c\u5c3a"]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'base': 18. Expected one of [12]."], "sub_error_type": "value_error:others", "model_output_item": {"calculate_area": {"base": 18, "height": 24}}, "possible_answer_item": {"calculate_area_1": {"base": [12], "height": [15], "unit": ["m", "meters", "meter", "\u516c\u5c3a"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_68", "question": "\u7d04\u7ff0\u6b63\u5728\u4e00\u500b\u5c08\u6848\u4e0a\u5de5\u4f5c\uff0c\u4ed6\u9700\u8981\u8a08\u7b97\u5169\u500b\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u9762\u7a4d\u3002\u7b2c\u4e00\u500b\u4e09\u89d2\u5f62\u7684\u5e95\u908a\u9577\u70ba12\u516c\u5c3a\uff0c\u9ad8\u5ea6\u70ba15\u516c\u5c3a\u3002\u7b2c\u4e8c\u500b\u4e09\u89d2\u5f62\u7684\u5e95\u908a\u9577\u70ba18\u516c\u5c3a\uff0c\u9ad8\u5ea6\u70ba24\u516c\u5c3a\u3002\u4ed6\u60f3\u77e5\u9053\u9019\u5169\u500b\u4e09\u89d2\u5f62\u7684\u7e3d\u9762\u7a4d\u662f\u591a\u5c11\u5e73\u65b9\u516c\u5c3a\u3002\u4f60\u80fd\u5e6b\u4ed6\u8a08\u7b97\u55ce\uff1f", "function": {"name": "calculate_area", "description": "Calculate the area of a right-angled triangle given the lengths of its base and height.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The length of the base of the right-angled triangle."}, "height": {"type": "integer", "description": "The height of the right-angled triangle."}, "unit": {"type": "string", "description": "The unit of measure used. Defaults to cm.", "default": "cm"}}, "required": ["base", "height"]}}}, "model_result_raw": "calculate_area(base=12, height=15), calculate_area(base=18, height=24)", "model_result_decoded": [{"calculate_area": {"base": 12, "height": 15}}, {"calculate_area": {"base": 18, "height": 24}}], "possible_answer": {"calculate_area_1": {"base": [12], "height": [15], "unit": ["m", "meters", "meter", "\u516c\u5c3a"]}, "calculate_area_2": {"base": [18], "height": [24], "unit": ["m", "meters", "meter", "\u516c\u5c3a"]}}}
{"id": 72, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [1] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'function': '3x^3 - 2x^2 + 5x - 7'. Expected one of ['9x**2 - 4x + 5', 'lambda x: 9x**2 - 4x + 5', '9*x**2 - 4*x + 5']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"calculate_derivative": {"function": "3x^3 - 2x^2 + 5x - 7", "x_value": 2}}, "possible_answer_item": {"calculate_derivative_2": {"function": ["9x**2 - 4x + 5", "lambda x: 9x**2 - 4x + 5", "9*x**2 - 4*x + 5"], "x_value": [2]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_71", "question": "\"\u4f60\u80fd\u8a08\u7b97\u591a\u9805\u5f0f\u51fd\u6578 '3x^3 - 2x^2 + 5x - 7' \u7684\u5c0e\u6578\uff0c\u4e26\u5728x=4\u6642\u8a55\u4f30\u9019\u500b\u5c0e\u6578\u55ce\uff1f\u63a5\u4e0b\u4f86\uff0c\u4f60\u53ef\u4ee5\u628a\u7522\u751f\u7684\u7d50\u679c\u51fd\u6578\u518d\u8a08\u7b97\u4e00\u6b21\u5c0e\u6578\u4e26\u5728x=2\u6642\u8a55\u4f30\u55ce\uff1f\"", "function": {"name": "calculate_derivative", "description": "Calculate the derivative of a polynomial function.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The polynomial function."}, "x_value": {"type": "integer", "description": "The x-value at which the derivative is calculated. Optional, if not given, the function will return a function of the derivative instead of a specific value. default is 0."}}, "required": ["function"]}}}, "model_result_raw": "calculate_derivative(function='3x^3 - 2x^2 + 5x - 7', x_value=4), calculate_derivative(function='3x^3 - 2x^2 + 5x - 7', x_value=2)", "model_result_decoded": [{"calculate_derivative": {"function": "3x^3 - 2x^2 + 5x - 7", "x_value": 4}}, {"calculate_derivative": {"function": "3x^3 - 2x^2 + 5x - 7", "x_value": 2}}], "possible_answer": {"calculate_derivative_1": {"function": ["3x**3 - 2x**2 + 5x - 7", "lambda x: 3x**3 - 2x**2 + 5x - 7", "3*x**3 - 2*x**2 + 5*x - 7"], "x_value": [4]}, "calculate_derivative_2": {"function": ["9x**2 - 4x + 5", "lambda x: 9x**2 - 4x + 5", "9*x**2 - 4*x + 5"], "x_value": [2]}}}
{"id": 75, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_74", "question": "\u8acb\u554f4567\u548c7890\u9019\u5169\u500b\u6578\u5b57\u7684\u8cea\u56e0\u6578\u662f\u4ec0\u9ebc\uff1f\u80fd\u5426\u63d0\u4f9b\u683c\u5f0f\u5316\u7684\u5b57\u4e32\u548c\u9663\u5217\u5f62\u5f0f\uff1f", "function": {"name": "get_prime_factors", "description": "Function to retrieve prime factors of a number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "Number for which prime factors need to be calculated"}, "formatted": {"type": "boolean", "description": "Return formatted string if true, array if false"}}, "required": ["number", "formatted"]}}}, "model_result_raw": "get_prime_factors(number=4567, formatted=True), get_prime_factors(number=7890, formatted=True)", "model_result_decoded": [{"get_prime_factors": {"number": 4567, "formatted": true}}, {"get_prime_factors": {"number": 7890, "formatted": true}}], "possible_answer": {"get_prime_factors_1": {"number": [4567], "formatted": [true]}, "get_prime_factors_2": {"number": [4567], "formatted": [false]}, "get_prime_factors_3": {"number": [7890], "formatted": [true]}, "get_prime_factors_4": {"number": [7890], "formatted": [false]}}}
{"id": 85, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_84", "question": "\u4e00\u8f1b\u6c7d\u8eca\u5f9e\u975c\u6b62\u958b\u59cb\uff0c\u5747\u52fb\u52a0\u901f5.2\u79d2\uff0c\u884c\u99db110\u516c\u5c3a\u3002\u6c42\u51fa\u6c7d\u8eca\u7684\u52a0\u901f\u5ea6\u3002\u7136\u5f8c\uff0c\u53e6\u4e00\u8f1b\u6c7d\u8eca\u7684\u521d\u59cb\u901f\u5ea6\u70ba15\u516c\u5c3a/\u79d2\uff0c\u52a0\u901f\u5ea6\u70ba3.5\u516c\u5c3a/\u79d2^2\uff0c\u884c\u99db7\u79d2\u3002\u7b2c\u4e8c\u8f1b\u6c7d\u8eca\u7684\u4f4d\u79fb\u662f\u591a\u5c11\uff1f\u73fe\u5728\uff0c\u8003\u616e\u4e00\u8f1b\u521d\u59cb\u901f\u5ea6\u70ba20\u516c\u5c3a/\u79d2\uff0c\u52a0\u901f\u5ea6\u70ba2\u516c\u5c3a/\u79d2^2\uff0c\u884c\u99db10\u79d2\u7684\u7b2c\u4e09\u8f1b\u6c7d\u8eca\u3002\u7b2c\u4e09\u8f1b\u6c7d\u8eca\u7684\u4f4d\u79fb\u662f\u591a\u5c11\uff1f\u6700\u5f8c\uff0c\u4e00\u8f1b\u521d\u59cb\u901f\u5ea6\u70ba25\u516c\u5c3a/\u79d2\u7684\u7b2c\u56db\u8f1b\u6c7d\u8eca\u5728\u6c92\u6709\u4efb\u4f55\u52a0\u901f\u7684\u60c5\u6cc1\u4e0b\u884c\u99db8\u79d2\u3002\u7b2c\u56db\u8f1b\u6c7d\u8eca\u7684\u4f4d\u79fb\u662f\u591a\u5c11\uff1f", "function": {"name": "calculate_displacement", "description": "Calculates the displacement of an object in motion given initial velocity, time, and acceleration.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "integer", "description": "The initial velocity of the object in m/s."}, "time": {"type": "integer", "description": "The time in seconds that the object has been in motion."}, "acceleration": {"type": "float", "description": "The acceleration of the object in m/s^2.", "default": 0}}, "required": ["initial_velocity", "time"]}}}, "model_result_raw": "calculate_displacement(initial_velocity=0, time=5.2, acceleration=110/5.2), calculate_displacement(initial_velocity=15, time=7, acceleration=3.5), calculate_displacement(initial_velocity=20, time=10, acceleration=2), calculate_displacement(initial_velocity=25, time=8, acceleration=0)", "model_result_decoded": [{"calculate_displacement": {"initial_velocity": 0, "time": 5.2, "acceleration": 21.153846153846153}}, {"calculate_displacement": {"initial_velocity": 15, "time": 7, "acceleration": 3.5}}, {"calculate_displacement": {"initial_velocity": 20, "time": 10, "acceleration": 2}}, {"calculate_displacement": {"initial_velocity": 25, "time": 8, "acceleration": 0}}], "possible_answer": {"calculate_displacement_1": {"initial_velocity": [15], "time": [7], "acceleration": [3.5]}, "calculate_displacement_2": {"initial_velocity": [20], "time": [10], "acceleration": [2]}, "calculate_displacement_3": {"initial_velocity": [25], "time": [8], "acceleration": [0]}}}
{"id": 90, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'start_location': '\u820a\u91d1\u5c71\u5bb6\u88e1'. Expected one of ['San Francisco', 'SF', '\u820a\u91d1\u5c71']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"get_directions": {"start_location": "\u820a\u91d1\u5c71\u5bb6\u88e1", "end_location": "\u5e15\u7f85\u5967\u5716\u8fa6\u516c\u5ba4", "route_type": "fastest"}}, "possible_answer_item": {"get_directions 1": {"start_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "end_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "route_type": ["fastest", "\u6700\u5feb"]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'start_location': '\u5e15\u7f85\u5967\u5716\u8fa6\u516c\u5ba4'. Expected one of ['San Francisco', 'SF', '\u820a\u91d1\u5c71']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"get_directions": {"start_location": "\u5e15\u7f85\u5967\u5716\u8fa6\u516c\u5ba4", "end_location": "\u91d1\u9580\u5927\u6a4b", "route_type": "scenic"}}, "possible_answer_item": {"get_directions 1": {"start_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "end_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "route_type": ["fastest", "\u6700\u5feb"]}}}}, {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'start_location': '\u91d1\u9580\u5927\u6a4b'. Expected one of ['San Francisco', 'SF', '\u820a\u91d1\u5c71']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"get_directions": {"start_location": "\u91d1\u9580\u5927\u6a4b", "end_location": "\u820a\u91d1\u5c71\u5bb6\u88e1", "route_type": "fastest"}}, "possible_answer_item": {"get_directions 1": {"start_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "end_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "route_type": ["fastest", "\u6700\u5feb"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_89", "question": "\u4f60\u80fd\u7d66\u6211\u5f9e\u820a\u91d1\u5c71\u5bb6\u88e1\u5230\u5e15\u7f85\u5967\u5716\u8fa6\u516c\u5ba4\u6700\u5feb\u7684\u8def\u7dda\uff0c\u7136\u5f8c\u5f9e\u5e15\u7f85\u5967\u5716\u5230\u820a\u91d1\u5c71\u91d1\u9580\u5927\u6a4b\u7684\u98a8\u666f\u8def\u7dda\uff0c\u6700\u5f8c\u5f9e\u91d1\u9580\u5927\u6a4b\u56de\u5bb6\u6700\u5feb\u7684\u8def\u7dda\u55ce\uff1f", "function": {"name": "get_directions", "description": "Retrieve directions from one location to another.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point of the journey."}, "end_location": {"type": "string", "description": "The destination point of the journey."}, "route_type": {"type": "string", "description": "Type of route to use (e.g., fastest, scenic). Default is fastest.", "enum": ["fastest", "scenic"]}}, "required": ["start_location", "end_location"]}}}, "model_result_raw": "get_directions(start_location='\u820a\u91d1\u5c71\u5bb6\u88e1', end_location='\u5e15\u7f85\u5967\u5716\u8fa6\u516c\u5ba4', route_type='fastest'), get_directions(start_location='\u5e15\u7f85\u5967\u5716\u8fa6\u516c\u5ba4', end_location='\u91d1\u9580\u5927\u6a4b', route_type='scenic'), get_directions(start_location='\u91d1\u9580\u5927\u6a4b', end_location='\u820a\u91d1\u5c71\u5bb6\u88e1', route_type='fastest')", "model_result_decoded": [{"get_directions": {"start_location": "\u820a\u91d1\u5c71\u5bb6\u88e1", "end_location": "\u5e15\u7f85\u5967\u5716\u8fa6\u516c\u5ba4", "route_type": "fastest"}}, {"get_directions": {"start_location": "\u5e15\u7f85\u5967\u5716\u8fa6\u516c\u5ba4", "end_location": "\u91d1\u9580\u5927\u6a4b", "route_type": "scenic"}}, {"get_directions": {"start_location": "\u91d1\u9580\u5927\u6a4b", "end_location": "\u820a\u91d1\u5c71\u5bb6\u88e1", "route_type": "fastest"}}], "possible_answer": {"get_directions 1": {"start_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "end_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "route_type": ["fastest", "\u6700\u5feb"]}, "get_directions 2": {"start_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "end_location": ["Golden Gate Bridge in San Francisco", "Golden Gate Bridge, San Francisco", "Golden Gate Bridge", "\u820a\u91d1\u5c71\u91d1\u9580\u5927\u6a4b", "\u91d1\u9580\u5927\u6a4b"], "route_type": ["scenic", "\u98a8\u666f"]}, "get_directions 3": {"start_location": ["Golden Gate Bridge in San Francisco", "Golden Gate Bridge, San Francisco", "Golden Gate Bridge", "\u820a\u91d1\u5c71\u91d1\u9580\u5927\u6a4b", "\u91d1\u9580\u5927\u6a4b"], "end_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "route_type": ["fastest", "\u6700\u5feb"]}}}
{"id": 93, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'origin': 'New York'. Expected one of ['New York City', 'NYC', '\u7d10\u7d04', '\u7d10\u7d04\u5e02']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"get_shortest_driving_distance": {"origin": "New York", "destination": "Los Angeles", "unit": "miles"}}, "possible_answer_item": {"get_shortest_driving_distance_1": {"origin": ["New York City", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "destination": ["Los Angeles", "Los Angeles, CA", "LA", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef"], "unit": ["miles", "mile", "\u82f1\u91cc", "\u82f1\u54e9"]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'origin': 'Los Angeles'. Expected one of ['New York City', 'NYC', '\u7d10\u7d04', '\u7d10\u7d04\u5e02']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"get_shortest_driving_distance": {"origin": "Los Angeles", "destination": "Miami", "unit": "miles"}}, "possible_answer_item": {"get_shortest_driving_distance_1": {"origin": ["New York City", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "destination": ["Los Angeles", "Los Angeles, CA", "LA", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef"], "unit": ["miles", "mile", "\u82f1\u91cc", "\u82f1\u54e9"]}}}}, {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'origin': 'Miami'. Expected one of ['New York City', 'NYC', '\u7d10\u7d04', '\u7d10\u7d04\u5e02']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"get_shortest_driving_distance": {"origin": "Miami", "destination": "New York", "unit": "miles"}}, "possible_answer_item": {"get_shortest_driving_distance_1": {"origin": ["New York City", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "destination": ["Los Angeles", "Los Angeles, CA", "LA", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef"], "unit": ["miles", "mile", "\u82f1\u91cc", "\u82f1\u54e9"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_92", "question": "\u5f9e\u7d10\u7d04\u5230\u6d1b\u6749\u78ef\u7684\u6700\u77ed\u99d5\u99db\u91cc\u7a0b\u662f\u591a\u5c11\u82f1\u91cc\uff0c\u518d\u5f9e\u6d1b\u6749\u78ef\u5230\u9081\u963f\u5bc6\uff0c\u8003\u616e\u5230\u4f60\u5fc5\u9808\u5f9e\u9081\u963f\u5bc6\u8fd4\u56de\u7d10\u7d04\uff1f", "function": {"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting point of the journey."}, "destination": {"type": "string", "description": "End point of the journey."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is kilometers)."}}, "required": ["origin", "destination"]}}}, "model_result_raw": "get_shortest_driving_distance(origin='New York', destination='Los Angeles', unit='miles'), get_shortest_driving_distance(origin='Los Angeles', destination='Miami', unit='miles'), get_shortest_driving_distance(origin='Miami', destination='New York', unit='miles')", "model_result_decoded": [{"get_shortest_driving_distance": {"origin": "New York", "destination": "Los Angeles", "unit": "miles"}}, {"get_shortest_driving_distance": {"origin": "Los Angeles", "destination": "Miami", "unit": "miles"}}, {"get_shortest_driving_distance": {"origin": "Miami", "destination": "New York", "unit": "miles"}}], "possible_answer": {"get_shortest_driving_distance_1": {"origin": ["New York City", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "destination": ["Los Angeles", "Los Angeles, CA", "LA", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef"], "unit": ["miles", "mile", "\u82f1\u91cc", "\u82f1\u54e9"]}, "get_shortest_driving_distance_2": {"origin": ["Los Angeles", "Los Angeles, CA", "LA", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef"], "destination": ["Miami", "\u9081\u963f\u5bc6"], "unit": ["miles", "mile", "\u82f1\u91cc", "\u82f1\u54e9"]}, "get_shortest_driving_distance_3": {"origin": ["Miami", "\u9081\u963f\u5bc6"], "destination": ["New York City", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "unit": ["miles", "mile", "\u82f1\u91cc", "\u82f1\u54e9"]}}}
{"id": 94, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'stops': ['Philadelphia', 'Washington, D.C.', 'Atlanta', 'Miami']. Expected one of [['Philadelphia', 'Washington D.C.', 'Atlanta'], ['Philadelphia', 'Washington D.C.', 'Atlanta'], ['Philadelphia', 'Washington D.C.', 'Atlanta'], ['Atlanta', 'Philadelphia', 'Washington D.C.'], ['Atlanta', 'Philadelphia', 'Washington D.C.'], ['Atlanta', 'Philadelphia', 'Washington D.C.'], ['Washington D.C.', 'Philadelphia', 'Atlanta'], ['Washington D.C.', 'Philadelphia', 'Atlanta'], ['Washington D.C.', 'Philadelphia', 'Atlanta'], ['\u8cbb\u57ce', '\u83ef\u76db\u9813\u7279\u5340', '\u4e9e\u7279\u862d\u5927'], ['\u8cbb\u57ce', '\u4e9e\u7279\u862d\u5927', '\u83ef\u76db\u9813\u7279\u5340'], ['\u4e9e\u7279\u862d\u5927', '\u8cbb\u57ce', '\u83ef\u76db\u9813\u7279\u5340'], ['\u83ef\u76db\u9813\u7279\u5340', '\u8cbb\u57ce', '\u4e9e\u7279\u862d\u5927'], ['\u4e9e\u7279\u862d\u5927', '\u83ef\u76db\u9813\u7279\u5340', '\u8cbb\u57ce'], ['\u83ef\u76db\u9813\u7279\u5340', '\u4e9e\u7279\u862d\u5927', '\u8cbb\u57ce']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"route.estimate_time": {"start_location": "New York", "end_location": "Miami", "stops": ["Philadelphia", "Washington, D.C.", "Atlanta", "Miami"]}}, "possible_answer_item": {"route.estimate_time_1": {"start_location": ["New York", "New York, NY", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "end_location": ["Miami", "\u9081\u963f\u5bc6"], "stops": [["Philadelphia", "Washington D.C.", "Atlanta"], ["Philadelphia", "Washington D.C.", "Atlanta"], ["Philadelphia", "Washington D.C.", "Atlanta"], ["Atlanta", "Philadelphia", "Washington D.C."], ["Atlanta", "Philadelphia", "Washington D.C."], ["Atlanta", "Philadelphia", "Washington D.C."], ["Washington D.C.", "Philadelphia", "Atlanta"], ["Washington D.C.", "Philadelphia", "Atlanta"], ["Washington D.C.", "Philadelphia", "Atlanta"], ["\u8cbb\u57ce", "\u83ef\u76db\u9813\u7279\u5340", "\u4e9e\u7279\u862d\u5927"], ["\u8cbb\u57ce", "\u4e9e\u7279\u862d\u5927", "\u83ef\u76db\u9813\u7279\u5340"], ["\u4e9e\u7279\u862d\u5927", "\u8cbb\u57ce", "\u83ef\u76db\u9813\u7279\u5340"], ["\u83ef\u76db\u9813\u7279\u5340", "\u8cbb\u57ce", "\u4e9e\u7279\u862d\u5927"], ["\u4e9e\u7279\u862d\u5927", "\u83ef\u76db\u9813\u7279\u5340", "\u8cbb\u57ce"], ["\u83ef\u76db\u9813\u7279\u5340", "\u4e9e\u7279\u862d\u5927", "\u8cbb\u57ce"]]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'stops': ['Philadelphia', 'Washington, D.C.', 'Miami']. Expected one of [['Philadelphia', 'Washington D.C.', 'Atlanta'], ['Philadelphia', 'Washington D.C.', 'Atlanta'], ['Philadelphia', 'Washington D.C.', 'Atlanta'], ['Atlanta', 'Philadelphia', 'Washington D.C.'], ['Atlanta', 'Philadelphia', 'Washington D.C.'], ['Atlanta', 'Philadelphia', 'Washington D.C.'], ['Washington D.C.', 'Philadelphia', 'Atlanta'], ['Washington D.C.', 'Philadelphia', 'Atlanta'], ['Washington D.C.', 'Philadelphia', 'Atlanta'], ['\u8cbb\u57ce', '\u83ef\u76db\u9813\u7279\u5340', '\u4e9e\u7279\u862d\u5927'], ['\u8cbb\u57ce', '\u4e9e\u7279\u862d\u5927', '\u83ef\u76db\u9813\u7279\u5340'], ['\u4e9e\u7279\u862d\u5927', '\u8cbb\u57ce', '\u83ef\u76db\u9813\u7279\u5340'], ['\u83ef\u76db\u9813\u7279\u5340', '\u8cbb\u57ce', '\u4e9e\u7279\u862d\u5927'], ['\u4e9e\u7279\u862d\u5927', '\u83ef\u76db\u9813\u7279\u5340', '\u8cbb\u57ce'], ['\u83ef\u76db\u9813\u7279\u5340', '\u4e9e\u7279\u862d\u5927', '\u8cbb\u57ce']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"route.estimate_time": {"start_location": "New York", "end_location": "Miami", "stops": ["Philadelphia", "Washington, D.C.", "Miami"]}}, "possible_answer_item": {"route.estimate_time_1": {"start_location": ["New York", "New York, NY", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "end_location": ["Miami", "\u9081\u963f\u5bc6"], "stops": [["Philadelphia", "Washington D.C.", "Atlanta"], ["Philadelphia", "Washington D.C.", "Atlanta"], ["Philadelphia", "Washington D.C.", "Atlanta"], ["Atlanta", "Philadelphia", "Washington D.C."], ["Atlanta", "Philadelphia", "Washington D.C."], ["Atlanta", "Philadelphia", "Washington D.C."], ["Washington D.C.", "Philadelphia", "Atlanta"], ["Washington D.C.", "Philadelphia", "Atlanta"], ["Washington D.C.", "Philadelphia", "Atlanta"], ["\u8cbb\u57ce", "\u83ef\u76db\u9813\u7279\u5340", "\u4e9e\u7279\u862d\u5927"], ["\u8cbb\u57ce", "\u4e9e\u7279\u862d\u5927", "\u83ef\u76db\u9813\u7279\u5340"], ["\u4e9e\u7279\u862d\u5927", "\u8cbb\u57ce", "\u83ef\u76db\u9813\u7279\u5340"], ["\u83ef\u76db\u9813\u7279\u5340", "\u8cbb\u57ce", "\u4e9e\u7279\u862d\u5927"], ["\u4e9e\u7279\u862d\u5927", "\u83ef\u76db\u9813\u7279\u5340", "\u8cbb\u57ce"], ["\u83ef\u76db\u9813\u7279\u5340", "\u4e9e\u7279\u862d\u5927", "\u8cbb\u57ce"]]}}}}, {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'start_location': 'Philadelphia'. Expected one of ['New York', 'New York, NY', 'NYC', '\u7d10\u7d04', '\u7d10\u7d04\u5e02']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"route.estimate_time": {"start_location": "Philadelphia", "end_location": "Miami", "stops": ["Washington, D.C.", "Miami"]}}, "possible_answer_item": {"route.estimate_time_1": {"start_location": ["New York", "New York, NY", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "end_location": ["Miami", "\u9081\u963f\u5bc6"], "stops": [["Philadelphia", "Washington D.C.", "Atlanta"], ["Philadelphia", "Washington D.C.", "Atlanta"], ["Philadelphia", "Washington D.C.", "Atlanta"], ["Atlanta", "Philadelphia", "Washington D.C."], ["Atlanta", "Philadelphia", "Washington D.C."], ["Atlanta", "Philadelphia", "Washington D.C."], ["Washington D.C.", "Philadelphia", "Atlanta"], ["Washington D.C.", "Philadelphia", "Atlanta"], ["Washington D.C.", "Philadelphia", "Atlanta"], ["\u8cbb\u57ce", "\u83ef\u76db\u9813\u7279\u5340", "\u4e9e\u7279\u862d\u5927"], ["\u8cbb\u57ce", "\u4e9e\u7279\u862d\u5927", "\u83ef\u76db\u9813\u7279\u5340"], ["\u4e9e\u7279\u862d\u5927", "\u8cbb\u57ce", "\u83ef\u76db\u9813\u7279\u5340"], ["\u83ef\u76db\u9813\u7279\u5340", "\u8cbb\u57ce", "\u4e9e\u7279\u862d\u5927"], ["\u4e9e\u7279\u862d\u5927", "\u83ef\u76db\u9813\u7279\u5340", "\u8cbb\u57ce"], ["\u83ef\u76db\u9813\u7279\u5340", "\u4e9e\u7279\u862d\u5927", "\u8cbb\u57ce"]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_93", "question": "\u5982\u679c\u6211\u5f9e\u7d10\u7d04\u51fa\u767c\uff0c\u9014\u7d93\u8cbb\u57ce\u3001\u83ef\u76db\u9813\u7279\u5340\u548c\u4e9e\u7279\u862d\u5927\uff0c\u6700\u5f8c\u62b5\u9054\u9081\u963f\u5bc6\uff0c\u9810\u8a08\u7684\u65c5\u884c\u6642\u9593\u6703\u662f\u591a\u5c11\uff1f\u53e6\u5916\uff0c\u5982\u679c\u6211\u4e0d\u505c\u7559\u5728\u4e9e\u7279\u862d\u5927\uff0c\u76f4\u63a5\u5f9e\u83ef\u76db\u9813\u7279\u5340\u524d\u5f80\u9081\u963f\u5bc6\uff0c\u6703\u662f\u591a\u5c11\u6642\u9593\uff1f\u6700\u5f8c\uff0c\u5982\u679c\u6211\u5f9e\u6539\u6210\u5f9e\u8cbb\u57ce\u51fa\u767c\uff0c\u505c\u7559\u83ef\u76db\u9813\u7279\u5340\uff0c\u7136\u5f8c\u62b5\u9054\u9081\u963f\u5bc6\uff0c\u6703\u662f\u591a\u5c11\u6642\u9593\uff1f", "function": {"name": "route.estimate_time", "description": "Estimate the travel time for a specific route with optional stops.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point for the journey."}, "end_location": {"type": "string", "description": "The destination for the journey."}, "stops": {"type": "array", "items": {"type": "string"}, "description": "Additional cities or points of interest to stop at during the journey ordered.", "default": ["NYC"]}}, "required": ["start_location", "end_location"]}}}, "model_result_raw": "route.estimate_time(start_location='New York', end_location='Miami', stops=['Philadelphia', 'Washington, D.C.', 'Atlanta', 'Miami']), route.estimate_time(start_location='New York', end_location='Miami', stops=['Philadelphia', 'Washington, D.C.', 'Miami']), route.estimate_time(start_location='Philadelphia', end_location='Miami', stops=['Washington, D.C.', 'Miami'])", "model_result_decoded": [{"route.estimate_time": {"start_location": "New York", "end_location": "Miami", "stops": ["Philadelphia", "Washington, D.C.", "Atlanta", "Miami"]}}, {"route.estimate_time": {"start_location": "New York", "end_location": "Miami", "stops": ["Philadelphia", "Washington, D.C.", "Miami"]}}, {"route.estimate_time": {"start_location": "Philadelphia", "end_location": "Miami", "stops": ["Washington, D.C.", "Miami"]}}], "possible_answer": {"route.estimate_time_1": {"start_location": ["New York", "New York, NY", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "end_location": ["Miami", "\u9081\u963f\u5bc6"], "stops": [["Philadelphia", "Washington D.C.", "Atlanta"], ["Philadelphia", "Washington D.C.", "Atlanta"], ["Philadelphia", "Washington D.C.", "Atlanta"], ["Atlanta", "Philadelphia", "Washington D.C."], ["Atlanta", "Philadelphia", "Washington D.C."], ["Atlanta", "Philadelphia", "Washington D.C."], ["Washington D.C.", "Philadelphia", "Atlanta"], ["Washington D.C.", "Philadelphia", "Atlanta"], ["Washington D.C.", "Philadelphia", "Atlanta"], ["\u8cbb\u57ce", "\u83ef\u76db\u9813\u7279\u5340", "\u4e9e\u7279\u862d\u5927"], ["\u8cbb\u57ce", "\u4e9e\u7279\u862d\u5927", "\u83ef\u76db\u9813\u7279\u5340"], ["\u4e9e\u7279\u862d\u5927", "\u8cbb\u57ce", "\u83ef\u76db\u9813\u7279\u5340"], ["\u83ef\u76db\u9813\u7279\u5340", "\u8cbb\u57ce", "\u4e9e\u7279\u862d\u5927"], ["\u4e9e\u7279\u862d\u5927", "\u83ef\u76db\u9813\u7279\u5340", "\u8cbb\u57ce"], ["\u83ef\u76db\u9813\u7279\u5340", "\u4e9e\u7279\u862d\u5927", "\u8cbb\u57ce"]]}, "route.estimate_time_2": {"start_location": ["New York", "New York, NY", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "end_location": ["Miami", "\u9081\u963f\u5bc6"], "stops": [["Washington D.C."], ["Philadelphia", "Washington D.C."], ["Philadelphia", "Washington D.C.", "New York"], ["Philadelphia", "Washington D.C.", "NYC"], ["Washington D.C.", "Philadelphia"], ["Washington D.C.", "Philadelphia", "New York"], ["Washington D.C.", "Philadelphia", "NYC"], ["\u83ef\u76db\u9813\u7279\u5340"], ["\u8cbb\u57ce", "\u83ef\u76db\u9813\u7279\u5340"], ["\u8cbb\u57ce", "\u83ef\u76db\u9813\u7279\u5340", "\u7d10\u7d04"], ["\u8cbb\u57ce", "\u83ef\u76db\u9813\u7279\u5340", "\u7d10\u7d04\u5e02"], ["\u83ef\u76db\u9813\u7279\u5340", "\u8cbb\u57ce"], ["\u83ef\u76db\u9813\u7279\u5340", "\u8cbb\u57ce", "\u7d10\u7d04"], ["\u83ef\u76db\u9813\u7279\u5340", "\u8cbb\u57ce", "\u7d10\u7d04\u5e02"]]}, "route.estimate_time_3": {"start_location": ["Philadelphia", "\u8cbb\u57ce"], "end_location": ["Miami", "\u9081\u963f\u5bc6"], "stops": [["Washington D.C."], ["Washington D.C.", "Philadelphia"], ["\u83ef\u76db\u9813\u7279\u5340"], ["\u83ef\u76db\u9813\u7279\u5340", "\u8cbb\u57ce"]]}}}
{"id": 99, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_98", "question": "\"\u4f60\u80fd\u8a08\u7b97\u51fa\u771f\u7a7a\u4e2d\u8ddd\u96e2\u4e00\u500b2\u5eab\u502b\u7684\u9ede\u96fb\u83770.5\u516c\u5c3a\u8655\u7684\u96fb\u5834\u5f37\u5ea6\u55ce\uff1f\u63a5\u8457\uff0c\u4f60\u4e5f\u80fd\u8a08\u7b97\u51fa\u8ddd\u96e2\u540c\u4e00\u9ede\u96fb\u83771\u516c\u5c3a\u548c2\u516c\u5c3a\u8655\u7684\u96fb\u5834\u5f37\u5ea6\u55ce\uff1f\u6700\u5f8c\uff0c\u4f60\u80fd\u8a08\u7b97\u51fa\u7a7a\u6c23\u4e2d\u8ddd\u96e2\u540c\u4e00\u9ede\u96fb\u83771\u516c\u5c3a\u8655\u7684\u96fb\u5834\u5f37\u5ea6\u55ce\uff1f\"", "function": {"name": "calculate_electric_field_strength", "description": "Calculate the electric field strength at a certain distance from a point charge.", "parameters": {"type": "dict", "properties": {"charge": {"type": "integer", "description": "The charge in Coulombs."}, "distance": {"type": "float", "description": "The distance from the charge in meters."}, "medium": {"type": "string", "description": "The medium in which the charge and the point of calculation is located. Default is 'vacuum'."}}, "required": ["charge", "distance"]}}}, "model_result_raw": "calculate_electric_field_strength(charge=2, distance=0.5), calculate_electric_field_strength(charge=2, distance=1), calculate_electric_field_strength(charge=2, distance=2, medium='air')", "model_result_decoded": [{"calculate_electric_field_strength": {"charge": 2, "distance": 0.5}}, {"calculate_electric_field_strength": {"charge": 2, "distance": 1}}, {"calculate_electric_field_strength": {"charge": 2, "distance": 2, "medium": "air"}}], "possible_answer": {"calculate_electric_field_strength_1": {"charge": [2], "distance": [0.5], "medium": ["vacuum", "", "\u771f\u7a7a"]}, "calculate_electric_field_strength_2": {"charge": [2], "distance": [1], "medium": ["vacuum", "", "\u771f\u7a7a"]}, "calculate_electric_field_strength_3": {"charge": [2], "distance": [2], "medium": ["vacuum", "", "\u771f\u7a7a"]}, "calculate_electric_field_strength_4": {"charge": [2], "distance": [1], "medium": ["air", "\u7a7a\u6c23"]}}}
{"id": 101, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_100", "question": "\u6c34\u548c\u9435\u5728\u6d77\u5e73\u9762\u9ad8\u5ea6\u70ba0\u516c\u5c3a\u548c1000\u516c\u5c3a\u6642\u7684\u6cb8\u9ede\u548c\u7194\u9ede\u5206\u5225\u662f\u591a\u5c11\uff1f", "function": {"name": "get_boiling_melting_points", "description": "Retrieve the boiling point and melting point of a substance based on its name and the sea level.", "parameters": {"type": "dict", "properties": {"substance": {"type": "string", "description": "The name of the substance."}, "sea_level": {"type": "integer", "description": "The sea level in meters."}}, "required": ["substance", "sea_level"]}}}, "model_result_raw": "get_boiling_melting_points(substance='\u6c34', sea_level=0), get_boiling_melting_points(substance='\u9435', sea_level=1000)", "model_result_decoded": [{"get_boiling_melting_points": {"substance": "\u6c34", "sea_level": 0}}, {"get_boiling_melting_points": {"substance": "\u9435", "sea_level": 1000}}], "possible_answer": {"get_boiling_melting_points_1": {"substance": ["water", "\u6c34"], "sea_level": [0]}, "get_boiling_melting_points_2": {"substance": ["iron", "\u9435"], "sea_level": [1000]}, "get_boiling_melting_points_3": {"substance": ["water", "\u6c34"], "sea_level": [1000]}, "get_boiling_melting_points_4": {"substance": ["iron", "\u9435"], "sea_level": [0]}}}
{"id": 103, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_102", "question": "\u4f60\u6b63\u5728\u4e00\u500b\u5be6\u9a57\u5ba4\u5de5\u4f5c\uff0c\u4f60\u6709\u4e00\u500b\u5bc6\u5c01\u7684\u5bb9\u5668\uff0c\u5176\u58d3\u529b\u8868\u58d3\u529b\u70ba2.5\u5927\u6c23\u58d3\u3002\u4f60\u6240\u5728\u7684\u6d77\u62d4\u9ad8\u5ea6\u662f\u6d77\u5e73\u9762\uff0c\u5927\u6c23\u58d3\u529b\u70ba1\u5927\u6c23\u58d3\u3002\u7136\u800c\uff0c\u4f60\u9700\u8981\u5c07\u5bb9\u5668\u904b\u9001\u5230\u4e00\u500b\u9ad8\u6d77\u62d4\u5730\u5340\uff0c\u90a3\u88e1\u7684\u5927\u6c23\u58d3\u529b\u70ba0.85\u5927\u6c23\u58d3\u3002\u5728\u6d77\u5e73\u9762\u548c\u9ad8\u6d77\u62d4\u5730\u5340\uff0c\u5bb9\u5668\u7684\u7d55\u5c0d\u58d3\u529b\u5c07\u6703\u662f\u591a\u5c11\uff1f", "function": {"name": "calc_absolute_pressure", "description": "Calculates the absolute pressure from gauge and atmospheric pressures.", "parameters": {"type": "dict", "properties": {"atm_pressure": {"type": "integer", "description": "The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided."}, "gauge_pressure": {"type": "float", "description": "The gauge pressure in atmospheres (atm). Must be provided."}}, "required": ["gauge_pressure"]}}}, "model_result_raw": "calc_absolute_pressure(atm_pressure=0.85, gauge_pressure=2.5)", "model_result_decoded": [{"calc_absolute_pressure": {"atm_pressure": 0.85, "gauge_pressure": 2.5}}], "possible_answer": {"calc_absolute_pressure_1": {"gauge_pressure": [2.5], "atm_pressure": [1, ""]}, "calc_absolute_pressure_2": {"gauge_pressure": [2.5], "atm_pressure": [0.85]}}}
{"id": 105, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_104", "question": "\u5728\u4e00\u500b\u71b1\u529b\u5b78\u5be6\u9a57\u4e2d\uff0c\u4f60\u88ab\u8981\u6c42\u8a08\u7b97\u4e00\u500b\u904e\u7a0b\u7684\u71b5\u8b8a\u5316\u3002\u8a72\u904e\u7a0b\u958b\u59cb\u6642\u7684\u6eab\u5ea6\u70ba300\u514b\u8033\u6587\uff0c\u7d50\u675f\u6642\u7684\u6eab\u5ea6\u70ba350\u514b\u8033\u6587\u3002\u7cfb\u7d71\u7684\u71b1\u5bb9\u91cf\u70ba4.18\u7126\u8033/\u514b\u8033\u6587\u3002\u8a72\u904e\u7a0b\u662f\u7b49\u6eab\u7684\u3002\u4f60\u80fd\u8a08\u7b97\u51fa\u8a72\u904e\u7a0b\u7684\u71b5\u8b8a\u5316\u55ce\uff1f\u5982\u679c\u8a72\u904e\u7a0b\u4e0d\u662f\u7b49\u6eab\u7684\uff0c\u71b5\u8b8a\u5316\u6703\u6709\u4ec0\u9ebc\u4e0d\u540c\uff1f", "function": {"name": "calculate_entropy_change", "description": "Calculate the entropy change for an isothermal and reversible process.", "parameters": {"type": "dict", "properties": {"initial_temp": {"type": "integer", "description": "The initial temperature in Kelvin."}, "final_temp": {"type": "integer", "description": "The final temperature in Kelvin."}, "heat_capacity": {"type": "float", "description": "The heat capacity in J/K."}, "isothermal": {"type": "boolean", "description": "Whether the process is isothermal. Default is True."}}, "required": ["initial_temp", "final_temp", "heat_capacity"]}}}, "model_result_raw": "calculate_entropy_change(initial_temp=300, final_temp=350, heat_capacity=4.18, isothermal=True)", "model_result_decoded": [{"calculate_entropy_change": {"initial_temp": 300, "final_temp": 350, "heat_capacity": 4.18, "isothermal": true}}], "possible_answer": {"calculate_entropy_change_1": {"initial_temp": [300], "final_temp": [350], "heat_capacity": [4.18], "isothermal": [true, ""]}, "calculate_entropy_change_2": {"initial_temp": [300], "final_temp": [350], "heat_capacity": [4.18], "isothermal": [false]}}}
{"id": 106, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_105", "question": "\u4f60\u80fd\u8a08\u7b97\u6211\u9032\u884c\u7684\u79d1\u5b78\u5be6\u9a57\u4e2d\u7a7a\u6c23\u5728\u6046\u58d3\u4e0b\u7684\u71b1\u5bb9\u91cf\u55ce\uff1f\u6211\u6709\u4e00\u500b\u5bb9\u7a4d\u70ba2.5\u7acb\u65b9\u516c\u5c3a\u7684\u5bb9\u5668\uff0c\u4e26\u80fd\u4fdd\u6301\u6eab\u5ea6\u5728300\u958b\u6c0f\u5ea6\u3002\u6211\u5c07\u5728\u66f4\u9ad8\u7684\u6eab\u5ea6350\u958b\u6c0f\u5ea6\u91cd\u8907\u9019\u500b\u5be6\u9a57\uff0c\u63a5\u4e0b\u4f86\u5728\u66f4\u4f4e\u7684\u5bb9\u7a4d1.5\u7acb\u65b9\u516c\u5c3a\u4e0b\u4e00\u6a23\u91cd\u8907\u9019\u500b\u5be6\u9a57\u3002\u6211\u5728\u6240\u6709\u9019\u4e9b\u5be6\u9a57\u4e2d\u90fd\u4f7f\u7528\u7a7a\u6c23\u3002\u4f60\u80fd\u63d0\u4f9b\u9019\u4e09\u7a2e\u4e0d\u540c\u689d\u4ef6\u4e0b\u7684\u71b1\u5bb9\u91cf\u55ce\uff1f", "function": {"name": "calc_heat_capacity", "description": "Calculate the heat capacity at constant pressure of air using its temperature and volume.", "parameters": {"type": "dict", "properties": {"temp": {"type": "integer", "description": "The temperature of the gas in Kelvin."}, "volume": {"type": "float", "description": "The volume of the gas in m^3."}, "gas": {"type": "string", "description": "Type of gas, with air as default."}}, "required": ["temp", "volume"]}}}, "model_result_raw": "calc_heat_capacity(temp=300, volume=2.5, gas='air'), calc_heat_capacity(temp=350, volume=1.5, gas='air')", "model_result_decoded": [{"calc_heat_capacity": {"temp": 300, "volume": 2.5, "gas": "air"}}, {"calc_heat_capacity": {"temp": 350, "volume": 1.5, "gas": "air"}}], "possible_answer": {"calc_heat_capacity_1": {"temp": [300], "volume": [2.5], "gas": ["air", "", "\u7a7a\u6c23"]}, "calc_heat_capacity_2": {"temp": [350], "volume": [2.5], "gas": ["air", "", "\u7a7a\u6c23"]}, "calc_heat_capacity_3": {"temp": [300], "volume": [1.5], "gas": ["air", "", "\u7a7a\u6c23"]}}}
{"id": 107, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [2] of model output for index 2 of possible answers.", {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'format': 'genbank'. Expected one of ['', 'fasta']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"fetch_DNA_sequence": {"DNA_id": "XYZ123", "format": "genbank", "upstream": 500}}, "possible_answer_item": {"fetch_DNA_sequence_3": {"DNA_id": ["XYZ123"], "format": ["", "fasta"], "upstream": [500]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_106", "question": "\u4f60\u80fd\u5f9e\u516c\u5171\u8cc7\u6599\u5eab\u4e2d\u53d6\u5f97\u5177\u6709\u552f\u4e00ID 'XYZ123'\u7684\u5206\u5b50\u7684DNA\u5e8f\u5217\u55ce\uff1f\u63a5\u4e0b\u4f86\u518d\u4ee5'genbank'\u683c\u5f0f\u4f86\u8868\u9054\u76f8\u540c\u7684\u5e8f\u5217\uff0c\u6700\u5f8c\u5e6b\u6211\u53d6\u5f97\u540c\u6a23\u7684\u5e8f\u5217\u4f46\u8acb\u5305\u62ecDNA\u5e8f\u5217\u4e0a\u6e38\u7684500\u500b\u9e7c\u57fa\uff1f", "function": {"name": "fetch_DNA_sequence", "description": "Retrieve the sequence of a DNA molecule with the given id from a public database.", "parameters": {"type": "dict", "properties": {"DNA_id": {"type": "string", "description": "Unique ID of the DNA molecule in the database."}, "format": {"type": "string", "description": "Optional parameter to get sequence in specific format (default to 'fasta')."}, "upstream": {"type": "integer", "description": "Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0)."}}, "required": ["DNA_id"]}}}, "model_result_raw": "fetch_DNA_sequence(DNA_id='XYZ123'), fetch_DNA_sequence(DNA_id='XYZ123', format='genbank'), fetch_DNA_sequence(DNA_id='XYZ123', format='genbank', upstream=500)", "model_result_decoded": [{"fetch_DNA_sequence": {"DNA_id": "XYZ123"}}, {"fetch_DNA_sequence": {"DNA_id": "XYZ123", "format": "genbank"}}, {"fetch_DNA_sequence": {"DNA_id": "XYZ123", "format": "genbank", "upstream": 500}}], "possible_answer": {"fetch_DNA_sequence_1": {"DNA_id": ["XYZ123"], "format": ["", "fasta"], "upstream": ["", 0]}, "fetch_DNA_sequence_2": {"DNA_id": ["XYZ123"], "format": ["genbank"], "upstream": [0, ""]}, "fetch_DNA_sequence_3": {"DNA_id": ["XYZ123"], "format": ["", "fasta"], "upstream": [500]}}}
{"id": 109, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'cell_type': 'nerve_cell'. Expected one of ['neuron', '\u795e\u7d93\u7d30\u80de', '\u795e\u7d93']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"biology.get_cell_info": {"cell_type": "nerve_cell", "detailed": true}}, "possible_answer_item": {"biology.get_cell_info_1": {"cell_type": ["neuron", "\u795e\u7d93\u7d30\u80de", "\u795e\u7d93"], "detailed": [true]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'cell_type': 'muscle_cell'. Expected one of ['neuron', '\u795e\u7d93\u7d30\u80de', '\u795e\u7d93']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"biology.get_cell_info": {"cell_type": "muscle_cell", "detailed": false}}, "possible_answer_item": {"biology.get_cell_info_1": {"cell_type": ["neuron", "\u795e\u7d93\u7d30\u80de", "\u795e\u7d93"], "detailed": [true]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_108", "question": "\u4f60\u80fd\u63d0\u4f9b\u4e00\u500b\u795e\u7d93\u7d30\u80de\u7684\u7d50\u69cb\u548c\u529f\u80fd\u7684\u8a73\u7d30\u63cf\u8ff0\uff0c\u7136\u5f8c\u5c07\u5176\u8207\u4eba\u9ad4\u4e2d\u808c\u8089\u7d30\u80de\u7684\u8f03\u5c11\u8a73\u7d30\u7684\u63cf\u8ff0\u9032\u884c\u6bd4\u8f03\u55ce\uff1f", "function": {"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}}, "model_result_raw": "biology.get_cell_info(cell_type='nerve_cell', detailed=True), biology.get_cell_info(cell_type='muscle_cell', detailed=False)", "model_result_decoded": [{"biology.get_cell_info": {"cell_type": "nerve_cell", "detailed": true}}, {"biology.get_cell_info": {"cell_type": "muscle_cell", "detailed": false}}], "possible_answer": {"biology.get_cell_info_1": {"cell_type": ["neuron", "\u795e\u7d93\u7d30\u80de", "\u795e\u7d93"], "detailed": [true]}, "biology.get_cell_info_2": {"cell_type": ["muscle", "\u808c\u8089\u7d30\u80de", "\u808c\u8089"], "detailed": [false, ""]}}}
{"id": 110, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [2] of model output for index 2 of possible answers.", {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'cell_compartment': 'cytosol'. Expected one of ['cytoplasm', '\u7d30\u80de\u8cea']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"cellbio.get_proteins": {"cell_compartment": "cytosol", "include_description": true}}, "possible_answer_item": {"cellbio.get_proteins_3": {"cell_compartment": ["cytoplasm", "\u7d30\u80de\u8cea"], "include_description": [true]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_109", "question": "\u7d30\u80de\u6838\u3001\u7c92\u7dda\u9ad4\u548c\u7d30\u80de\u8cea\u4e2d\u767c\u73fe\u7684\u86cb\u767d\u8cea\u6709\u54ea\u4e9b\uff1f\u4f60\u80fd\u63d0\u4f9b\u6bcf\u7a2e\u86cb\u767d\u8cea\u7684\u7c21\u8981\u63cf\u8ff0\u55ce\uff1f", "function": {"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "dict", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}}, "model_result_raw": "cellbio.get_proteins(cell_compartment='nucleus', include_description=True), cellbio.get_proteins(cell_compartment='mitochondria', include_description=True), cellbio.get_proteins(cell_compartment='cytosol', include_description=True)", "model_result_decoded": [{"cellbio.get_proteins": {"cell_compartment": "nucleus", "include_description": true}}, {"cellbio.get_proteins": {"cell_compartment": "mitochondria", "include_description": true}}, {"cellbio.get_proteins": {"cell_compartment": "cytosol", "include_description": true}}], "possible_answer": {"cellbio.get_proteins_1": {"cell_compartment": ["nucleus", "\u7d30\u80de\u6838"], "include_description": [true]}, "cellbio.get_proteins_2": {"cell_compartment": ["mitochondria", "\u7c92\u7dda\u9ad4"], "include_description": [true]}, "cellbio.get_proteins_3": {"cell_compartment": ["cytoplasm", "\u7d30\u80de\u8cea"], "include_description": [true]}}}
{"id": 111, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'organelle': 'mitochondrion'. Expected one of ['mitochondria', '\u7c92\u7dda\u9ad4']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"cell_biology.function_lookup": {"molecule": "ATP", "organelle": "mitochondrion", "specific_function": true}}, "possible_answer_item": {"cell_biology.function_lookup_1": {"molecule": ["ATP"], "organelle": ["mitochondria", "\u7c92\u7dda\u9ad4"], "specific_function": [true]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'molecule': 'DNA'. Expected one of ['ATP']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"cell_biology.function_lookup": {"molecule": "DNA", "organelle": "nucleus", "specific_function": true}}, "possible_answer_item": {"cell_biology.function_lookup_1": {"molecule": ["ATP"], "organelle": ["mitochondria", "\u7c92\u7dda\u9ad4"], "specific_function": [true]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_110", "question": "ATP\u5206\u5b50\u5728\u7c92\u7dda\u9ad4\u4e2d\u7684\u529f\u80fd\u662f\u4ec0\u9ebc\uff1f\u5b83\u5728\u9019\u500b\u7d30\u80de\u5668\u4e2d\u662f\u5426\u6709\u7279\u5b9a\u7684\u529f\u80fd\uff1f\u540c\u6642\uff0c\u60a8\u80fd\u544a\u8a34\u6211\u7d30\u80de\u6838\u4e2dDNA\u5206\u5b50\u7684\u529f\u80fd\u4ee5\u53ca\u5b83\u662f\u5426\u5728\u7d30\u80de\u6838\u5167\u6709\u7279\u5b9a\u7684\u529f\u80fd\u55ce\uff1f", "function": {"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "dict", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}}, "model_result_raw": "cell_biology.function_lookup(molecule='ATP', organelle='mitochondrion', specific_function=True), cell_biology.function_lookup(molecule='DNA', organelle='nucleus', specific_function=True)", "model_result_decoded": [{"cell_biology.function_lookup": {"molecule": "ATP", "organelle": "mitochondrion", "specific_function": true}}, {"cell_biology.function_lookup": {"molecule": "DNA", "organelle": "nucleus", "specific_function": true}}], "possible_answer": {"cell_biology.function_lookup_1": {"molecule": ["ATP"], "organelle": ["mitochondria", "\u7c92\u7dda\u9ad4"], "specific_function": [true]}, "cell_biology.function_lookup_2": {"molecule": ["DNA"], "organelle": ["nucleus", "\u7d30\u80de\u6838"], "specific_function": [true]}}}
{"id": 115, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_114", "question": "\u4f60\u80fd\u4f7f\u7528\u53c3\u8003\u5e8f\u5217 \"AGCTTAGCTA\" \u5206\u6790 DNA \u5e8f\u5217 \"AGCTTAGCTA\" \u548c \"AGCTTAGGCTA\"\uff0c\u4ee5\u8b58\u5225\u4efb\u4f55\u6f5b\u5728\u7684 '\u63d2\u5165' \u7a81\u8b8a\uff0c\u7136\u5f8c\u518d\u5c0d '\u522a\u9664' \u548c '\u66ff\u63db' \u7a81\u8b8a\u9032\u884c\u76f8\u540c\u7684\u5206\u6790\u55ce\uff1f", "function": {"name": "analyze_dna_sequence", "description": "Analyzes the DNA sequence based on a reference sequence and return any potential mutations.", "parameters": {"type": "dict", "properties": {"sequence": {"type": "string", "description": "The DNA sequence to be analyzed."}, "reference_sequence": {"type": "string", "description": "The reference DNA sequence."}, "mutation_type": {"type": "string", "enum": ["insertion", "deletion", "substitution"], "description": "Type of the mutation to be looked for in the sequence.", "default": "insertion"}}, "required": ["sequence", "reference_sequence"]}}}, "model_result_raw": "analyze_dna_sequence(sequence=\"AGCTTAGCTA\", reference_sequence=\"AGCTTAGCTA\", mutation_type=\"insertion\"), analyze_dna_sequence(sequence=\"AGCTTAGGCTA\", reference_sequence=\"AGCTTAGCTA\", mutation_type=\"deletion\"), analyze_dna_sequence(sequence=\"AGCTTAGGCTA\", reference_sequence=\"AGCTTAGCTA\", mutation_type=\"substitution\")", "model_result_decoded": [{"analyze_dna_sequence": {"sequence": "AGCTTAGCTA", "reference_sequence": "AGCTTAGCTA", "mutation_type": "insertion"}}, {"analyze_dna_sequence": {"sequence": "AGCTTAGGCTA", "reference_sequence": "AGCTTAGCTA", "mutation_type": "deletion"}}, {"analyze_dna_sequence": {"sequence": "AGCTTAGGCTA", "reference_sequence": "AGCTTAGCTA", "mutation_type": "substitution"}}], "possible_answer": {"analyze_dna_sequence_1": {"sequence": ["AGCTTAGCTA"], "reference_sequence": ["AGCTTAGCTA"], "mutation_type": ["insertion", "", "\u63d2\u5165"]}, "analyze_dna_sequence_2": {"sequence": ["AGCTTAGGCTA"], "reference_sequence": ["AGCTTAGCTA"], "mutation_type": ["insertion", "", "\u63d2\u5165"]}, "analyze_dna_sequence_3": {"sequence": ["AGCTTAGCTA"], "reference_sequence": ["AGCTTAGCTA"], "mutation_type": ["deletion", "\u522a\u9664"]}, "analyze_dna_sequence_4": {"sequence": ["AGCTTAGGCTA"], "reference_sequence": ["AGCTTAGCTA"], "mutation_type": ["deletion", "\u522a\u9664"]}, "analyze_dna_sequence_5": {"sequence": ["AGCTTAGCTA"], "reference_sequence": ["AGCTTAGCTA"], "mutation_type": ["substitution", "\u66ff\u63db"]}, "analyze_dna_sequence_6": {"sequence": ["AGCTTAGGCTA"], "reference_sequence": ["AGCTTAGCTA"], "mutation_type": ["substitution", "\u66ff\u63db"]}}}
{"id": 116, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_115", "question": "\u4f60\u80fd\u8a08\u7b97\u4eba\u985e\u8207\u9ed1\u7329\u7329\u4e4b\u9593\u7684\u57fa\u56e0\u76f8\u4f3c\u6027\uff0c\u4ee5\u53ca\u4eba\u985e\u8207\u5927\u7329\u7329\u4e4b\u9593\u7684\u57fa\u56e0\u76f8\u4f3c\u6027\u55ce\uff1f\u8acb\u4ee5DNA\u5e8f\u5217\u70ba\u4f9d\u64da\uff0c\u63d0\u4f9b\u7d50\u679c\u7684\u767e\u5206\u6bd4\u548c\u5206\u6578\u683c\u5f0f\u3002", "function": {"name": "genetics.calculate_similarity", "description": "Calculates the genetic similarity between two species based on their DNA sequences.", "parameters": {"type": "dict", "properties": {"species1": {"type": "string", "description": "The first species to compare."}, "species2": {"type": "string", "description": "The second species to compare."}, "format": {"type": "string", "description": "The format of the result (percentage or fraction). Default is percentage."}}, "required": ["species1", "species2"]}}}, "model_result_raw": "genetics.calculate_similarity(species1='human', species2='chimpanzee', format='percentage'), genetics.calculate_similarity(species1='human', species2='gorilla', format='fraction')", "model_result_decoded": [{"genetics.calculate_similarity": {"species1": "human", "species2": "chimpanzee", "format": "percentage"}}, {"genetics.calculate_similarity": {"species1": "human", "species2": "gorilla", "format": "fraction"}}], "possible_answer": {"genetics.calculate_similarity_1": {"species1": ["human", "Human", "\u4eba\u985e", "\u4eba"], "species2": ["chimpanzee", "\u9ed1\u7329\u7329"], "format": ["percentage", "", "\u767e\u5206\u6bd4"]}, "genetics.calculate_similarity_2": {"species1": ["human", "\u4eba\u985e", "\u4eba"], "species2": ["chimpanzee", "\u9ed1\u7329\u7329"], "format": ["fraction", "\u5206\u6578"]}, "genetics.calculate_similarity_3": {"species1": ["human", "\u4eba\u985e", "\u4eba"], "species2": ["gorilla", "\u5927\u7329\u7329"], "format": ["percentage", "", "\u767e\u5206\u6bd4"]}, "genetics.calculate_similarity_4": {"species1": ["human", "\u4eba\u985e", "\u4eba"], "species2": ["gorilla", "\u5927\u7329\u7329"], "format": ["fraction", "\u5206\u6578"]}}}
{"id": 118, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'land_area': 959700000.0. Expected one of [9597000.0]."], "sub_error_type": "value_error:others", "model_output_item": {"calculate_density": {"country": "\u4e2d\u570b", "year": "2000", "population": 1267000000.0, "land_area": 959700000.0}}, "possible_answer_item": {"calculate_density_1": {"country": ["China", "\u4e2d\u570b"], "year": ["2000"], "population": [1267000000.0], "land_area": [9597000.0]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'year': '2010'. Expected one of ['2000']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"calculate_density": {"country": "\u4e2d\u570b", "year": "2010", "population": 1341000000.0, "land_area": 959700000.0}}, "possible_answer_item": {"calculate_density_1": {"country": ["China", "\u4e2d\u570b"], "year": ["2000"], "population": [1267000000.0], "land_area": [9597000.0]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_117", "question": "\u4e2d\u570b\u57282000\u5e74\u548c2010\u5e74\u7684\u4eba\u53e3\u5bc6\u5ea6\u662f\u591a\u5c11\uff0c\u5047\u8a2d2000\u5e74\u7684\u4eba\u53e3\u70ba12.67\u5104\uff0c2010\u5e74\u7684\u4eba\u53e3\u70ba13.41\u5104\uff0c\u800c\u571f\u5730\u9762\u7a4d\u4fdd\u6301\u5728959.7\u842c\u5e73\u65b9\u516c\u91cc\u4e0d\u8b8a\uff1f", "function": {"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "float", "description": "The population of the country."}, "land_area": {"type": "float", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}}, "model_result_raw": "calculate_density(country='\u4e2d\u570b', year='2000', population=12.67e8, land_area=959.7e6), calculate_density(country='\u4e2d\u570b', year='2010', population=13.41e8, land_area=959.7e6)", "model_result_decoded": [{"calculate_density": {"country": "\u4e2d\u570b", "year": "2000", "population": 1267000000.0, "land_area": 959700000.0}}, {"calculate_density": {"country": "\u4e2d\u570b", "year": "2010", "population": 1341000000.0, "land_area": 959700000.0}}], "possible_answer": {"calculate_density_1": {"country": ["China", "\u4e2d\u570b"], "year": ["2000"], "population": [1267000000.0], "land_area": [9597000.0]}, "calculate_density_2": {"country": ["China", "\u4e2d\u570b"], "year": ["2010"], "population": [1341000000.0], "land_area": [9597000.0]}}}
{"id": 125, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_124", "question": "\u5728\u8003\u616e\u76ee\u524d\u7684\u589e\u9577\u7387\uff0c\u65e5\u672c\u5728\u672a\u4f8610\u5e74\u548c\u5370\u5ea6\u5728\u672a\u4f8620\u5e74\u7684\u9810\u8a08\u4eba\u53e3\u589e\u9577\u5c07\u5206\u5225\u662f\u591a\u5c11\uff1f\u5982\u679c\u6211\u5011\u8003\u616e\u65e5\u672c\u7684\u589e\u9577\u7387\u70ba1.5\uff05\uff0c\u5370\u5ea6\u7684\u589e\u9577\u7387\u70ba2.1\uff05\uff0c\u9019\u4e9b\u9810\u6e2c\u6703\u5982\u4f55\u6539\u8b8a\uff1f", "function": {"name": "population_projections", "description": "Calculates the projected population growth based on the current growth rate.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which to calculate the population projection."}, "years": {"type": "integer", "description": "Number of years for the projection."}, "growth_rate": {"type": "float", "description": "Optional parameter to specify the growth rate. Default is current growth rate. of 0.01"}}, "required": ["country", "years"]}}}, "model_result_raw": "population_projections(country='Japan', years=10, growth_rate=0.015), population_projections(country='India', years=10, growth_rate=0.021)", "model_result_decoded": [{"population_projections": {"country": "Japan", "years": 10, "growth_rate": 0.015}}, {"population_projections": {"country": "India", "years": 10, "growth_rate": 0.021}}], "possible_answer": {"population_projections_1": {"country": ["Japan", "\u65e5\u672c"], "years": [10], "growth_rate": ["", 0.01]}, "population_projections_2": {"country": ["Japan", "\u65e5\u672c"], "years": [10], "growth_rate": [0.015]}, "population_projections_3": {"country": ["India", "\u5370\u5ea6"], "years": [20], "growth_rate": [0.021]}, "population_projections_4": {"country": ["India", "\u5370\u5ea6"], "years": [20], "growth_rate": ["", 0.01]}}}
{"id": 126, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_125", "question": "\u5728\u975e\u6d32\u5927\u8349\u539f\u4e0a\uff0c\u4e00\u7fa4\u7814\u7a76\u4eba\u54e1\u5df2\u7d93\u89c0\u5bdf\u4e00\u7fa4\u5927\u8c61\u5e7e\u5e74\u4e86\u3002\u4ed6\u5011\u6ce8\u610f\u5230\u76ee\u524d\u5927\u8c61\u7684\u6578\u91cf\u70ba500\u982d\uff0c\u6bcf\u5e74\u7684\u4eba\u53e3\u589e\u9577\u7387\u70ba2\uff05\u3002\u4ed6\u5011\u6709\u8208\u8da3\u77e5\u905310\u5e74\u5f8c\u5927\u8c61\u7684\u9810\u4f30\u4eba\u53e3\u3002\u7136\u800c\uff0c\u7531\u65bc\u91ce\u751f\u52d5\u7269\u7684\u4e0d\u53ef\u9810\u6e2c\u6027\uff0c\u4ed6\u5011\u9084\u60f3\u8003\u616e\u589e\u9577\u7387\u4e0b\u964d\u52301.5\uff05\u548c\u589e\u9577\u7387\u589e\u52a0\u52302.5\uff05\u7684\u60c5\u6cc1\u3002\u4f60\u80fd\u63d0\u4f9b\u9019\u4e09\u7a2e\u60c5\u6cc1\u4e0b10\u5e74\u5f8c\u7684\u5927\u8c61\u4eba\u53e3\u9810\u4f30\u55ce\uff1f", "function": {"name": "elephant_population_estimate", "description": "Estimate future population of elephants given current population and growth rate.", "parameters": {"type": "dict", "properties": {"current_population": {"type": "integer", "description": "The current number of elephants."}, "growth_rate": {"type": "float", "description": "The annual population growth rate of elephants."}, "years": {"type": "integer", "description": "The number of years to project the population."}}, "required": ["current_population", "growth_rate", "years"]}}}, "model_result_raw": "elephant_population_estimate(current_population=500, growth_rate=0.02, years=10)", "model_result_decoded": [{"elephant_population_estimate": {"current_population": 500, "growth_rate": 0.02, "years": 10}}], "possible_answer": {"elephant_population_estimate_1": {"current_population": [500], "growth_rate": [0.02], "years": [10]}, "elephant_population_estimate_2": {"current_population": [500], "growth_rate": [0.015], "years": [10]}, "elephant_population_estimate_3": {"current_population": [500], "growth_rate": [0.025], "years": [10]}}}
{"id": 131, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'food_type': '\u7fa9\u5927\u5229\u83dc'. Expected one of ['Italian', 'italian', '\u7fa9\u5927\u5229', '\u7fa9\u5f0f']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"find_restaurants": {"location": "\u7d10\u7d04", "food_type": "\u7fa9\u5927\u5229\u83dc", "number": 4, "dietary_requirements": ["\u7d20\u98df", "\u7121\u9ea9\u8cea"]}}, "possible_answer_item": {"find_restaurants_1": {"location": ["New York", "New York, NY", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "food_type": ["Italian", "italian", "\u7fa9\u5927\u5229", "\u7fa9\u5f0f"], "number": [4], "dietary_requirements": [["vegan", "gluten-free"], ["\u7d20\u98df", "\u7121\u9ea9\u8cea"]]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'location': '\u6d1b\u6749\u78ef'. Expected one of ['New York', 'New York, NY', 'NYC', '\u7d10\u7d04', '\u7d10\u7d04\u5e02']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"find_restaurants": {"location": "\u6d1b\u6749\u78ef", "food_type": "\u7fa9\u5927\u5229\u83dc", "number": 4, "dietary_requirements": ["\u7d20\u98df", "\u7121\u9ea9\u8cea"]}}, "possible_answer_item": {"find_restaurants_1": {"location": ["New York", "New York, NY", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "food_type": ["Italian", "italian", "\u7fa9\u5927\u5229", "\u7fa9\u5f0f"], "number": [4], "dietary_requirements": [["vegan", "gluten-free"], ["\u7d20\u98df", "\u7121\u9ea9\u8cea"]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_130", "question": "\u4f60\u53ef\u4ee5\u5e6b\u6211\u627e\u5230\u7d10\u7d04\u7684\u56db\u5bb6\u9910\u5ef3\uff0c\u63d0\u4f9b\u7fa9\u5927\u5229\u83dc\u991a\uff0c\u4e26\u7b26\u5408\u6211\u7d20\u98df\u548c\u7121\u9ea9\u8cea\u7684\u98f2\u98df\u9700\u6c42\u55ce\uff1f\u7136\u5f8c\u518d\u627e\u56db\u5bb6\u6d1b\u6749\u78ef\u7684\u9910\u5ef3\uff0c\u63d0\u4f9b\u540c\u6a23\u985e\u578b\u7684\u98df\u7269\uff0c\u4e5f\u7b26\u5408\u6211\u7684\u98f2\u98df\u9700\u6c42\u55ce\uff1f", "function": {"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The specific location or area."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free.", "default": "None"}}, "required": ["location", "food_type", "number"]}}}, "model_result_raw": "find_restaurants(location='\u7d10\u7d04', food_type='\u7fa9\u5927\u5229\u83dc', number=4, dietary_requirements=['\u7d20\u98df', '\u7121\u9ea9\u8cea']), find_restaurants(location='\u6d1b\u6749\u78ef', food_type='\u7fa9\u5927\u5229\u83dc', number=4, dietary_requirements=['\u7d20\u98df', '\u7121\u9ea9\u8cea'])", "model_result_decoded": [{"find_restaurants": {"location": "\u7d10\u7d04", "food_type": "\u7fa9\u5927\u5229\u83dc", "number": 4, "dietary_requirements": ["\u7d20\u98df", "\u7121\u9ea9\u8cea"]}}, {"find_restaurants": {"location": "\u6d1b\u6749\u78ef", "food_type": "\u7fa9\u5927\u5229\u83dc", "number": 4, "dietary_requirements": ["\u7d20\u98df", "\u7121\u9ea9\u8cea"]}}], "possible_answer": {"find_restaurants_1": {"location": ["New York", "New York, NY", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "food_type": ["Italian", "italian", "\u7fa9\u5927\u5229", "\u7fa9\u5f0f"], "number": [4], "dietary_requirements": [["vegan", "gluten-free"], ["\u7d20\u98df", "\u7121\u9ea9\u8cea"]]}, "find_restaurants_2": {"location": ["Los Angeles", "Los Angeles, CA", "LA", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef"], "food_type": ["Italian", "\u7fa9\u5927\u5229", "\u7fa9\u5f0f"], "number": [4], "dietary_requirements": [["vegan", "gluten-free"], ["\u7d20\u98df", "\u7121\u9ea9\u8cea"]]}}}
{"id": 132, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'start_location': '\u65e7\u91d1\u5c71'. Expected one of ['San Francisco', 'SF', '\u820a\u91d1\u5c71']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"map_routing.fastest_route": {"start_location": "\u65e7\u91d1\u5c71", "end_location": "\u5e15\u7f57\u5965\u56fe\u529e\u516c\u5ba4", "avoid_tolls": true}}, "possible_answer_item": {"map_routing.fastest_route_1": {"start_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "end_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "avoid_tolls": [true]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'start_location': '\u5e15\u7f57\u5965\u56fe\u529e\u516c\u5ba4'. Expected one of ['San Francisco', 'SF', '\u820a\u91d1\u5c71']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"map_routing.fastest_route": {"start_location": "\u5e15\u7f57\u5965\u56fe\u529e\u516c\u5ba4", "end_location": "\u5723\u8377\u897f\u670b\u53cb\u5bb6", "avoid_tolls": true}}, "possible_answer_item": {"map_routing.fastest_route_1": {"start_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "end_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "avoid_tolls": [true]}}}}, {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'start_location': '\u5723\u8377\u897f\u670b\u53cb\u5bb6'. Expected one of ['San Francisco', 'SF', '\u820a\u91d1\u5c71']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"map_routing.fastest_route": {"start_location": "\u5723\u8377\u897f\u670b\u53cb\u5bb6", "end_location": "\u65e7\u91d1\u5c71", "avoid_tolls": true}}, "possible_answer_item": {"map_routing.fastest_route_1": {"start_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "end_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "avoid_tolls": [true]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_131", "question": "\u4f60\u80fd\u627e\u5230\u5f9e\u6211\u5728\u820a\u91d1\u5c71\u7684\u5bb6\u5230\u6211\u5728\u5e15\u7f85\u5967\u5716\u8fa6\u516c\u5ba4\u7684\u6700\u5feb\u8def\u7dda\uff0c\u7136\u5f8c\u5f9e\u8fa6\u516c\u5ba4\u5230\u6211\u670b\u53cb\u5728\u8056\u8377\u897f\u7684\u5bb6\uff0c\u6700\u5f8c\u5f9e\u6211\u670b\u53cb\u7684\u5bb6\u56de\u5230\u6211\u7684\u5bb6\uff0c\u540c\u6642\u907f\u958b\u6536\u8cbb\u516c\u8def\u55ce\uff1f", "function": {"name": "map_routing.fastest_route", "description": "Finds the fastest route from one location to another, with an option to avoid toll roads.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the journey."}, "end_location": {"type": "string", "description": "The destination for the journey."}, "avoid_tolls": {"type": "boolean", "description": "Option to avoid toll roads during the journey. default is False"}}, "required": ["start_location", "end_location"]}}}, "model_result_raw": "map_routing.fastest_route(start_location='\u65e7\u91d1\u5c71', end_location='\u5e15\u7f57\u5965\u56fe\u529e\u516c\u5ba4', avoid_tolls=True), map_routing.fastest_route(start_location='\u5e15\u7f57\u5965\u56fe\u529e\u516c\u5ba4', end_location='\u5723\u8377\u897f\u670b\u53cb\u5bb6', avoid_tolls=True), map_routing.fastest_route(start_location='\u5723\u8377\u897f\u670b\u53cb\u5bb6', end_location='\u65e7\u91d1\u5c71', avoid_tolls=True)", "model_result_decoded": [{"map_routing.fastest_route": {"start_location": "\u65e7\u91d1\u5c71", "end_location": "\u5e15\u7f57\u5965\u56fe\u529e\u516c\u5ba4", "avoid_tolls": true}}, {"map_routing.fastest_route": {"start_location": "\u5e15\u7f57\u5965\u56fe\u529e\u516c\u5ba4", "end_location": "\u5723\u8377\u897f\u670b\u53cb\u5bb6", "avoid_tolls": true}}, {"map_routing.fastest_route": {"start_location": "\u5723\u8377\u897f\u670b\u53cb\u5bb6", "end_location": "\u65e7\u91d1\u5c71", "avoid_tolls": true}}], "possible_answer": {"map_routing.fastest_route_1": {"start_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "end_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "avoid_tolls": [true]}, "map_routing.fastest_route_2": {"start_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "end_location": ["San Jose", "SJ", "\u8056\u8377\u897f"], "avoid_tolls": [true]}, "map_routing.fastest_route_3": {"start_location": ["San Jose", "SJ", "\u8056\u8377\u897f"], "end_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "avoid_tolls": [true]}}}
{"id": 138, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "parallel_function_137", "question": "\u4f60\u6709\u56db\u500b\u6578\u5b57\u5217\u8868\uff1a[45\uff0c12\uff0c67\uff0c21\uff0c89]\uff0c[34\uff0c78\uff0c12\uff0c56\uff0c90]\uff0c[23\uff0c45\uff0c67\uff0c89\uff0c12]\u548c[56\uff0c78\uff0c90\uff0c12\uff0c34]\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528'array_sort'\u51fd\u6578\u5c0d\u9019\u4e9b\u5217\u8868\u9032\u884c\u5347\u5e8f\u548c\u964d\u5e8f\u6392\u5e8f\u55ce\uff1f", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "integer"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting. If not specified, it will default to ascending."}}, "required": ["list", "order"]}}}, "model_result_raw": "Error", "possible_answer": {"array_sort_1": {"list": [[45, 12, 67, 21, 89]], "order": ["ascending", "\u5347\u5e8f"]}, "array_sort_2": {"list": [[45, 12, 67, 21, 89]], "order": ["descending", "\u964d\u5e8f"]}, "array_sort_3": {"list": [[34, 78, 12, 56, 90]], "order": ["ascending", "\u5347\u5e8f"]}, "array_sort_4": {"list": [[34, 78, 12, 56, 90]], "order": ["descending", "\u964d\u5e8f"]}, "array_sort_5": {"list": [[23, 45, 67, 89, 12]], "order": ["ascending", "\u5347\u5e8f"]}, "array_sort_6": {"list": [[23, 45, 67, 89, 12]], "order": ["descending", "\u964d\u5e8f"]}, "array_sort_7": {"list": [[56, 78, 90, 12, 34]], "order": ["ascending", "\u5347\u5e8f"]}, "array_sort_8": {"list": [[56, 78, 90, 12, 34]], "order": ["descending", "\u964d\u5e8f"]}}}
{"id": 156, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_155", "question": "\u4f60\u88ab\u7d66\u4e88\u4e00\u500b\u5305\u542b\u5404\u7a2e\u8b8a\u6578\u7684\u8cc7\u6599\u96c6\uff0c\u5305\u62ec\u300c\u5e74\u9f61\u300d\u3001\u300c\u6536\u5165\u300d\u3001\u300c\u6559\u80b2\u300d\u3001\u300c\u6027\u5225\u300d\u3001\u300c\u5a5a\u59fb\u72c0\u6cc1\u300d\u548c\u300c\u6d88\u8cbb\u5206\u6578\u300d\u3002\u4f60\u60f3\u8981\u6839\u64da\u5176\u4ed6\u8b8a\u6578\u4f86\u9810\u6e2c\u300c\u6d88\u8cbb\u5206\u6578\u300d\u3002\u8acb\u554f\u4f60\u80fd\u5426\u4f7f\u7528\u300crun_linear_regression\u300d\u51fd\u6578\u5efa\u7acb\u4e00\u500b\u7dda\u6027\u8ff4\u6b78\u6a21\u578b\uff0c\u4f7f\u7528\u300c\u5e74\u9f61\u300d\u3001\u300c\u6536\u5165\u300d\u548c\u300c\u6559\u80b2\u300d\u4f5c\u70ba\u9810\u6e2c\u8b8a\u6578\uff0c\u300c\u6d88\u8cbb\u5206\u6578\u300d\u4f5c\u70ba\u76ee\u6a19\u8b8a\u6578\uff0c\u800c\u4e0d\u5c0d\u9810\u6e2c\u8b8a\u6578\u9032\u884c\u6a19\u6e96\u5316\uff1f\u7136\u5f8c\uff0c\u4f60\u80fd\u5426\u518d\u6b21\u904b\u884c\u540c\u4e00\u500b\u51fd\u6578\uff0c\u4f46\u9019\u6b21\u5c0d\u9810\u6e2c\u8b8a\u6578\u9032\u884c\u6a19\u6e96\u5316\uff1f", "function": {"name": "run_linear_regression", "description": "Build a linear regression model using given predictor variables and a target variable.", "parameters": {"type": "dict", "properties": {"predictors": {"type": "array", "items": {"type": "string"}, "description": "Array containing the names of predictor variables."}, "target": {"type": "string", "description": "The name of target variable."}, "standardize": {"type": "boolean", "description": "Option to apply standardization on the predictors. Defaults to False."}}, "required": ["predictors", "target"]}}}, "model_result_raw": "run_linear_regression(predictors=['age', 'income', 'education'], target='consumption_score', standardize=False)", "model_result_decoded": [{"run_linear_regression": {"predictors": ["age", "income", "education"], "target": "consumption_score", "standardize": false}}], "possible_answer": {"run_linear_regression 1": {"predictors": [["Age", "Income", "Education"], ["\u5e74\u9f61", "\u6536\u5165", "\u6559\u80b2"]], "target": ["Spending Score", "\u6d88\u8cbb\u5206\u6578"], "standardize": [false]}, "run_linear_regression 2": {"predictors": [["Age", "Income", "Education"], ["\u5e74\u9f61", "\u6536\u5165", "\u6559\u80b2"]], "target": ["Spending Score", "\u6d88\u8cbb\u5206\u6578"], "standardize": [true, false]}}}
{"id": 157, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_156", "question": "\u4f60\u88ab\u7d66\u4e88\u4e00\u500b\u540d\u70ba\"data_random_forest\"\u7684\u8cc7\u6599\u96c6\uff0c\u4ee5\u8cc7\u6599\u6846\u7684\u5f62\u5f0f\u5448\u73fe\uff0c\u4f60\u60f3\u8981\u5728\u9019\u500b\u8cc7\u6599\u4e0a\u8a13\u7df4\u4e00\u500b\u96a8\u6a5f\u68ee\u6797\u6a21\u578b\u3002\u4f60\u6c7a\u5b9a\u5617\u8a66\u4e0d\u540c\u6578\u91cf\u7684\u6a39\u548c\u6a39\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u4f86\u89c0\u5bdf\u9019\u4e9b\u53c3\u6578\u5c0d\u6a21\u578b\u8868\u73fe\u7684\u5f71\u97ff\u3002\n\n\u9996\u5148\uff0c\u4f60\u8a13\u7df4\u4e00\u500b\u6709100\u68f5\u6a39\u548c\u6700\u5927\u6df1\u5ea6\u70ba10\u7684\u6a21\u578b\u3002\u7136\u5f8c\uff0c\u4f60\u518d\u8a13\u7df4\u4e00\u500b\u6709200\u68f5\u6a39\u548c\u6700\u5927\u6df1\u5ea6\u70ba20\u7684\u6a21\u578b\u3002\u63a5\u8457\uff0c\u4f60\u8a13\u7df4\u4e00\u500b\u6709300\u68f5\u6a39\u548c\u6700\u5927\u6df1\u5ea6\u70ba30\u7684\u6a21\u578b\u3002\u6700\u5f8c\uff0c\u4f60\u8a13\u7df4\u4e00\u500b\u6709400\u68f5\u6a39\u548c\u6700\u5927\u6df1\u5ea6\u70ba40\u7684\u6a21\u578b\u3002\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528'random_forest.train'\u51fd\u6578\u56db\u6b21\uff0c\u5206\u5225\u4f7f\u7528\u9019\u4e9b\u4e0d\u540c\u7684\u53c3\u6578\uff0c\u4e26\u6bd4\u8f03\u9019\u56db\u500b\u6a21\u578b\u7684\u8868\u73fe\u55ce\uff1f", "function": {"name": "random_forest.train", "description": "Train a Random Forest Model on given data", "parameters": {"type": "dict", "properties": {"n_estimators": {"type": "integer", "description": "The number of trees in the forest."}, "max_depth": {"type": "integer", "description": "The maximum depth of the tree."}, "data": {"type": "string", "description": "The training data for the model."}}, "required": ["n_estimators", "max_depth", "data"]}}}, "model_result_raw": "random_forest.train(n_estimators=100, max_depth=10, data=data_random_forest)", "model_result_decoded": [{"random_forest.train": {"n_estimators": 100, "max_depth": 10, "data": "data_random_forest"}}], "possible_answer": {"random_forest.train 1": {"n_estimators": [100], "max_depth": [10], "data": ["data_random_forest"]}, "random_forest.train 2": {"n_estimators": [200], "max_depth": [20], "data": ["data_random_forest"]}, "random_forest.train 3": {"n_estimators": [300], "max_depth": [30], "data": ["data_random_forest"]}, "random_forest.train 4": {"n_estimators": [400], "max_depth": [40], "data": ["data_random_forest"]}}}
{"id": 159, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_158", "question": "\u4f60\u662f\u4e00\u4f4d\u8cc7\u6599\u79d1\u5b78\u5bb6\uff0c\u6b63\u5728\u9032\u884c\u4e00\u500b\u9700\u8981\u5f9e\u6b63\u614b\u5206\u4f48\u4e2d\u751f\u6210\u96a8\u6a5f\u6578\u7684\u9805\u76ee\u3002\u4f60\u9700\u8981\u751f\u6210\u56db\u500b\u96a8\u6a5f\u6578\uff1a\u5169\u500b\u96a8\u6a5f\u6578\u4f86\u81ea\u5e73\u5747\u503c\u70ba5\u3001\u6a19\u6e96\u5dee\u70ba2\u7684\u6b63\u614b\u5206\u4f48\uff0c\u53e6\u5916\u5169\u500b\u96a8\u6a5f\u6578\u4f86\u81ea\u5e73\u5747\u503c\u70ba10\u3001\u6a19\u6e96\u5dee\u70ba3\u7684\u6b63\u614b\u5206\u4f48\u3002\u4f60\u53ef\u4ee5\u5982\u4f55\u4f7f\u7528 'random.normalvariate' \u51fd\u6578\u4f86\u5be6\u73fe\u9019\u4e00\u9ede\uff1f", "function": {"name": "random.normalvariate", "description": "Generates a random number from a normal distribution given the mean and standard deviation.", "parameters": {"type": "dict", "properties": {"mu": {"type": "integer", "description": "Mean of the normal distribution."}, "sigma": {"type": "integer", "description": "Standard deviation of the normal distribution."}}, "required": ["mu", "sigma"]}}}, "model_result_raw": "random.normalvariate(mu=5, sigma=2), random.normalvariate(mu=5, sigma=2), random.normalvariate(mu=10, sigma=3), random.normalvariate(mu=10, sigma=3)", "model_result_decoded": [{"random.normalvariate": {"mu": 5, "sigma": 2}}, {"random.normalvariate": {"mu": 5, "sigma": 2}}, {"random.normalvariate": {"mu": 10, "sigma": 3}}, {"random.normalvariate": {"mu": 10, "sigma": 3}}], "possible_answer": {"random.normalvariate_1": {"mu": [5], "sigma": [2]}, "random.normalvariate_2": {"mu": [10], "sigma": [3]}}}
{"id": 160, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'number_of_rolls': 4. Expected one of [3]."], "sub_error_type": "value_error:others", "model_output_item": {"probability.dice_roll": {"desired_number": 4, "number_of_rolls": 4}}, "possible_answer_item": {"probability.dice_roll 1": {"desired_number": [4], "number_of_rolls": [3], "die_sides": [6, ""]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'desired_number': 2. Expected one of [4]."], "sub_error_type": "value_error:others", "model_output_item": {"probability.dice_roll": {"desired_number": 2, "number_of_rolls": 2}}, "possible_answer_item": {"probability.dice_roll 1": {"desired_number": [4], "number_of_rolls": [3], "die_sides": [6, ""]}}}}, {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'desired_number': 7. Expected one of [4]."], "sub_error_type": "value_error:others", "model_output_item": {"probability.dice_roll": {"desired_number": 7, "number_of_rolls": 2, "die_sides": 8}}, "possible_answer_item": {"probability.dice_roll 1": {"desired_number": [4], "number_of_rolls": [3], "die_sides": [6, ""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_159", "question": "\u5728\u4e00\u500b\u684c\u904a\u4e2d\uff0c\u4f60\u6709\u4e00\u500b\u516d\u9762\u9ab0\u5b50\u3002\u4f60\u5c0d\u9023\u7e8c2\u6b21\u64f2\u51fa4\u7684\u6a5f\u7387\u5f88\u611f\u8208\u8da3\u3002\u4e4b\u5f8c\uff0c\u4f60\u60f3\u77e5\u9053\u9023\u7e8c2\u6b21\u64f2\u51fa2\u7684\u6a5f\u7387\u662f\u591a\u5c11\u3002\u6700\u5f8c\uff0c\u4f60\u60f3\u77e5\u9053\u5982\u679c\u9ab0\u5b50\u6709\u516b\u9762\uff0c\u4f60\u60f3\u9023\u7e8c2\u6b21\u64f2\u51fa7\u7684\u6a5f\u7387\u6703\u662f\u591a\u5c11\u3002\u4f60\u80fd\u8a08\u7b97\u51fa\u9019\u4e9b\u6a5f\u7387\u55ce\uff1f", "function": {"name": "probability.dice_roll", "description": "Calculate the probability of rolling a certain number on a six-sided die a certain number of times in a row.", "parameters": {"type": "dict", "properties": {"desired_number": {"type": "integer", "description": "The number you want to roll."}, "number_of_rolls": {"type": "integer", "description": "How many times you want to roll that number in a row."}, "die_sides": {"type": "integer", "description": "The number of sides on the die (optional; default is 6)."}}, "required": ["desired_number", "number_of_rolls"]}}}, "model_result_raw": "probability.dice_roll(desired_number=4, number_of_rolls=4), probability.dice_roll(desired_number=2, number_of_rolls=2), probability.dice_roll(desired_number=7, number_of_rolls=2, die_sides=8)", "model_result_decoded": [{"probability.dice_roll": {"desired_number": 4, "number_of_rolls": 4}}, {"probability.dice_roll": {"desired_number": 2, "number_of_rolls": 2}}, {"probability.dice_roll": {"desired_number": 7, "number_of_rolls": 2, "die_sides": 8}}], "possible_answer": {"probability.dice_roll 1": {"desired_number": [4], "number_of_rolls": [3], "die_sides": [6, ""]}, "probability.dice_roll 2": {"desired_number": [2], "number_of_rolls": [2], "die_sides": [6, ""]}, "probability.dice_roll 3": {"desired_number": [7], "number_of_rolls": [2], "die_sides": [8]}}}
{"id": 168, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_167", "question": "\u5982\u679c\u6211\u5011\u4f7f\u7528\u4f4d\u65bc\u201c/user/home/datasets/finance.csv\u201d\u7684\u6578\u64da\u96c6\uff0c\u4e26\u5c07'\u6536\u5165'\u3001'\u5e74\u9f61'\u548c'\u6559\u80b2'\u4f5c\u70ba\u81ea\u8b8a\u91cf\uff0c'\u4fe1\u7528\u8a55\u5206'\u4f5c\u70ba\u56e0\u8b8a\u91cf\uff0c\u4e26\u91cd\u8907\u76f8\u540c\u7684\u904e\u7a0b\uff0c\u5c07'\u6536\u5165'\u3001'\u5e74\u9f61'\u548c'\u4fe1\u7528\u8a55\u5206'\u4f5c\u70ba\u81ea\u8b8a\u91cf\uff0c'\u6559\u80b2'\u4f5c\u70ba\u56e0\u8b8a\u91cf\uff0c\u90a3\u9ebc\u8ff4\u6b78\u6a21\u578b\u7684\u6c7a\u5b9a\u4fc2\u6578\uff08R\u5e73\u65b9\uff09\u662f\u591a\u5c11\uff1f", "function": {"name": "linear_regression.get_r_squared", "description": "Calculate the coefficient of determination of a regression model.", "parameters": {"type": "dict", "properties": {"dataset_path": {"type": "string", "description": "Path to the CSV dataset file."}, "independent_variables": {"type": "array", "items": {"type": "string"}, "description": "The independent variables to use in the regression model."}, "dependent_variable": {"type": "string", "description": "The dependent variable to predict in the regression model."}}, "required": ["dataset_path", "independent_variables", "dependent_variable"]}}}, "model_result_raw": "linear_regression.get_r_squared(dataset_path='/user/home/datasets/finance.csv', independent_variables=['\u6536\u5165', '\u5e74\u9f61', '\u6559\u80b2'], dependent_variable='\u4fe1\u7528\u8a55\u5206')", "model_result_decoded": [{"linear_regression.get_r_squared": {"dataset_path": "/user/home/datasets/finance.csv", "independent_variables": ["\u6536\u5165", "\u5e74\u9f61", "\u6559\u80b2"], "dependent_variable": "\u4fe1\u7528\u8a55\u5206"}}], "possible_answer": {"linear_regression.get_r_squared_1": {"dataset_path": ["/user/home/datasets/finance.csv"], "independent_variables": [["income", "age", "education"], ["\u6536\u5165", "\u5e74\u9f61", "\u6559\u80b2"]], "dependent_variable": ["credit_score", "\u4fe1\u7528\u8a55\u5206"]}, "linear_regression.get_r_squared_2": {"dataset_path": ["/user/home/datasets/finance.csv"], "independent_variables": [["income", "age", "credit_score"], ["\u6536\u5165", "\u5e74\u9f61", "\u4fe1\u7528\u8a55\u5206"]], "dependent_variable": ["education", "\u6559\u80b2"]}}}
{"id": 169, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_168", "question": "\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u6211\u516c\u53f8\u6bcf\u80a1\u5b63\u5ea6\u80a1\u606f\u55ce\uff1f\u6211\u5011\u525b\u525b\u652f\u4ed8\u4e86\u7e3d\u984d\u70ba$5,000,000\u7684\u80a1\u606f\uff0c\u76ee\u524d\u67092,000,000\u80a1\u5728\u5916\u6d41\u901a\u3002\u6b64\u5916\uff0c\u6211\u6b63\u5728\u8003\u616e\u4e00\u7a2e\u60c5\u6cc1\uff0c\u5373\u6211\u5011\u53ef\u80fd\u5c07\u7e3d\u652f\u4ed8\u984d\u589e\u52a0\u5230$6,000,000\uff0c\u540c\u6642\u4fdd\u6301\u5916\u6d41\u901a\u80a1\u6578\u4e0d\u8b8a\u3002\u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u6bcf\u80a1\u5b63\u5ea6\u80a1\u606f\u5c07\u662f\u591a\u5c11\uff1f\u5982\u679c\u6211\u5011\u9084\u5c07\u5916\u6d41\u901a\u80a1\u6578\u589e\u52a0\u52302,500,000\uff0c\u540c\u6642\u4fdd\u6301\u7e3d\u652f\u4ed8\u984d\u70ba$6,000,000\uff0c\u53c8\u6703\u662f\u591a\u5c11\uff1f", "function": {"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "dict", "properties": {"total_payout": {"type": "integer", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}}, "model_result_raw": "finance.calculate_quarterly_dividend_per_share(total_payout=5000000, outstanding_shares=2000000)", "model_result_decoded": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": 5000000, "outstanding_shares": 2000000}}], "possible_answer": {"finance.calculate_quarterly_dividend_per_share_1": {"total_payout": [5000000], "outstanding_shares": [2000000]}, "finance.calculate_quarterly_dividend_per_share_2": {"total_payout": [6000000], "outstanding_shares": [2500000]}, "finance.calculate_quarterly_dividend_per_share_3": {"total_payout": [6000000], "outstanding_shares": [2000000]}}}
{"id": 178, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_177", "question": "\u9ec3\u91d1\u3001\u767d\u9280\u3001\u9251\u548c\u9200\u6bcf\u76ce\u53f8\u76ee\u524d\u7684\u50f9\u683c\u662f\u591a\u5c11\uff1f", "function": {"name": "get_metal_price", "description": "Retrieve the current price for a specified metal and measure.", "parameters": {"type": "dict", "properties": {"metal": {"type": "string", "description": "The metal whose price needs to be fetched."}, "measure": {"type": "string", "description": "The measure unit for price, like 'ounce' or 'kg'."}}, "required": ["metal", "measure"]}}}, "model_result_raw": "get_metal_price(metal='gold', measure='ounce')", "model_result_decoded": [{"get_metal_price": {"metal": "gold", "measure": "ounce"}}], "possible_answer": {"get_metal_price_1": {"metal": ["gold", "\u9ec3\u91d1"], "measure": ["ounce", "\u76ce\u53f8"]}, "get_metal_price_2": {"metal": ["silver", "\u767d\u9280"], "measure": ["ounce", "\u76ce\u53f8"]}, "get_metal_price_3": {"metal": ["platinum", "\u9251"], "measure": ["ounce", "\u76ce\u53f8"]}, "get_metal_price_4": {"metal": ["palladium", "\u9200"], "measure": ["ounce", "\u76ce\u53f8"]}}}
{"id": 179, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_178", "question": "2022-01-01\u548c2022-02-01\u5728\u90a3\u65af\u9054\u514b\u7684\u5fae\u8edf\u548c\u860b\u679c\u7684\u6536\u76e4\u80a1\u50f9\u662f\u591a\u5c11\uff1f", "function": {"name": "get_stock_price", "description": "Get the closing stock price for a specific company on a specified date.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "date": {"type": "string", "description": "Date of when to get the stock price. Format: yyyy-mm-dd."}, "exchange": {"type": "string", "description": "Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'"}}, "required": ["company_name", "date"]}}}, "model_result_raw": "get_stock_price(company_name='Microsoft', date='2022-01-01', exchange='NASDAQ'), get_stock_price(company_name='Apple', date='2022-02-01', exchange='NASDAQ')", "model_result_decoded": [{"get_stock_price": {"company_name": "Microsoft", "date": "2022-01-01", "exchange": "NASDAQ"}}, {"get_stock_price": {"company_name": "Apple", "date": "2022-02-01", "exchange": "NASDAQ"}}], "possible_answer": {"get_stock_price 1": {"company_name": ["Microsoft", "Apple", "\u5fae\u8edf", "\u860b\u679c"], "date": ["2022-01-01", "01/01/2022", "Jan.1,2022"], "exchange": ["NASDAQ", "", "\u90a3\u65af\u9054\u514b"]}, "get_stock_price 2": {"company_name": ["Microsoft", "\u5fae\u8edf"], "date": ["2022-02-01", "02/01/2022", "Feb.1,2022"], "exchange": ["NASDAQ", "", "\u90a3\u65af\u9054\u514b"]}, "get_stock_price 3": {"company_name": ["Apple", "\u860b\u679c"], "date": ["2022-01-01", "01/01/2022", "Jan.1,2022"], "exchange": ["NASDAQ", "", "\u90a3\u65af\u9054\u514b"]}, "get_stock_price 4": {"company_name": ["Apple", "\u860b\u679c"], "date": ["2022-02-01", "02/01/2022", "Feb.1,2022"], "exchange": ["NASDAQ", "", "\u90a3\u65af\u9054\u514b"]}}}
{"id": 180, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [1] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'days': 10. Expected one of [15]."], "sub_error_type": "value_error:others", "model_output_item": {"get_stock_price": {"company": "MSFT", "days": 10, "exchange": "NYSE"}}, "possible_answer_item": {"get_stock_price_2": {"company": ["MSFT"], "days": [15], "exchange": ["NYSE", "", "\u7d10\u7d04\u8b49\u5238\u4ea4\u6613\u6240", "\u7d10\u7d04\u8b49\u5238"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_179", "question": "\u8acb\u554f\u904e\u53bb10\u5929\u5167\uff0c\u860b\u679c\u516c\u53f8\u5728\u90a3\u65af\u9054\u514b\u4e0a\u5e02\u7684\u80a1\u50f9\u662f\u591a\u5c11\uff1f\u53e6\u5916\uff0c\u8acb\u554f\u904e\u53bb15\u5929\u5167\u5fae\u8edf\u516c\u53f8\u5728\u7d10\u7d04\u8b49\u5238\u4ea4\u6613\u6240\u4e0a\u5e02\u7684\u80a1\u50f9\u53c8\u662f\u591a\u5c11\uff1f\u8b1d\u8b1d\u3002", "function": {"name": "get_stock_price", "description": "Retrieve the stock price for a specific company and time frame.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The ticker symbol of the company."}, "days": {"type": "integer", "description": "Number of past days for which the stock price is required."}, "exchange": {"type": "string", "description": "The stock exchange where the company is listed, default is NYSE"}}, "required": ["company", "days"]}}}, "model_result_raw": "get_stock_price(company='AAPL', days=10, exchange='NASDAQ'), get_stock_price(company='MSFT', days=10, exchange='NYSE')", "model_result_decoded": [{"get_stock_price": {"company": "AAPL", "days": 10, "exchange": "NASDAQ"}}, {"get_stock_price": {"company": "MSFT", "days": 10, "exchange": "NYSE"}}], "possible_answer": {"get_stock_price_1": {"company": ["AAPL"], "days": [10], "exchange": ["NASDAQ", "\u90a3\u65af\u9054\u514b"]}, "get_stock_price_2": {"company": ["MSFT"], "days": [15], "exchange": ["NYSE", "", "\u7d10\u7d04\u8b49\u5238\u4ea4\u6613\u6240", "\u7d10\u7d04\u8b49\u5238"]}}}
{"id": 182, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2, 3] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'companies': ['Apple', 'Microsoft', 'Amazon', 'Tesla']. Expected one of [['Apple'], ['\u860b\u679c']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"get_stock_prices": {"companies": ["Apple", "Microsoft", "Amazon", "Tesla"], "duration": "1 week"}}, "possible_answer_item": {"get_stock_prices_1": {"companies": [["Apple"], ["\u860b\u679c"]], "duration": ["1 week", "1\u9031", "1 \u9031"]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'companies': ['Apple', 'Microsoft', 'Amazon', 'Tesla']. Expected one of [['Apple'], ['\u860b\u679c']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"get_stock_prices": {"companies": ["Apple", "Microsoft", "Amazon", "Tesla"], "duration": "2 weeks"}}, "possible_answer_item": {"get_stock_prices_1": {"companies": [["Apple"], ["\u860b\u679c"]], "duration": ["1 week", "1\u9031", "1 \u9031"]}}}}, {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'companies': ['Apple', 'Microsoft', 'Amazon', 'Tesla']. Expected one of [['Apple'], ['\u860b\u679c']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"get_stock_prices": {"companies": ["Apple", "Microsoft", "Amazon", "Tesla"], "duration": "3 weeks"}}, "possible_answer_item": {"get_stock_prices_1": {"companies": [["Apple"], ["\u860b\u679c"]], "duration": ["1 week", "1\u9031", "1 \u9031"]}}}}, {"Model Result Index 3": {"sub_error": ["Invalid value for parameter 'companies': ['Apple', 'Microsoft', 'Amazon', 'Tesla']. Expected one of [['Apple'], ['\u860b\u679c']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"get_stock_prices": {"companies": ["Apple", "Microsoft", "Amazon", "Tesla"], "duration": "1 month"}}, "possible_answer_item": {"get_stock_prices_1": {"companies": [["Apple"], ["\u860b\u679c"]], "duration": ["1 week", "1\u9031", "1 \u9031"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_function_181", "question": "\u4f60\u80fd\u4f7f\u7528 get_stock_prices \u51fd\u6578\u4f86\u6aa2\u7d22\u860b\u679c\u3001\u5fae\u8edf\u3001\u4e9e\u99ac\u905c\u548c\u7279\u65af\u62c9\u5206\u5225\u57281\u9031\u30012\u9031\u30013\u9031\u548c1\u500b\u6708\u7684\u6642\u9593\u7bc4\u570d\u5167\u7684\u80a1\u50f9\u55ce\uff1f\u3002", "function": {"name": "get_stock_prices", "description": "Retrieves stock prices for specified companies and duration.", "parameters": {"type": "dict", "properties": {"companies": {"type": "array", "items": {"type": "string"}, "description": "List of companies to retrieve stock prices for."}, "duration": {"type": "string", "description": "Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc."}}, "required": ["companies", "duration"]}}}, "model_result_raw": "get_stock_prices(companies=['Apple', 'Microsoft', 'Amazon', 'Tesla'], duration='1 week'), get_stock_prices(companies=['Apple', 'Microsoft', 'Amazon', 'Tesla'], duration='2 weeks'), get_stock_prices(companies=['Apple', 'Microsoft', 'Amazon', 'Tesla'], duration='3 weeks'), get_stock_prices(companies=['Apple', 'Microsoft', 'Amazon', 'Tesla'], duration='1 month')", "model_result_decoded": [{"get_stock_prices": {"companies": ["Apple", "Microsoft", "Amazon", "Tesla"], "duration": "1 week"}}, {"get_stock_prices": {"companies": ["Apple", "Microsoft", "Amazon", "Tesla"], "duration": "2 weeks"}}, {"get_stock_prices": {"companies": ["Apple", "Microsoft", "Amazon", "Tesla"], "duration": "3 weeks"}}, {"get_stock_prices": {"companies": ["Apple", "Microsoft", "Amazon", "Tesla"], "duration": "1 month"}}], "possible_answer": {"get_stock_prices_1": {"companies": [["Apple"], ["\u860b\u679c"]], "duration": ["1 week", "1\u9031", "1 \u9031"]}, "get_stock_prices_2": {"companies": [["Microsoft"], ["\u5fae\u8edf"]], "duration": ["2 weeks", "2\u9031", "2 \u9031"]}, "get_stock_prices_3": {"companies": [["Amazon"], ["\u4e9e\u99ac\u905c"]], "duration": ["3 weeks", "3\u9031", "3 \u9031"]}, "get_stock_prices_4": {"companies": [["Tesla"], ["\u7279\u65af\u62c9"]], "duration": ["1 month", "1\u500b\u6708", "1 \u500b\u6708"]}}}
{"id": 184, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_183", "question": "\u60f3\u50cf\u4e00\u4e0b\u4f60\u662f\u4e00\u500b\u7121\u4eba\u6a5f\u64cd\u4f5c\u54e1\u3002\u4f60\u76ee\u524d\u6b63\u5728\u64cd\u4f5c\u4e00\u67b6\u4f4d\u65bc\u5929\u7a7a\u4e2d\u7684\u7121\u4eba\u6a5f\uff0c\u5ea7\u6a19\u70ba\uff085\uff0c7\uff09\u3002\u4f60\u88ab\u8981\u6c42\u5c07\u7121\u4eba\u6a5f\u79fb\u52d5\u5230\u4e00\u500b\u65b0\u7684\u5ea7\u6a19\uff0810\uff0c15\uff09\u3002\u5230\u9054\u65b0\u5ea7\u6a19\u5f8c\uff0c\u4f60\u53c8\u88ab\u8981\u6c42\u5c07\u7121\u4eba\u6a5f\u79fb\u52d5\u5230\u53e6\u4e00\u500b\u5ea7\u6a19\uff0820\uff0c25\uff09\u3002\u4f60\u80fd\u7528\u6b50\u5e7e\u91cc\u5f97\u7bc4\u6578\u6cd5\u8a08\u7b97\u51fa\u7121\u4eba\u6a5f\u7e3d\u5171\u98db\u884c\u7684\u8ddd\u96e2\u55ce\uff1f", "function": {"name": "math.hypot", "description": "Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle.", "parameters": {"type": "dict", "properties": {"x": {"type": "integer", "description": "The x-coordinate value."}, "y": {"type": "integer", "description": "The y-coordinate value."}, "z": {"type": "integer", "description": "Optional. The z-coordinate value. Default is 0."}}, "required": ["x", "y"]}}}, "model_result_raw": "math.hypot(x=10, y=15), math.hypot(x=20, y=25)", "model_result_decoded": [{"math.hypot": {"x": 10, "y": 15}}, {"math.hypot": {"x": 20, "y": 25}}], "possible_answer": {"math.hypot_1": {"x": [5], "y": [7], "z": ["", 0]}, "math.hypot_2": {"x": [10], "y": [15], "z": ["", 0]}, "math.hypot_3": {"x": [20], "y": [25], "z": ["", 0]}}}
{"id": 186, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_185", "question": "\u4f60\u80fd\u4f30\u8a082020\u5e74\u5370\u5ea6\u5b5f\u52a0\u62c9\u864e\u7684\u4eba\u53e3\u6578\u91cf\u55ce\uff1f\u4e26\u5c07\u5176\u8207\u540c\u5e74\u80af\u4e9e\u975e\u6d32\u8c61\u7684\u4f30\u8a08\u4eba\u53e3\u6578\u91cf\u9032\u884c\u6bd4\u8f03\uff0c\u7136\u5f8c\u4f30\u8a08\u9019\u5169\u7a2e\u7269\u7a2e\u5728\u5404\u81ea\u570b\u5bb6\u7684\u7576\u524d\u5e74\u4efd\u7684\u4eba\u53e3\u6578\u91cf\u55ce\uff1f", "function": {"name": "estimate_population", "description": "Estimate the population of a particular species in a given country.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which population needs to be estimated."}, "country": {"type": "string", "description": "The country where the species lives."}, "year": {"type": "integer", "description": "The year for which population estimate is sought. Default is the current year."}}, "required": ["species", "country"]}}}, "model_result_raw": "estimate_population(species='Tiger', country='India', year=2020), estimate_population(species='Elephant', country='Kenya', year=2020)", "model_result_decoded": [{"estimate_population": {"species": "Tiger", "country": "India", "year": 2020}}, {"estimate_population": {"species": "Elephant", "country": "Kenya", "year": 2020}}], "possible_answer": {"estimate_population_1": {"species": ["Bengal Tigers", "Bengal Tiger", "\u5b5f\u52a0\u62c9\u864e"], "country": ["India", "\u5370\u5ea6"], "year": [2020]}, "estimate_population_2": {"species": ["African Elephants", "\u975e\u6d32\u8c61"], "country": ["Kenya", "\u80af\u4e9e"], "year": [2020]}, "estimate_population_3": {"species": ["Bengal Tigers", "Bengal Tiger", "\u5b5f\u52a0\u62c9\u864e"], "country": ["India", "\u5370\u5ea6"], "year": [""]}, "estimate_population_4": {"species": ["African Elephants", "\u975e\u6d32\u8c61"], "country": ["Kenya", "\u80af\u4e9e"], "year": [""]}}}
{"id": 188, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_187", "question": "\u7d10\u7d04\u5e02\u7684\u7a7a\u6c23\u8cea\u91cf\u6578\u64da\u662f\u4ec0\u9ebc\uff0c\u5305\u62ec\u4eca\u5929\u3001\u6628\u5929\u548c\u524d\u5929\u7684\u984d\u5916\u6578\u64da\uff0c\u5982PM2.5\u3001PM10\u3001\u81ed\u6c27\u6c34\u5e73\u548c\u6c61\u67d3\u6e90\uff1f\u4eca\u5929\u662f2023\u5e745\u67085\u65e5\u3002", "function": {"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. the value is set to false to default."}, "historical": {"type": "string", "description": "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.", "default": "today"}}, "required": ["location"]}}}, "model_result_raw": "get_air_quality(location='\u7d10\u7d04\u5e02', detail=True, historical='2023-05-05')", "model_result_decoded": [{"get_air_quality": {"location": "\u7d10\u7d04\u5e02", "detail": true, "historical": "2023-05-05"}}], "possible_answer": {"get_air_quality_1": {"location": ["New York City", "NYC", "\u7d10\u7d04\u5e02"], "detail": [true], "historical": ["2023-05-05", "2023\u5e745\u67085\u65e5"]}, "get_air_quality_2": {"location": ["New York City", "NYC", "\u7d10\u7d04\u5e02"], "detail": [true], "historical": ["2023-05-04", "2023\u5e745\u67084\u65e5"]}, "get_air_quality_3": {"location": ["New York City", "NYC", "\u7d10\u7d04\u5e02"], "detail": [true], "historical": ["2023-05-03", "2023\u5e745\u67083\u65e5"]}}}
{"id": 191, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_function_190", "question": "\u5f9e\u7d10\u7d04\u5e02\u5230\u6d1b\u6749\u78ef\u7684\u6700\u77ed\u99d5\u99db\u8ddd\u96e2\u662f\u591a\u5c11\uff1f\u7136\u5f8c\u5f9e\u6d1b\u6749\u78ef\u5230\u9081\u963f\u5bc6\u5462\uff1f\u5169\u6bb5\u8def\u7a0b\u90fd\u8acb\u8003\u616e\u6700\u77ed\u548c\u98a8\u666f\u8def\u7dda\u7684\u504f\u597d\u3002", "function": {"name": "calculate_shortest_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the drive."}, "end_location": {"type": "string", "description": "The destination location for the drive."}, "route_preference": {"type": "string", "enum": ["Shortest", "Scenic"], "description": "The preferred type of route."}}, "required": ["start_location", "end_location", "route_preference"]}}}, "model_result_raw": "calculate_shortest_distance(start_location='New York City', end_location='Los Angeles', route_preference='Shortest'), calculate_shortest_distance(start_location='Los Angeles', end_location='Miami', route_preference='Shortest')", "model_result_decoded": [{"calculate_shortest_distance": {"start_location": "New York City", "end_location": "Los Angeles", "route_preference": "Shortest"}}, {"calculate_shortest_distance": {"start_location": "Los Angeles", "end_location": "Miami", "route_preference": "Shortest"}}], "possible_answer": {"calculate_shortest_distance_1": {"start_location": ["New York City", "NYC", "\u7d10\u7d04\u5e02", "\u7d10\u7d04\u5e02, NY"], "end_location": ["Los Angeles", "Los Angeles, CA", "LA", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef", "\u6d1b\u6749\u78ef, CA"], "route_preference": ["Shortest", "\u6700\u77ed"]}, "calculate_shortest_distance_2": {"start_location": ["Los Angeles", "Los Angeles, CA", "LA", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef", "\u6d1b\u6749\u78ef, CA"], "end_location": ["Miami", "\u9081\u963f\u5bc6", "\u9081\u963f\u5bc6, FL"], "route_preference": ["Shortest", "\u6700\u77ed"]}, "calculate_shortest_distance_3": {"start_location": ["New York City", "NYC", "\u7d10\u7d04\u5e02", "\u7d10\u7d04\u5e02, NY"], "end_location": ["Los Angeles", "Los Angeles, CA", "LA", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef", "\u6d1b\u6749\u78ef, CA"], "route_preference": ["Scenic", "\u98a8\u666f\u8def\u7dda", "\u98a8\u666f"]}, "calculate_shortest_distance_4": {"start_location": ["Los Angeles", "Los Angeles, CA", "LA", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef", "\u6d1b\u6749\u78ef, CA"], "end_location": ["Miami", "\u9081\u963f\u5bc6", "\u9081\u963f\u5bc6, FL"], "route_preference": ["Scenic", "\u98a8\u666f\u8def\u7dda", "\u98a8\u666f"]}}}