{"accuracy": 0.8475, "correct_count": 339, "total_count": 400}
{"id": 14, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": "\u8a08\u7b97\u66f2\u7dday=x^2\u5728x=1\u5230x=3\u4e4b\u9593\u7684\u9762\u7a4d\u3002", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": "calculate_area_under_curve(function='x**2', interval=[1, 3])", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x**2", "interval": [1, 3]}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y = x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal", "\u68af\u5f62"]}}}
{"id": 48, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'sea_level': -5000. Expected one of [5000]."], "error_type": "value_error:others", "prompt": {"id": "simple_47", "question": "\u5c0b\u627e\u6d77\u5e73\u9762\u4e0b5000\u7c73\u8655\u6c34\u7684\u6cb8\u9ede\u548c\u7194\u9ede\u3002", "function": {"name": "get_boiling_melting_points", "description": "Retrieve the boiling point and melting point of a substance based on its name and the sea level.", "parameters": {"type": "dict", "properties": {"substance": {"type": "string", "description": "The name of the substance."}, "sea_level": {"type": "integer", "description": "The sea level in meters."}}, "required": ["substance", "sea_level"]}}}, "model_result_raw": "get_boiling_melting_points(substance='\u6c34', sea_level=-5000)", "model_result_decoded": [{"get_boiling_melting_points": {"substance": "\u6c34", "sea_level": -5000}}], "possible_answer": {"get_boiling_melting_points": {"substance": ["water", "\u6c34"], "sea_level": [5000]}}}
{"id": 57, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_compartment': 'membrane'. Expected one of ['plasma membrane', '\u7d30\u80de\u819c']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_56", "question": "\u5728\u7d30\u80de\u819c\u4e2d\u767c\u73fe\u7684\u86cb\u767d\u8cea\u6709\u54ea\u4e9b\u540d\u7a31\uff1f", "function": {"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "dict", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}}, "model_result_raw": "cellbio.get_proteins(cell_compartment='membrane', include_description=False)", "model_result_decoded": [{"cellbio.get_proteins": {"cell_compartment": "membrane", "include_description": false}}], "possible_answer": {"cellbio.get_proteins": {"cell_compartment": ["plasma membrane", "\u7d30\u80de\u819c"], "include_description": ["", true, false]}}}
{"id": 62, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'height': 68. Expected one of [70]."], "error_type": "value_error:others", "prompt": {"id": "simple_61", "question": "\u9810\u6e2c\u4e00\u500b\u9ad4\u91cd150\u78c5\uff0c\u8eab\u9ad85\u82f1\u5c3a10\u82f1\u5bf8\uff0c\u8f15\u5ea6\u6d3b\u52d5\u7684\u4eba\u662f\u5426\u6703\u60a3\u4e0a2\u578b\u7cd6\u5c3f\u75c5\u3002", "function": {"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "Weight of the person in lbs."}, "height": {"type": "integer", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}}, "model_result_raw": "diabetes_prediction(weight=150, height=68, activity_level='lightly active')", "model_result_decoded": [{"diabetes_prediction": {"weight": 150, "height": 68, "activity_level": "lightly active"}}], "possible_answer": {"diabetes_prediction": {"weight": [150], "height": [70], "activity_level": ["lightly active", "\u8f15\u5ea6\u6d3b\u52d5"]}}}
{"id": 66, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'land_area': 850000. Expected one of [8500000]."], "error_type": "value_error:others", "prompt": {"id": "simple_65", "question": "\u8a08\u7b972022\u5e74\u5df4\u897f\u7684\u4eba\u53e3\u5bc6\u5ea6\uff0c\u5982\u679c\u4eba\u53e3\u70ba2.13\u5104\uff0c\u571f\u5730\u9762\u7a4d\u70ba850\u842c\u5e73\u65b9\u516c\u91cc\u3002", "function": {"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "integer", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}}, "model_result_raw": "calculate_density(country='Brazil', year='2022', population=213000000, land_area=850000)", "model_result_decoded": [{"calculate_density": {"country": "Brazil", "year": "2022", "population": 213000000, "land_area": 850000}}], "possible_answer": {"calculate_density": {"country": ["Brazil", "\u5df4\u897f"], "year": ["2022"], "population": [213000000], "land_area": [8500000]}}}
{"id": 78, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dietary_preference': ['Vegan']. Expected one of [['Vegan', '\u7d20', '\u7d20\u98df']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_77", "question": "\u5c0b\u627e\u6d1b\u6749\u78ef\u9644\u8fd1\u63d0\u4f9b\u7d14\u7d20\u98df\u7684\u9910\u5ef3\u3002", "function": {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty list."}}, "required": ["location"]}}}, "model_result_raw": "restaurant.find_nearby(location='Los Angeles, CA', dietary_preference=['Vegan'])", "model_result_decoded": [{"restaurant.find_nearby": {"location": "Los Angeles, CA", "dietary_preference": ["Vegan"]}}], "possible_answer": {"restaurant.find_nearby": {"location": ["Los Angeles, CA", "\u52a0\u5dde\u6d1b\u6749\u78ef", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef", "\u6d1b\u6749\u78ef, CA"], "dietary_preference": [["Vegan", "\u7d20", "\u7d20\u98df"]]}}}
{"id": 83, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": "\u8a08\u7b97\u6574\u6578\u5217\u8868[12, 15, 18, 20, 21, 26, 30]\u7684\u5e73\u5747\u503c\u3002", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": "calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 88, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": "\u5c07\u5217\u8868 [5, 3, 4, 1, 2] \u6309\u7167\u5347\u5e8f\u6392\u5217\u3002", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": "array_sort(list=[5, 3, 4, 1, 2], order='ascending')", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending", "\u5347\u5e8f", "\u905e\u589e"]}}}
{"id": 92, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cuisine': '\u5bff\u53f8'. Expected one of ['sushi', '\u58fd\u53f8']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_91", "question": "\u627e\u4e00\u5bb6\u661f\u7d1a\u6700\u9ad8\u7684\u58fd\u53f8\u9910\u5ef3\u5728\u6ce2\u58eb\u9813\uff0c\u4e26\u4e14\u5728\u661f\u671f\u5929\u71df\u696d\u3002", "function": {"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}}, "model_result_raw": "get_restaurant(cuisine='\u5bff\u53f8', location='\u6ce2\u58eb\u9813', condition='\u661f\u671f\u5929\u71df\u696d')", "model_result_decoded": [{"get_restaurant": {"cuisine": "\u5bff\u53f8", "location": "\u6ce2\u58eb\u9813", "condition": "\u661f\u671f\u5929\u71df\u696d"}}], "possible_answer": {"get_restaurant": {"cuisine": ["sushi", "\u58fd\u53f8"], "location": ["Boston", "\u6ce2\u58eb\u9813"], "condition": ["open on Sundays", "opens on Sundays", "\u661f\u671f\u5929\u71df\u696d", "\u661f\u671f\u65e5\u71df\u696d", "\u9031\u65e5\u71df\u696d"]}}}
{"id": 100, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. name 'math' is not defined"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_99", "question": "\u7e6a\u88fd\u4e00\u500b\u983b\u7387\u70ba5\u8d6b\u8332\u7684\u6b63\u5f26\u6ce2\uff0c\u7bc4\u570d\u5f9e0\u52302\u03c0\u3002", "function": {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians. Four decimal places."}, "end_range": {"type": "float", "description": "End of the range in radians. Four decimal places."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}}, "model_result_raw": "plot_sine_wave(start_range=0, end_range=2*math.pi, frequency=5, amplitude=1, phase_shift=0)", "possible_answer": {"plot_sine_wave": {"start_range": [0.0], "end_range": [6.2832], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}}
{"id": 104, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": "\u8a08\u7b97\u66f2\u7dday=3x^2 + 2x - 4\u5728x = -1\u548cx = 2\u4e4b\u9593\u7684\u9762\u7a4d\u3002", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": "mathematics.calculate_area_under_curve(polynomial=[3, 2, -4], limits=[-1, 2])", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 129, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'total_payout': 500000000. Expected one of [50000000]."], "error_type": "value_error:others", "prompt": {"id": "simple_128", "question": "\u4e00\u5bb6\u64c1\u67091\u5104\u80a1\u6d41\u901a\u80a1\u548c\u7e3d\u5206\u7d05\u652f\u51fa\u70ba5000\u842c\u7f8e\u5143\u7684\u516c\u53f8\u6bcf\u80a1\u5b63\u5ea6\u80a1\u606f\u662f\u591a\u5c11\uff1f", "function": {"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "dict", "properties": {"total_payout": {"type": "integer", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}}, "model_result_raw": "finance.calculate_quarterly_dividend_per_share(total_payout=500000000, outstanding_shares=100000000)", "model_result_decoded": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": 500000000, "outstanding_shares": 100000000}}], "possible_answer": {"finance.calculate_quarterly_dividend_per_share": {"total_payout": [50000000], "outstanding_shares": [100000000]}}}
{"id": 134, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_interest_rate': 5.0. Expected one of [0.05]."], "error_type": "value_error:others", "prompt": {"id": "simple_133", "question": "\u9810\u6e2c\u57283\u5e74\u5167\u4ee5\u6bcf\u6708\u8907\u5229\u8a08\u7b97\u7684\u5e74\u5229\u73875%\u4e0b\uff0c$5000\u6295\u8cc7\u7684\u672a\u4f86\u50f9\u503c\u3002", "function": {"name": "finance.predict_future_value", "description": "Calculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon.", "parameters": {"type": "dict", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "annual_interest_rate": {"type": "float", "description": "The annual interest rate of the investment."}, "compounding_periods_per_year": {"type": "integer", "description": "The number of times that interest is compounded per year. Default is 1 (annually)."}, "time_years": {"type": "integer", "description": "The investment horizon in years."}}, "required": ["present_value", "annual_interest_rate", "time_years"]}}}, "model_result_raw": "finance.predict_future_value(present_value=5000, annual_interest_rate=5, compounding_periods_per_year=12, time_years=3)", "model_result_decoded": [{"finance.predict_future_value": {"present_value": 5000, "annual_interest_rate": 5, "compounding_periods_per_year": 12, "time_years": 3}}], "possible_answer": {"finance.predict_future_value": {"present_value": [5000], "annual_interest_rate": [0.05], "compounding_periods_per_year": [12], "time_years": [3]}}}
{"id": 152, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_151", "question": "\u5c0b\u627e2020\u5e74\u7f8e\u570b\u6700\u9ad8\u71df\u6536\u7684\u9280\u884c\u3002", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}}, "model_result_raw": "highest_grossing_banks(country='USA', year=2020)", "model_result_decoded": [{"highest_grossing_banks": {"country": "USA", "year": 2020}}], "possible_answer": {"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S.", "\u7f8e\u570b"], "year": [2020], "top_n": [1]}}}
{"id": 159, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': 'X'. Expected one of ['Mr. X']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_158", "question": "\u5c0b\u627e2012\u5e74\u81f32015\u5e74\u9593\u7d10\u7d04\u5ddeMr. X\u7684\u5211\u4e8b\u6848\u4ef6\u8cc7\u8a0a\u3002", "function": {"name": "get_criminal_records", "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "from_year": {"type": "integer", "description": "The start year of the time frame."}, "to_year": {"type": "integer", "description": "The end year of the time frame."}}, "required": ["name", "location", "from_year", "to_year"]}}}, "model_result_raw": "get_criminal_records(name='X', location='New York, NY', from_year=2012, to_year=2015)", "model_result_decoded": [{"get_criminal_records": {"name": "X", "location": "New York, NY", "from_year": 2012, "to_year": 2015}}], "possible_answer": {"get_criminal_records": {"name": ["Mr. X"], "location": ["New York, NY", "\u7d10\u7d04", "\u7d10\u7d04\u5dde"], "from_year": [2012], "to_year": [2015]}}}
{"id": 160, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'act_name': '\u5211\u6cd5'. Expected one of ['Criminal Law Amendment Act', 'Criminal Law Amendment', '\u5211\u6cd5\u4fee\u6b63\u6848']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_159", "question": "\u7d66\u62112013\u5e74\u5211\u6cd5\u4fee\u6b63\u6848\u7684\u8a73\u7d30\u5167\u5bb9\u3002", "function": {"name": "get_act_details", "description": "Retrieve the details of a particular legal act based on its name and year of amendment if any.", "parameters": {"type": "dict", "properties": {"act_name": {"type": "string", "description": "The name of the act."}, "amendment_year": {"type": "integer", "description": "Year of amendment if any. If not provided, the latest amendment year will be considered."}}, "required": ["act_name", "amendment_year"]}}}, "model_result_raw": "get_act_details(act_name='\u5211\u6cd5', amendment_year=2013)", "model_result_decoded": [{"get_act_details": {"act_name": "\u5211\u6cd5", "amendment_year": 2013}}], "possible_answer": {"get_act_details": {"act_name": ["Criminal Law Amendment Act", "Criminal Law Amendment", "\u5211\u6cd5\u4fee\u6b63\u6848"], "amendment_year": [2013]}}}
{"id": 162, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'crime': 'Larceny'. Expected one of ['theft', '\u7aca\u76dc\u7f6a', '\u76dc\u7aca\u7f6a', '\u76dc\u7aca']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_161", "question": "\u8a73\u7d30\u4e86\u89e3\u52a0\u5dde\u76dc\u7aca\u7f6a\u7684\u53ef\u80fd\u8655\u7f70\u3002", "function": {"name": "crime_statute_lookup", "description": "Look up the criminal statutes in a specific jurisdiction to find possible punishments for a specific crime.", "parameters": {"type": "dict", "properties": {"jurisdiction": {"type": "string", "description": "The jurisdiction to search in, usually a state or country."}, "crime": {"type": "string", "description": "The crime to search for."}, "detail_level": {"type": "string", "enum": ["basic", "detailed"], "description": "How detailed of a report to return. Optional, default is 'basic'."}}, "required": ["jurisdiction", "crime"]}}}, "model_result_raw": "crime_statute_lookup(jurisdiction='California', crime='Larceny', detail_level='detailed')", "model_result_decoded": [{"crime_statute_lookup": {"jurisdiction": "California", "crime": "Larceny", "detail_level": "detailed"}}], "possible_answer": {"crime_statute_lookup": {"jurisdiction": ["California", "CA", "\u52a0\u5dde", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde"], "crime": ["theft", "\u7aca\u76dc\u7f6a", "\u76dc\u7aca\u7f6a", "\u76dc\u7aca"], "detail_level": ["detailed", "\u8a73\u7d30"]}}}
{"id": 163, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'contract_type': 'rental'. Expected one of ['Rental Agreement', 'rental agreement', '\u79df\u8cc3\u5354\u8b70', '\u79df\u5951']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_162", "question": "\u751f\u6210\u7d04\u7ff0\u548c\u611b\u9e97\u7d72\u5728\u52a0\u5dde\u79df\u8cc3\u5354\u8b70\u7684\u5b9a\u5236\u6cd5\u5f8b\u5408\u540c\u3002", "function": {"name": "generate_law_contract", "description": "Generates a customized law contract given involved parties, contract type and location.", "parameters": {"type": "dict", "properties": {"parties": {"type": "array", "items": {"type": "string"}, "description": "Parties involved in the contract."}, "contract_type": {"type": "string", "description": "Type of the contract."}, "location": {"type": "string", "description": "Location where the contract will be in effect."}}, "required": ["parties", "contract_type", "location"]}}}, "model_result_raw": "generate_law_contract(parties=['John', 'Alice'], contract_type='rental', location='California')", "model_result_decoded": [{"generate_law_contract": {"parties": ["John", "Alice"], "contract_type": "rental", "location": "California"}}], "possible_answer": {"generate_law_contract": {"parties": [["John", "Alice"], ["John", "Alice"], ["\u7d04\u7ff0", "\u611b\u9e97\u7d72"], ["\u611b\u9e97\u7d72", "\u7d04\u7ff0"]], "contract_type": ["Rental Agreement", "rental agreement", "\u79df\u8cc3\u5354\u8b70", "\u79df\u5951"], "location": ["California", "CA", "\u52a0\u5dde", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde"]}}}
{"id": 166, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u6d1b\u6749\u78ef\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde'. Expected one of ['Los Angeles', 'Los Angeles, California', '\u6d1b\u6749\u78ef', '\u52a0\u5dde\u6d1b\u6749\u78ef', '\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_165", "question": "\u5f9e2020\u5e74\u7684\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef\u7684\u76dc\u7aca\u6848\u4ef6\u4e2d\u6aa2\u7d22\u6848\u4ef6", "function": {"name": "civil_cases.retrieve", "description": "Retrieve civil cases based on given parameters, including year, crime type, and location.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "Year of the cases"}, "crime_type": {"type": "string", "description": "Type of the crime."}, "location": {"type": "string", "description": "Location of the case in the format of city name."}}, "required": ["year", "crime_type", "location"]}}}, "model_result_raw": "civil_cases.retrieve(year=2020, crime_type='\u76dc\u7aca', location='\u6d1b\u6749\u78ef\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde')", "model_result_decoded": [{"civil_cases.retrieve": {"year": 2020, "crime_type": "\u76dc\u7aca", "location": "\u6d1b\u6749\u78ef\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde"}}], "possible_answer": {"civil_cases.retrieve": {"year": [2020], "crime_type": ["theft", "\u7aca\u76dc\u7f6a", "\u76dc\u7aca\u7f6a", "\u76dc\u7aca"], "location": ["Los Angeles", "Los Angeles, California", "\u6d1b\u6749\u78ef", "\u52a0\u5dde\u6d1b\u6749\u78ef", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef"]}}}
{"id": 167, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'specialty': ['Divorce']. Expected one of [['Divorce', '\u96e2\u5a5a']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_166", "question": "\u5728\u829d\u52a0\u54e5\u5c0b\u627e\u5c08\u9580\u8655\u7406\u96e2\u5a5a\u6848\u4ef6\u4e26\u6bcf\u5c0f\u6642\u6536\u8cbb\u4f4e\u65bc400\u7f8e\u5143\u7684\u5f8b\u5e2b\u3002", "function": {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}}, "model_result_raw": "lawyer.find_nearby(city='Chicago, IL', specialty=['Divorce'], fee=400)", "model_result_decoded": [{"lawyer.find_nearby": {"city": "Chicago, IL", "specialty": ["Divorce"], "fee": 400}}], "possible_answer": {"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL", "\u829d\u52a0\u54e5", "\u4f0a\u5229\u8afe\u5dde\u829d\u52a0\u54e5", "\u829d\u52a0\u54e5, IL"], "specialty": [["Divorce", "\u96e2\u5a5a"]], "fee": [400]}}}
{"id": 174, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'judicial_system': '\u5dde\u6cd5'. Expected one of ['state', '\u5dde']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_173", "question": "\u5c0b\u627e\u7d10\u7d04\u5dde\u5f9e2015\u5e74\u81f32021\u5e74\u904e\u53bb5\u5e74\u9593\u8207\u571f\u5730\u722d\u8b70\u6709\u95dc\u7684\u5dde\u6cd5\u6848\u4ef6\u3002", "function": {"name": "law_case_search", "description": "Search and retrieve law cases based on the topic, timeline, and location.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The subject matter of the case."}, "year_range": {"type": "array", "items": {"type": "integer"}, "description": "The start and end year for searching cases."}, "location": {"type": "string", "description": "The location where the case is being heard."}, "judicial_system": {"type": "string", "description": "The specific judicial system in which to search (e.g. 'federal', 'state').", "default": "all"}}, "required": ["topic", "year_range", "location"]}}}, "model_result_raw": "law_case_search(topic='\u571f\u5730\u722d\u8b70', year_range=[2015, 2021], location='\u7d10\u7d04\u5dde', judicial_system='\u5dde\u6cd5')", "model_result_decoded": [{"law_case_search": {"topic": "\u571f\u5730\u722d\u8b70", "year_range": [2015, 2021], "location": "\u7d10\u7d04\u5dde", "judicial_system": "\u5dde\u6cd5"}}], "possible_answer": {"law_case_search": {"topic": ["land disputes", "\u571f\u319e\u7cfe\u7d1b", "\u571f\u5730\u722d\u8b70"], "year_range": [[2015, 2021]], "location": ["New York", "\u7d10\u7d04", "\u7d10\u7d04\u5dde"], "judicial_system": ["state", "\u5dde"]}}}
{"id": 175, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'field_of_law': '\u61b2\u6cd5\u6cd5\u5f8b'. Expected one of ['constitutional law', 'constitutional', '\u61b2\u6cd5']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_174", "question": "\u7d66\u6211\u4e2d\u570b\u61b2\u6cd5\u6cd5\u5f8b\u4e2d\u7684\u524d\u5341\u500b\u91cc\u7a0b\u7891\u6848\u4f8b\u3002", "function": {"name": "get_top_cases", "description": "Retrieve a list of the most influential or landmark cases in a specific field of law.", "parameters": {"type": "dict", "properties": {"field_of_law": {"type": "string", "description": "The specific field of law e.g., constitutional law, criminal law, etc."}, "top_number": {"type": "integer", "description": "The number of top cases to retrieve."}, "country": {"type": "string", "description": "The country where the law cases should be retrieved from. Default is United States of America."}}, "required": ["field_of_law", "top_number"]}}}, "model_result_raw": "get_top_cases(field_of_law='\u61b2\u6cd5\u6cd5\u5f8b', top_number=10, country='\u4e2d\u570b')", "model_result_decoded": [{"get_top_cases": {"field_of_law": "\u61b2\u6cd5\u6cd5\u5f8b", "top_number": 10, "country": "\u4e2d\u570b"}}], "possible_answer": {"get_top_cases": {"field_of_law": ["constitutional law", "constitutional", "\u61b2\u6cd5"], "top_number": [10], "country": ["China", "CN", "\u4e2d\u570b"]}}}
{"id": 184, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara'. Expected one of ['Santa Clara County', '\u8056\u5854\u514b\u62c9\u62c9', '\u8056\u5854\u514b\u62c9\u62c9\u7e23']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_183", "question": "\u5728\u8056\u5854\u514b\u62c9\u62c9\u7e23\u641c\u7d22\u76ee\u524d\u5c0d\u860b\u679c\u63d0\u8d77\u7684\u8a34\u8a1f\u3002", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": "lawsuit_search(entity='\u860b\u679c', county='Santa Clara', state='California')", "model_result_decoded": [{"lawsuit_search": {"entity": "\u860b\u679c", "county": "Santa Clara", "state": "California"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple", "\u860b\u679c"], "county": ["Santa Clara County", "\u8056\u5854\u514b\u62c9\u62c9", "\u8056\u5854\u514b\u62c9\u62c9\u7e23"], "state": ["California", "", "\u52a0\u5dde", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde"]}}}
{"id": 190, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York, US'. Expected one of ['New York', 'New York, USA', '\u7d10\u7d04', '\u7f8e\u570b\u7d10\u7d04', '\u7d10\u7d04\uff0c\u7f8e\u570b']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_189", "question": "\u7372\u53d6\u7d10\u7d04\uff0c\u7f8e\u570b\u672a\u4f863\u5929\u7684\u5929\u6c23\u8cc7\u8a0a\uff0c\u5305\u62ec\u8a73\u7d30\u4fe1\u606f\u3002", "function": {"name": "weather_forecast_detailed", "description": "Retrieve a detailed weather forecast for a specific city like Boston and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "boolean", "description": "Provide detailed weather information or not.", "default": false}}, "required": ["location", "days"]}}}, "model_result_raw": "weather_forecast_detailed(location='New York, US', days=3, details=True)", "model_result_decoded": [{"weather_forecast_detailed": {"location": "New York, US", "days": 3, "details": true}}], "possible_answer": {"weather_forecast_detailed": {"location": ["New York", "New York, USA", "\u7d10\u7d04", "\u7f8e\u570b\u7d10\u7d04", "\u7d10\u7d04\uff0c\u7f8e\u570b"], "days": [3], "details": [true]}}}
{"id": 192, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Denver, CO'. Expected one of ['Denver, Colorado', 'Denver', 'CO', '\u4e39\u4f5b', '\u79d1\u7f85\u62c9\u591a\u5dde', '\u79d1\u7f85\u62c9\u591a\u5dde\u4e39\u4f5b', '\u4e39\u4f5b, \u79d1\u7f85\u62c9\u591a\u5dde']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_191", "question": "\u8acb\u5e6b\u6211\u627e\u51fa\u79d1\u7f85\u62c9\u591a\u5dde\u4e39\u4f5b\u5e02\u9644\u8fd150\u516c\u91cc\u5167\u6700\u9ad8\u76845\u5ea7\u5c71\u5cf0\u3002", "function": {"name": "locate_tallest_mountains", "description": "Find the tallest mountains within a specified radius of a location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city from which to calculate distance."}, "radius": {"type": "integer", "description": "The radius within which to find mountains, measured in kilometers."}, "amount": {"type": "integer", "description": "The number of mountains to find, listed from tallest to smallest."}}, "required": ["location", "radius", "amount"]}}}, "model_result_raw": "locate_tallest_mountains(location='Denver, CO', radius=50, amount=5)", "model_result_decoded": [{"locate_tallest_mountains": {"location": "Denver, CO", "radius": 50, "amount": 5}}], "possible_answer": {"locate_tallest_mountains": {"location": ["Denver, Colorado", "Denver", "CO", "\u4e39\u4f5b", "\u79d1\u7f85\u62c9\u591a\u5dde", "\u79d1\u7f85\u62c9\u591a\u5dde\u4e39\u4f5b", "\u4e39\u4f5b, \u79d1\u7f85\u62c9\u591a\u5dde"], "radius": [50], "amount": [5]}}}
{"id": 198, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time': '12:00 PM'. Expected one of ['12pm', '12:00']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_197", "question": "\u5728\u4e0b\u534812\u9ede\u5c0b\u627e\u8056\u5730\u4e9e\u54e5\u7684\u7a7a\u6c23\u8cea\u91cf\u6307\u6578\u3002", "function": {"name": "get_air_quality_index", "description": "Retrieve the air quality index at a specified location and time.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to get the air quality index for."}, "time": {"type": "string", "description": "The specific time to check the air quality. Default is the current time."}}, "required": ["location", "time"]}}}, "model_result_raw": "get_air_quality_index(location='San Diego', time='12:00 PM')", "model_result_decoded": [{"get_air_quality_index": {"location": "San Diego", "time": "12:00 PM"}}], "possible_answer": {"get_air_quality_index": {"location": ["San Diego", "\u8056\u5730\u4e9e\u54e5"], "time": ["12pm", "12:00"]}}}
{"id": 201, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fuel_type': 'gasoline'. Expected one of ['gas', '\u6c7d\u6cb9']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_200", "question": "\u4e00\u8f1b\u4ee5\u6c7d\u6cb9\u70ba\u71c3\u6599\uff0c\u6bcf\u5e74\u884c\u99db12,000\u82f1\u91cc\uff0c\u71c3\u6cb9\u6548\u7387\u70ba25\u82f1\u91cc/\u52a0\u4f96\u7684\u6c7d\u8eca\u6bcf\u5e74\u7522\u751f\u591a\u5c11\u4e8c\u6c27\u5316\u78b3\uff1f", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}}, "model_result_raw": "calculate_emissions(distance=12000, fuel_type='gasoline', fuel_efficiency=25)", "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gasoline", "fuel_efficiency": 25}}], "possible_answer": {"calculate_emissions": {"distance": [12000], "fuel_type": ["gas", "\u6c7d\u6cb9"], "fuel_efficiency": ["", 25.0], "efficiency_reduction": [0, ""]}}}
{"id": 203, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'solar'. Expected one of ['renewable', '\u53ef\u518d\u751f']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_202", "question": "\u5982\u679c\u6211\u5728\u52a0\u5dde\u8f49\u63db\u70ba\u53ef\u518d\u751f\u80fd\u6e90\u4f86\u6e903\u500b\u6708\uff0c\u6211\u5c07\u80fd\u5920\u7bc0\u7701\u591a\u5c11\u6eab\u5ba4\u6c23\u9ad4\u6392\u653e\u91cf\uff1f", "function": {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}}, "model_result_raw": "calculate_emission_savings(energy_type='solar', usage_duration=3, region='California')", "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "solar", "usage_duration": 3, "region": "California"}}], "possible_answer": {"calculate_emission_savings": {"energy_type": ["renewable", "\u53ef\u518d\u751f"], "usage_duration": [3], "region": ["California", "CA", "\u52a0\u5dde", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde"]}}}
{"id": 204, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Optional parameter 'detail' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_203", "question": "\u4f60\u80fd\u5e6b\u6211\u627e\u5230\u829d\u52a0\u54e5\u6700\u65b0\u7684\u7a7a\u6c23\u8cea\u91cf\u6307\u6578\u548c\u6c61\u67d3\u6578\u64da\u55ce\uff1f", "function": {"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."}, "historical": {"type": "string", "description": "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.", "default": "today"}}, "required": ["location"]}}}, "model_result_raw": "get_air_quality(location='\u829d\u52a0\u54e5')", "model_result_decoded": [{"get_air_quality": {"location": "\u829d\u52a0\u54e5"}}], "possible_answer": {"get_air_quality": {"location": ["Chicago", "\u829d\u52a0\u54e5"], "detail": [true], "historical": ["", "today"]}}}
{"id": 230, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'characteristics': ['high_efficiency', 'organized', 'friendly', 'empathetic']. Expected one of [['efficient', 'organized', 'easy going', 'compassionate'], ['\u9ad8\u6548\u7387', '\u6709\u7d44\u7e54', '\u96a8\u548c', '\u540c\u60c5\u5fc3']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_229", "question": "\u5982\u679c\u6211\u662f\u9ad8\u6548\u7387\u3001\u6709\u7d44\u7e54\u3001\u96a8\u548c\u548c\u6709\u540c\u60c5\u5fc3\u7684\u4eba\uff0c\u6211\u7684\u5927\u4e94\u4eba\u683c\u7279\u8cea\u5f97\u5206\u662f\u591a\u5c11\uff1f", "function": {"name": "get_bigfive_scores", "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.", "parameters": {"type": "dict", "properties": {"characteristics": {"type": "array", "items": {"type": "string"}, "description": "List of user's behavioural characteristics."}, "scale": {"type": "string", "enum": ["high", "medium", "low"], "description": "The scoring scale of traits (default is medium)."}}, "required": ["characteristics"]}}}, "model_result_raw": "get_bigfive_scores(characteristics=['high_efficiency', 'organized', 'friendly', 'empathetic'], scale='medium')", "model_result_decoded": [{"get_bigfive_scores": {"characteristics": ["high_efficiency", "organized", "friendly", "empathetic"], "scale": "medium"}}], "possible_answer": {"get_bigfive_scores": {"characteristics": [["efficient", "organized", "easy going", "compassionate"], ["\u9ad8\u6548\u7387", "\u6709\u7d44\u7e54", "\u96a8\u548c", "\u540c\u60c5\u5fc3"]], "scale": ["medium", "", "\u4e2d"]}}}
{"id": 236, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': 'Lisbon Treaty'. Expected one of ['Treaty of Lisbon', 'Signing of the Treaty of Lisbon', 'The signing of the Treaty of Lisbon', '\u91cc\u65af\u672c\u689d\u7d04', '\u91cc\u65af\u672c\u689d\u7d04\u7c3d\u7f72', '\u7c3d\u7f72\u91cc\u65af\u672c\u689d\u7d04']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_235", "question": "\u91cc\u65af\u672c\u689d\u7d04\u662f\u5728\u4ec0\u9ebc\u6642\u5019\u7c3d\u7f72\u7684\uff1f", "function": {"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Default to global if not specified."}}, "required": ["event"]}}}, "model_result_raw": "get_event_date(event='Lisbon Treaty')", "model_result_decoded": [{"get_event_date": {"event": "Lisbon Treaty"}}], "possible_answer": {"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon", "The signing of the Treaty of Lisbon", "\u91cc\u65af\u672c\u689d\u7d04", "\u91cc\u65af\u672c\u689d\u7d04\u7c3d\u7f72", "\u7c3d\u7f72\u91cc\u65af\u672c\u689d\u7d04"], "location": [""]}}}
{"id": 239, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': 'Civil War'. Expected one of ['American Civil War', '\u7f8e\u570b\u5167\u6230']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_238", "question": "\u8ab0\u662f\u7f8e\u570b\u5167\u6230\u671f\u9593\u7684\u7e3d\u7d71\uff1f", "function": {"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}}, "model_result_raw": "us_history.get_president(event='Civil War', year=1861)", "model_result_decoded": [{"us_history.get_president": {"event": "Civil War", "year": 1861}}], "possible_answer": {"us_history.get_president": {"event": ["American Civil War", "\u7f8e\u570b\u5167\u6230"], "year": [1861]}}}
{"id": 242, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': 'American Civil War'. Expected one of ['Civil War', '\u5167\u6230', '\u7f8e\u570b\u5167\u6230']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_241", "question": "\u8ab0\u662f\u7f8e\u570b\u5167\u6230\u671f\u9593\u7684\u7e3d\u7d71\uff1f", "function": {"name": "US_President_During_Event", "description": "Returns the U.S. president during a specified historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The historical event."}, "country": {"type": "string", "description": "The country the president leads (optional parameter, defaults to 'USA' if not specified)."}}, "required": ["event"]}}}, "model_result_raw": "US_President_During_Event(event='American Civil War')", "model_result_decoded": [{"US_President_During_Event": {"event": "American Civil War"}}], "possible_answer": {"US_President_During_Event": {"event": ["Civil War", "\u5167\u6230", "\u7f8e\u570b\u5167\u6230"], "country": ["USA", "", "\u7f8e\u570b"]}}}
{"id": 250, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'include_people': True. Expected one of [False, '']."], "error_type": "value_error:others", "prompt": {"id": "simple_249", "question": "\u8acb\u544a\u8a34\u6211\u66f4\u591a\u95dc\u65bc\u57fa\u7763\u6559\u53ca\u5176\u6b77\u53f2\uff0c\u76f4\u523014\u4e16\u7d00\u70ba\u6b62\u3002", "function": {"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}}, "model_result_raw": "religion.history_info(religion='\u57fa\u7763\u6559', till_century=14, include_people=True)", "model_result_decoded": [{"religion.history_info": {"religion": "\u57fa\u7763\u6559", "till_century": 14, "include_people": true}}], "possible_answer": {"religion.history_info": {"religion": ["Christianity", "\u57fa\u7763\u6559"], "till_century": [14], "include_people": [false, ""]}}}
{"id": 258, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'color_name': 'teal'. Expected one of ['Sea Green', '\u6d77\u7da0\u8272', '\u6e56\u6c34\u7da0']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_257", "question": "\u4f60\u80fd\u5e6b\u6211\u8b58\u5225\u6d77\u7da0\u8272\u7684\u57fa\u672cRGB\u503c\u55ce\uff1f", "function": {"name": "identify_color_rgb", "description": "This function identifies the RGB values of a named color.", "parameters": {"type": "dict", "properties": {"color_name": {"type": "string", "description": "Name of the color."}, "standard": {"type": "string", "description": "The color standard (e.g. basic, pantone). Default is 'basic'"}}, "required": ["color_name"]}}}, "model_result_raw": "identify_color_rgb(color_name='teal', standard='basic')", "model_result_decoded": [{"identify_color_rgb": {"color_name": "teal", "standard": "basic"}}], "possible_answer": {"identify_color_rgb": {"color_name": ["Sea Green", "\u6d77\u7da0\u8272", "\u6e56\u6c34\u7da0"], "standard": ["basic", "", "\u57fa\u672c"]}}}
{"id": 265, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'title': '\u300a\u5927\u885b\u300b'. Expected one of ['David', '\u5927\u885b']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_264", "question": "\u5c0b\u627e\u7c73\u958b\u6717\u57fa\u7f85\u7684\u96d5\u5851\u4f5c\u54c1\u300a\u5927\u885b\u300b\u7684\u5c3a\u5bf8\u3002", "function": {"name": "sculpture.get_details", "description": "Retrieve details of a sculpture based on the artist and the title of the sculpture.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist who made the sculpture."}, "title": {"type": "string", "description": "The title of the sculpture."}, "detail": {"type": "string", "description": "The specific detail wanted about the sculpture. Default is 'general information'."}}, "required": ["artist", "title"]}}}, "model_result_raw": "sculpture.get_details(artist='\u7c73\u958b\u6717\u57fa\u7f85', title='\u300a\u5927\u885b\u300b', detail='dimensions')", "model_result_decoded": [{"sculpture.get_details": {"artist": "\u7c73\u958b\u6717\u57fa\u7f85", "title": "\u300a\u5927\u885b\u300b", "detail": "dimensions"}}], "possible_answer": {"sculpture.get_details": {"artist": ["Michelangelo", "\u7c73\u958b\u6717\u57fa\u7f85"], "title": ["David", "\u5927\u885b"], "detail": ["size", "\u5c3a\u5bf8", "\u5927\u5c0f"]}}}
{"id": 268, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'month': 'next'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": "\u5c0b\u627e\u63a5\u4e0b\u4f86\u7684\u5e7e\u500b\u6708\u5728\u7d10\u7d04\u8209\u884c\u7684\u8a55\u50f9\u6700\u9ad8\u7684\u73fe\u4ee3\u96d5\u5851\u5c55\u89bd\u3002", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": "find_exhibition(location='New York City, NY', art_form='sculpture', month='next', user_ratings='high')", "model_result_decoded": [{"find_exhibition": {"location": "New York City, NY", "art_form": "sculpture", "month": "next", "user_ratings": "high"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY", "\u7d10\u7d04\u5e02", "\u7d10\u7d04"], "art_form": ["sculpture", "modern sculpture", "\u96d5\u5851", "\u73fe\u4ee3\u96d5\u5851", "\u96d5\u50cf", "\u73fe\u4ee3\u96d5\u50cf"], "month": [""], "user_ratings": ["high", "\u9ad8", "\u6700\u9ad8"]}}}
{"id": 270, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'compounds_per_year': 10. Expected one of [1, '']."], "error_type": "value_error:others", "prompt": {"id": "simple_269", "question": "\u8a08\u7b97\u4e00\u7b46\u6295\u8cc710,000\u7f8e\u5143\uff0c\u5e74\u5229\u7387\u70ba5%\uff0c\u6bcf\u5e74\u8907\u522910\u5e74\u7684\u8907\u5229\u3002", "function": {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "dict", "properties": {"principle": {"type": "integer", "description": "The initial amount of the investment."}, "interest_rate": {"type": "float", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}}, "model_result_raw": "calculate_compound_interest(principle=10000, interest_rate=0.05, time=10, compounds_per_year=10)", "model_result_decoded": [{"calculate_compound_interest": {"principle": 10000, "interest_rate": 0.05, "time": 10, "compounds_per_year": 10}}], "possible_answer": {"calculate_compound_interest": {"principle": [10000], "interest_rate": [0.05], "time": [10], "compounds_per_year": [1, ""]}}}
{"id": 274, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': 'Louvre'. Expected one of ['Louvre Museum', '\u7f85\u6d6e\u5bae']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_273", "question": "\u5c0b\u627e\u5df4\u9ece\u7f85\u6d6e\u5bae\u7684\u958b\u653e\u6642\u9593\u3002", "function": {"name": "museum.get_hours", "description": "Retrieve the open hours for a museum based on its name and location.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The city where the museum is located."}, "day": {"type": "string", "description": "Optional: Day of the week for specific open hours. Default 'Monday'."}}, "required": ["name", "location"]}}}, "model_result_raw": "museum.get_hours(name='Louvre', location='Paris')", "model_result_decoded": [{"museum.get_hours": {"name": "Louvre", "location": "Paris"}}], "possible_answer": {"museum.get_hours": {"name": ["Louvre Museum", "\u7f85\u6d6e\u5bae"], "location": ["Paris", "Paris, France", "\u5df4\u9ece", "\u6cd5\u570b\u5df4\u9ece"], "day": ["", "Monday", "\u661f\u671f\u4e00", "\u9031\u4e00"]}}}
{"id": 278, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Optional parameter 'information' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_277", "question": "\u5c0b\u627e\u9019\u500b\u9031\u672b\u5927\u82f1\u535a\u7269\u9928\u7684\u71df\u696d\u6642\u9593\u548c\u9580\u7968\u50f9\u683c\u3002", "function": {"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date or date range for which information is needed. It could be specific date such as '2022-12-01' or a date range like 'this weekend', 'next week'. It could also be a recurring time such as 'every Saturday'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}}, "model_result_raw": "museum_info(museum='\u5927\u82f1\u535a\u7269\u9928', date='\u9019\u500b\u9031\u672b')", "model_result_decoded": [{"museum_info": {"museum": "\u5927\u82f1\u535a\u7269\u9928", "date": "\u9019\u500b\u9031\u672b"}}], "possible_answer": {"museum_info": {"museum": ["The British Museum", "\u5927\u82f1\u535a\u7269\u9928"], "date": ["this weekend", "2023-06-20", "06/20/2023", "Jun.20,2023", "\u9019\u500b\u9031\u672b"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"], ["\u9580\u7968\u50f9\u683c", "\u71df\u696d\u6642\u9593"], ["\u71df\u696d\u6642\u9593", "\u9580\u7968\u50f9\u683c"]]}}}
{"id": 279, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'instrument': 'Yamaha Pianos'. Expected one of ['piano', '\u92fc\u7434']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_278", "question": "\u627e\u51fa\u6211Yamaha\u92fc\u7434\u7684\u5e73\u5747\u50f9\u683c\u548c\u8a55\u7d1a\u3002", "function": {"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}}, "model_result_raw": "get_instrument_details(instrument='Yamaha Pianos', manufacturer='Yamaha', features=['price', 'rating'])", "model_result_decoded": [{"get_instrument_details": {"instrument": "Yamaha Pianos", "manufacturer": "Yamaha", "features": ["price", "rating"]}}], "possible_answer": {"get_instrument_details": {"instrument": ["piano", "\u92fc\u7434"], "manufacturer": ["Yamaha", "\u5c71\u8449"], "features": [["price", "rating"], ["price", "rating"], ["\u50f9\u683c", "\u8a55\u7d1a"], ["\u8a55\u7d1a", "\u50f9\u683c"]]}}}
{"id": 284, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'Good'. Expected one of ['Excellent', '\u826f\u597d']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_283", "question": "\u5c0b\u627e\u829d\u52a0\u54e5\u5730\u5340\u72c0\u6cc1\u826f\u597d\u7684\u4e8c\u624bGibson Les Paul\u5409\u4ed6\u7684\u50f9\u683c\u3002", "function": {"name": "guitar_price.find", "description": "Retrieve the price of a specific used guitar model based on its condition and location.", "parameters": {"type": "dict", "properties": {"model": {"type": "string", "description": "The model of the guitar."}, "condition": {"type": "string", "enum": ["Poor", "Good", "Excellent"], "description": "The condition of the guitar."}, "location": {"type": "string", "description": "The location where the guitar is being sold."}}, "required": ["model", "condition", "location"]}}}, "model_result_raw": "guitar_price.find(model='Gibson Les Paul', condition='Good', location='Chicago')", "model_result_decoded": [{"guitar_price.find": {"model": "Gibson Les Paul", "condition": "Good", "location": "Chicago"}}], "possible_answer": {"guitar_price.find": {"model": ["Gibson Les Paul"], "condition": ["Excellent", "\u826f\u597d"], "location": ["Chicago", "Chicago, IL", "Chicago, Illinois", "\u829d\u52a0\u54e5", "\u4f0a\u5229\u8afe\u5dde\u829d\u52a0\u54e5"]}}}
{"id": 305, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': '\u6e56\u4eba'. Expected one of ['Los Angeles Lakers', 'LAL', 'Lakers', '\u6d1b\u6749\u78ef\u6e56\u4eba', '\u6e56\u4eba\u968a']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_304", "question": "\u7372\u53d6\u4e0a\u4e00\u5834\u7c43\u7403\u6bd4\u8cfd\u4e2d\u7403\u54e1\u300c\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af\u300d\u7684\u5f97\u5206\u548c\u7c43\u677f\u6578\u64da", "function": {"name": "player_stats.getLastGame", "description": "Get last game statistics for a specific player in basketball", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that player currently plays for."}, "metrics": {"type": "array", "items": {"type": "string", "enum": ["Points", "Rebounds", "Assists", "Blocks"]}, "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default."}}, "required": ["player_name", "team"]}}}, "model_result_raw": "player_stats.getLastGame(player_name='\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af', team='\u6e56\u4eba', metrics=['Points', 'Rebounds'])", "model_result_decoded": [{"player_stats.getLastGame": {"player_name": "\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af", "team": "\u6e56\u4eba", "metrics": ["Points", "Rebounds"]}}], "possible_answer": {"player_stats.getLastGame": {"player_name": ["LeBron James", "\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af", "\u52d2\u5e03\u6717\u8a79\u59c6\u65af"], "team": ["Los Angeles Lakers", "LAL", "Lakers", "\u6d1b\u6749\u78ef\u6e56\u4eba", "\u6e56\u4eba\u968a"], "metrics": [["Points", "Rebounds"], ["\u5f97\u5206", "\u7c43\u677f"]]}}}
{"id": 319, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team_name': 'Germany Men'. Expected one of ['Germany', '\u5fb7\u570b']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_318", "question": "\u5fb7\u570b\u7537\u5b50\u8db3\u7403\u968a\u57282021\u5e74\u7684FIFA\u6392\u540d\u662f\u591a\u5c11\uff1f", "function": {"name": "get_team_ranking", "description": "Retrieve the FIFA ranking of a specific soccer team for a certain year.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer team."}, "year": {"type": "integer", "description": "The year for which the ranking is to be retrieved."}, "gender": {"type": "string", "description": "The gender of the team. It can be either 'men' or 'women'. Default is 'men'."}}, "required": ["team_name", "year"]}}}, "model_result_raw": "get_team_ranking(team_name='Germany Men', year=2021)", "model_result_decoded": [{"get_team_ranking": {"team_name": "Germany Men", "year": 2021}}], "possible_answer": {"get_team_ranking": {"team_name": ["Germany", "\u5fb7\u570b"], "year": [2021], "gender": ["men", "", "\u7537\u5b50", "\u7537"]}}}
{"id": 329, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': '\u901a\u5f80\u69ae\u8000\u4e4b\u8def'. Expected one of ['Ticket to Ride', '\u9435\u9053\u4efb\u52d9']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_328", "question": "\u5c0b\u627e\u684c\u904a\u300a\u9435\u9053\u4efb\u52d9\u300b\u7684\u8a55\u5206\u548c\u73a9\u5bb6\u4eba\u6578\u3002", "function": {"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}}, "model_result_raw": "boardgame.get_info(name='\u901a\u5f80\u69ae\u8000\u4e4b\u8def', parameters=['player count', 'rating'])", "model_result_decoded": [{"boardgame.get_info": {"name": "\u901a\u5f80\u69ae\u8000\u4e4b\u8def", "parameters": ["player count", "rating"]}}], "possible_answer": {"boardgame.get_info": {"name": ["Ticket to Ride", "\u9435\u9053\u4efb\u52d9"], "parameters": [["rating", "player count"], ["player count", "rating"], ["\u8a55\u5206", "\u73a9\u5bb6\u4eba\u6578"], ["\u73a9\u5bb6\u4eba\u6578", "\u8a55\u5206"]], "language": ["", "English", "\u82f1\u6587"]}}}
{"id": 334, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'London, UK'. Expected one of ['London, United Kingdom', 'London', '\u502b\u6566', '\u82f1\u570b\u502b\u6566', '\u502b\u6566, \u82f1\u570b']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_333", "question": "\u5c0b\u627e\u82f1\u570b\u502b\u6566\u672a\u4f863\u5929\u7684\u9ad8\u4f4e\u6eab\u5ea6\uff0c\u6fd5\u5ea6\u548c\u964d\u6c34\u91cf\u3002", "function": {"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "array", "items": {"type": "string", "enum": ["high_low_temperature", "humidity", "precipitation"]}, "description": "Specific weather details required in the forecast."}}, "required": ["location", "days", "details"]}}}, "model_result_raw": "detailed_weather_forecast(location='London, UK', days=3, details=['high_low_temperature', 'humidity', 'precipitation'])", "model_result_decoded": [{"detailed_weather_forecast": {"location": "London, UK", "days": 3, "details": ["high_low_temperature", "humidity", "precipitation"]}}], "possible_answer": {"detailed_weather_forecast": {"location": ["London, United Kingdom", "London", "\u502b\u6566", "\u82f1\u570b\u502b\u6566", "\u502b\u6566, \u82f1\u570b"], "days": [3], "details": [["high_low_temperature", "humidity", "precipitation"], ["\u9ad8\u4f4e\u6eab\u5ea6", "\u6fd5\u5ea6", "\u964d\u96e8\u91cf"]]}}}
{"id": 345, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game': 'The Legend of Zelda: Breath of the Wild'. Expected one of ['Legend of Zelda: Breath of the Wild', '\u85a9\u723e\u9054\u50b3\u8aaa \u8352\u91ce\u4e4b\u606f', '\u85a9\u723e\u9054\u50b3\u8aaa\uff1a\u8352\u91ce\u4e4b\u606f']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_344", "question": "\u5728\u904a\u6232\u300a\u85a9\u723e\u9054\u50b3\u8aaa: \u66e0\u91ce\u4e4b\u606f\u300b\u4e2d\uff0c\u6b66\u5668\u300c\u5b88\u8b77\u8005\u4e4b\u528d+\u300d\u7684power rating\u662f\u591a\u5c11\uff1f", "function": {"name": "get_game_item_stats", "description": "Retrieve the statistics of a specific item in a specific video game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game to retrieve information from."}, "item": {"type": "string", "description": "The name of the item in the game."}, "stat": {"type": "string", "description": "Specific statistic required."}}, "required": ["game", "item", "stat"]}}}, "model_result_raw": "get_game_item_stats(game='The Legend of Zelda: Breath of the Wild', item='Guardian Sword+', stat='power rating')", "model_result_decoded": [{"get_game_item_stats": {"game": "The Legend of Zelda: Breath of the Wild", "item": "Guardian Sword+", "stat": "power rating"}}], "possible_answer": {"get_game_item_stats": {"game": ["Legend of Zelda: Breath of the Wild", "\u85a9\u723e\u9054\u50b3\u8aaa \u8352\u91ce\u4e4b\u606f", "\u85a9\u723e\u9054\u50b3\u8aaa\uff1a\u8352\u91ce\u4e4b\u606f"], "item": ["Guardian Sword+", "\u5b88\u8b77\u8005\u4e4b\u528d+"], "stat": ["Power", "power", "power rating"]}}}
{"id": 356, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe': 'Beef Stroganoff'. Expected one of ['Beef Lasagna', '\u725b\u8089\u5343\u5c64\u9eb5']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_355", "question": "\u98df\u8b5c\u7db2\u7ad9Foodnetwork.com\u7684\u725b\u8089\u5343\u5c64\u9eb5\u98df\u8b5c\u6709\u591a\u5c11\u5361\u8def\u91cc\uff1f", "function": {"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "dict", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified."}}, "required": ["website", "recipe"]}}}, "model_result_raw": "recipe_info.get_calories(website='Foodnetwork.com', recipe='Beef Stroganoff')", "model_result_decoded": [{"recipe_info.get_calories": {"website": "Foodnetwork.com", "recipe": "Beef Stroganoff"}}], "possible_answer": {"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna", "\u725b\u8089\u5343\u5c64\u9eb5"], "optional_meal_time": [""]}}}
{"id": 359, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dish': '\u7121\u9ea9\u8cea\u9905\u4e7e'. Expected one of ['cookie', '\u9905\u4e7e']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_358", "question": "\u5c0b\u627e\u4e00\u500b\u7121\u9ea9\u8cea\u9905\u4e7e\u98df\u8b5c\uff0c\u6e96\u5099\u6642\u9593\u5c11\u65bc30\u5206\u9418\u3002", "function": {"name": "recipe_search", "description": "Search for a cooking recipe based on specific dietary needs and time constraint.", "parameters": {"type": "dict", "properties": {"diet": {"type": "array", "items": {"type": "string", "enum": ["Gluten Free", "Dairy Free", "Vegan", "Vegetarian"]}, "description": "Specific dietary need."}, "time_limit": {"type": "integer", "description": "The maximum time to prepare the recipe in minutes. Default is 60 minutes."}, "dish": {"type": "string", "description": "The name of the dish to search for. Default is not use if not specified."}}, "required": ["dish", "diet"]}}}, "model_result_raw": "recipe_search(diet=['Gluten Free'], time_limit=30, dish='\u7121\u9ea9\u8cea\u9905\u4e7e')", "model_result_decoded": [{"recipe_search": {"diet": ["Gluten Free"], "time_limit": 30, "dish": "\u7121\u9ea9\u8cea\u9905\u4e7e"}}], "possible_answer": {"recipe_search": {"diet": [["Gluten Free"], ["GF"], ["gluten free"], ["\u7121\u9ea9\u8cea"]], "time_limit": [30], "dish": ["cookie", "\u9905\u4e7e"]}}}
{"id": 360, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'ingredients': ['spaghetti', 'cheese']. Expected one of [['pasta', 'cheese'], ['\u7fa9\u5927\u5229\u9eb5', '\u4e73\u916a'], ['\u7fa9\u5927\u5229\u9eb5', '\u8d77\u53f8']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_359", "question": "\u7d66\u6211\u4e00\u500b\u5169\u4eba\u4efd\u91cf\u7684\u7d20\u98df\u7fa9\u5927\u5229\u9eb5\u548c\u4e73\u916a\u7684\u98df\u8b5c\u3002", "function": {"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "dict", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}}, "model_result_raw": "recipe_search(dietary_restriction='Vegetarian', ingredients=['spaghetti', 'cheese'], servings=2)", "model_result_decoded": [{"recipe_search": {"dietary_restriction": "Vegetarian", "ingredients": ["spaghetti", "cheese"], "servings": 2}}], "possible_answer": {"recipe_search": {"dietary_restriction": ["Vegetarian", "\u7d20\u98df"], "ingredients": [["pasta", "cheese"], ["\u7fa9\u5927\u5229\u9eb5", "\u4e73\u916a"], ["\u7fa9\u5927\u5229\u9eb5", "\u8d77\u53f8"]], "servings": [2]}}}
{"id": 361, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipeName': '\u610f\u5927\u5229\u78b3\u62cc\u9eb5'. Expected one of ['pasta carbonara', '\u7fa9\u5927\u5229\u78b3\u62cc\u9eb5']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_360", "question": "\u5c0b\u627e\u4e00\u500b\u53ea\u542b\u6709\u5c11\u65bc500\u5361\u8def\u91cc\u7684\u7fa9\u5927\u5229\u78b3\u62cc\u9eb5\u98df\u8b5c\u3002", "function": {"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}}, "model_result_raw": "find_recipe(recipeName='\u610f\u5927\u5229\u78b3\u62cc\u9eb5', maxCalories=500)", "model_result_decoded": [{"find_recipe": {"recipeName": "\u610f\u5927\u5229\u78b3\u62cc\u9eb5", "maxCalories": 500}}], "possible_answer": {"find_recipe": {"recipeName": ["pasta carbonara", "\u7fa9\u5927\u5229\u78b3\u62cc\u9eb5"], "maxCalories": [500]}}}
{"id": 362, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cuisine': '\u610f\u5927\u5229\u83dc'. Expected one of ['Italian', '\u7fa9\u5927\u5229', '\u7fa9\u5f0f']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_361", "question": "\u5c0b\u627e\u7d10\u7d04\u5e02\u9644\u8fd1\u63d0\u4f9b\u7121\u9ea9\u8cea\u9078\u64c7\u7684\u7fa9\u5927\u5229\u9910\u5ef3\u3002", "function": {"name": "restaurant_finder", "description": "Locate restaurants based on certain criteria such as cuisine, city, and dietary preferences.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "City where you are looking for the restaurant."}, "cuisine": {"type": "string", "description": "Type of cuisine you are interested in."}, "diet": {"type": "string", "description": "Dietary preferences. e.g. 'Vegetarian', 'Gluten-free', etc. Default 'Vegetarian'."}}, "required": ["city", "cuisine"]}}}, "model_result_raw": "restaurant_finder(city='\u7d10\u7d04\u5e02', cuisine='\u610f\u5927\u5229\u83dc', diet='\u7121\u9ea9\u8cea')", "model_result_decoded": [{"restaurant_finder": {"city": "\u7d10\u7d04\u5e02", "cuisine": "\u610f\u5927\u5229\u83dc", "diet": "\u7121\u9ea9\u8cea"}}], "possible_answer": {"restaurant_finder": {"city": ["New York City", "New York City, NY", "NYC", "New York", "\u7d10\u7d04\u5e02", "\u7d10\u7d04"], "cuisine": ["Italian", "\u7fa9\u5927\u5229", "\u7fa9\u5f0f"], "diet": ["Gluten-free", "\u7121\u9ea9\u8cea"]}}}
{"id": 363, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'review_rate': 4.5. Expected one of [4.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_362", "question": "\u6771\u4eac\u6709\u54ea\u4e9b\u8a55\u50f9\u9ad8\u65bc4/5\u7684\u524d\u4e94\u5bb6\u58fd\u53f8\u9910\u5ef3\uff1f", "function": {"name": "get_best_sushi_places", "description": "Returns the best sushi places given the city, review_rate and top number.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city in which to look for the sushi places."}, "top": {"type": "integer", "description": "The number of top sushi places to be returned."}, "review_rate": {"type": "float", "description": "The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00."}}, "required": ["city", "top"]}}}, "model_result_raw": "get_best_sushi_places(city='\u6771\u4eac', top=5, review_rate=4.5)", "model_result_decoded": [{"get_best_sushi_places": {"city": "\u6771\u4eac", "top": 5, "review_rate": 4.5}}], "possible_answer": {"get_best_sushi_places": {"city": ["Tokyo", "\u6771\u4eac"], "top": [5], "review_rate": [4.0]}}}
{"id": 365, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'type': '\u610f\u5927\u5229\u9910\u5ef3'. Expected one of ['Italian', '\u7fa9\u5927\u5229', '\u7fa9\u5f0f']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_364", "question": "\u6211\u80fd\u5728\u5e03\u9b6f\u514b\u6797\u9644\u8fd1\u627e\u5230\u4e00\u5bb6\u63d0\u4f9b\u7121\u9ea9\u8cea\u9078\u9805\u7684\u7fa9\u5927\u5229\u9910\u5ef3\u55ce\uff1f", "function": {"name": "find_restaurant", "description": "Locate nearby restaurants based on user defined criteria", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location where user wants to search for a restaurant."}, "type": {"type": "string", "description": "The type of the cuisine/restaurant."}, "diet_option": {"type": "string", "description": "Special dietary preferences."}}, "required": ["location", "type", "diet_option"]}}}, "model_result_raw": "find_restaurant(location='\u5e03\u9b6f\u514b\u6797', type='\u610f\u5927\u5229\u9910\u5ef3', diet_option='\u7121\u9ea9\u8cea')", "model_result_decoded": [{"find_restaurant": {"location": "\u5e03\u9b6f\u514b\u6797", "type": "\u610f\u5927\u5229\u9910\u5ef3", "diet_option": "\u7121\u9ea9\u8cea"}}], "possible_answer": {"find_restaurant": {"location": ["Brooklyn", "Brooklyn, NY", "\u5e03\u9b6f\u514b\u6797", "\u7d10\u7d04\u5e03\u9b6f\u514b\u6797"], "type": ["Italian", "\u7fa9\u5927\u5229", "\u7fa9\u5f0f"], "diet_option": ["Gluten-free", "\u7121\u9ea9\u8cea"]}}}
{"id": 366, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'item': 'cream'. Expected one of ['butter', '\u5976\u6cb9']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_365", "question": "2\u78c5\u7684\u5976\u6cb9\u6709\u591a\u5c11\u76ce\u53f8\uff1f", "function": {"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "dict", "properties": {"quantity": {"type": "integer", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}}, "model_result_raw": "cooking_conversion.convert(quantity=2, from_unit='lb', to_unit='oz', item='cream')", "model_result_decoded": [{"cooking_conversion.convert": {"quantity": 2, "from_unit": "lb", "to_unit": "oz", "item": "cream"}}], "possible_answer": {"cooking_conversion.convert": {"quantity": [2], "from_unit": ["pound", "pounds", "lb", "lbs", "\u78c5"], "to_unit": ["ounce", "ounces", "oz", "\u76ce\u53f8"], "item": ["butter", "\u5976\u6cb9"]}}}
{"id": 374, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product_list': ['Apples', 'Rice', '12-pack Water']. Expected one of [['apples', 'rice', 'bottled water'], ['apples', 'rice', 'water'], ['\u860b\u679c', '\u7c73\u98ef', '\u6c34'], ['\u860b\u679c', '\u7c73\u98ef', '\u74f6\u88dd\u6c34']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_373", "question": "\u6211\u60f3\u5728\u8056\u8377\u897f\u9644\u8fd1\u7684Walmart\u8cb7\u860b\u679c\u3001\u7c73\u98ef\u548c12\u7f50\u74f6\u88dd\u6c34\u3002\u8acb\u986f\u793a\u7522\u54c1\u8cc7\u8a0a\u548c\u5eab\u5b58\u60c5\u6cc1\u3002", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": "walmart.purchase(loc='San Jose', product_list=['Apples', 'Rice', '12-pack Water'], pack_size=[1, 1, 12])", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["Apples", "Rice", "12-pack Water"], "pack_size": [1, 1, 12]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA", "\u8056\u8377\u897f", "\u52a0\u5dde\u8056\u8377\u897f", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u8056\u8377\u897f"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"], ["\u860b\u679c", "\u7c73\u98ef", "\u6c34"], ["\u860b\u679c", "\u7c73\u98ef", "\u74f6\u88dd\u6c34"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Optional parameter 'store_location' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_375", "question": "\u5728Walmart\u6aa2\u67e5\u4e09\u500b\u5357\u74dc\u548c\u5169\u6253\u96de\u86cb\u7684\u7e3d\u50f9\u683c\u3002", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": "walmart.check_price(items=['\u5357\u74dc', '\u96de\u86cb'], quantities=[3, 2])", "model_result_decoded": [{"walmart.check_price": {"items": ["\u5357\u74dc", "\u96de\u86cb"], "quantities": [3, 2]}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"], ["\u5357\u74dc", "\u96de\u86cb"], ["\u5357\u74dc", "\u86cb"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA", "\u6d1b\u6749\u78ef"]}}}
{"id": 381, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York, Manhattan'. Expected one of ['Manhattan, New York', 'Manhattan, NY', 'NYC', 'New York City', '\u7d10\u7d04\u66fc\u54c8\u9813', '\u7d10\u7d04\u5e02']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_380", "question": "\u9810\u8a02\u4e00\u9593\u5bf5\u7269\u53cb\u5584\u7684\u55ae\u4eba\u623f\u9593\uff0c\u5728\u7d10\u7d04\u66fc\u54c8\u9813\u9644\u8fd1\u7684\u9152\u5e97\uff0c\u5f9e2023\u5e743\u670810\u65e5\u958b\u59cb\u5165\u4f4f3\u665a\u3002", "function": {"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}}, "model_result_raw": "hotel_booking(location='New York, Manhattan', room_type='single', duration=3, start_date='2023-03-10', preferences=['pet_friendly'])", "model_result_decoded": [{"hotel_booking": {"location": "New York, Manhattan", "room_type": "single", "duration": 3, "start_date": "2023-03-10", "preferences": ["pet_friendly"]}}], "possible_answer": {"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City", "\u7d10\u7d04\u66fc\u54c8\u9813", "\u7d10\u7d04\u5e02"], "room_type": ["single", "\u55ae\u4eba"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023", "2023\u5e743\u670810\u65e5"], "preferences": [["pet_friendly"], ["\u5bf5\u7269\u53cb\u5584"]]}}}
{"id": 384, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': 'The Plaza Hotel'. Expected one of ['The Plaza', '\u5ee3\u5834\u98ef\u5e97']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_383", "question": "\u6211\u60f3\u8981\u5728The Plaza\u9152\u5e97\u9810\u8a02\u4e00\u9593\u55ae\u4eba\u623f\uff0c\u70ba\u671f\u5169\u665a\u3002", "function": {"name": "book_room", "description": "Book a room in a specified hotel.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "num_nights": {"type": "integer", "description": "The number of nights to book the room for."}}, "required": ["hotel_name", "room_type", "num_nights"]}}}, "model_result_raw": "book_room(hotel_name='The Plaza Hotel', room_type='Single', num_nights=2)", "model_result_decoded": [{"book_room": {"hotel_name": "The Plaza Hotel", "room_type": "Single", "num_nights": 2}}], "possible_answer": {"book_room": {"hotel_name": ["The Plaza", "\u5ee3\u5834\u98ef\u5e97"], "room_type": ["Single", "single", "\u55ae\u4eba\u623f"], "num_nights": [2]}}}
{"id": 387, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': 'Las Vegas Paradise Hotel'. Expected one of ['Hotel Paradise', '\u5929\u5802\u9152\u5e97', '\u62c9\u65af\u7dad\u52a0\u65af\u5929\u5802\u9152\u5e97']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_386", "question": "\u9810\u8a022022\u5e745\u670812\u65e5\u8d77\u70ba\u671f3\u5929\u7684\u62c9\u65af\u7dad\u52a0\u65af\u5929\u5802\u9152\u5e97\u8c6a\u83ef\u5ba2\u623f\uff0c\u4e26\u4eab\u6709\u5e02\u666f\u3002", "function": {"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}}, "model_result_raw": "book_hotel(hotel_name='Las Vegas Paradise Hotel', location='Las Vegas', room_type='Luxury', start_date='05-12-2022', stay_duration=3, view='City View')", "model_result_decoded": [{"book_hotel": {"hotel_name": "Las Vegas Paradise Hotel", "location": "Las Vegas", "room_type": "Luxury", "start_date": "05-12-2022", "stay_duration": 3, "view": "City View"}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hotel Paradise", "\u5929\u5802\u9152\u5e97", "\u62c9\u65af\u7dad\u52a0\u65af\u5929\u5802\u9152\u5e97"], "location": ["Las Vegas", "LV", "\u62c9\u65af\u7dad\u52a0\u65af"], "room_type": ["luxury", "Luxury", "\u8c6a\u83ef"], "start_date": ["05-12-2022", "2022-05-12", "12/05/2022", "May.12,2022", "May 12, 2022", "2022\u5e745\u670812\u65e5"], "stay_duration": [3], "view": ["city view", "city", "\u5e02\u666f"]}}}
{"id": 388, "model_name": "gorilla-openfunctions-v2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u7d10\u7d04, NY'. Expected one of ['New York City, NY', 'New York, NY', '\u7d10\u7d04', '\u7d10\u7d04\u5e02']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_387", "question": "\u9810\u8a022022\u5e746\u67081\u65e5\u8d77\uff0c\u70ba\u671f3\u665a\u7684\u7d10\u7d04\u5ee3\u5834\u9152\u5e97\u5ba2\u623f\u3002", "function": {"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}}, "model_result_raw": "hotel_booking(hotel_name='\u7d10\u7d04\u5ee3\u5834\u9152\u5e97', location='\u7d10\u7d04, NY', start_date='2022-06-01', end_date='2022-06-03', rooms=1)", "model_result_decoded": [{"hotel_booking": {"hotel_name": "\u7d10\u7d04\u5ee3\u5834\u9152\u5e97", "location": "\u7d10\u7d04, NY", "start_date": "2022-06-01", "end_date": "2022-06-03", "rooms": 1}}], "possible_answer": {"hotel_booking": {"hotel_name": ["Plaza Hotel", "\u5ee3\u5834\u9152\u5e97", "\u7d10\u7d04\u5ee3\u5834\u9152\u5e97"], "location": ["New York City, NY", "New York, NY", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022", "2022\u5e746\u67081\u65e5"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022", "2022\u5e746\u67084\u65e5"], "rooms": [1, ""]}}}