{"accuracy": 0.88, "correct_count": 88, "total_count": 100}
{"id": 12, "model_name": "breeze-fc-v1", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result for 'calculate_final_velocity(initial_velocity=0,acceleration=-9.8,time=7)'. Expected: 68.60000000000001, but got: -68.60000000000001."], "error_type": "executable_checker:wrong_result", "prompt": {"id": "executable_simple_11", "question": "\u6211\u6709\u4e00\u500b\u7269\u7406\u5be6\u9a57\uff0c\u6211\u8981\u5f9e\u4e00\u5b9a\u7684\u9ad8\u5ea6\u6254\u4e0b\u4e00\u500b\u7403\uff0c\u6211\u77e5\u9053\u521d\u59cb\u901f\u5ea6\u662f\u96f6\uff0c\u56e0\u70ba\u6211\u8b93\u5b83\u81ea\u7531\u843d\u4e0b\u3002\u91cd\u529b\u5728\u9019\u88e1\u626e\u6f14\u84579.8\u7c73/\u79d2\u00b2\u7684\u89d2\u8272\u3002\u57287\u79d2\u5f8c\uff0c\u6211\u60f3\u8a08\u7b97\u6700\u7d42\u901f\u5ea6\u6703\u662f\u591a\u5c11\u3002\u6211\u5011\u53ef\u4ee5\u89e3\u6c7a\u9019\u500b\u554f\u984c\u55ce\uff1f", "function": {"name": "calculate_final_velocity", "description": "Calculates the final velocity of an object.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object, in meters per second."}, "acceleration": {"type": "float", "description": "The acceleration of the object, in meters per second squared."}, "time": {"type": "float", "description": "The time the object has been moving, in seconds."}}, "required": ["initial_velocity", "acceleration", "time"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=7)"], "execution_result": [68.60000000000001]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"calculate_final_velocity\", \"arguments\": \"{\\\"initial_velocity\\\": 0, \\\"acceleration\\\": -9.8, \\\"time\\\": 7}\"}<|tool_call_end|>", "model_result_decoded": ["calculate_final_velocity(initial_velocity=0,acceleration=-9.8,time=7)"], "model_executed_output": -68.60000000000001}
{"id": 31, "model_name": "breeze-fc-v1", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result for \"get_active_covid_case_by_country(country='\u5df4\u897f')\". Expected: 1783377, but got: {'get': 'statistics', 'parameters': {'country': '\u5df4\u897f'}, 'errors': {'country': 'The Country field may only contain alpha-numeric characters, underscores, spaces and dashes.'}, 'results': 0, 'response': []}. Type needs to be float or int for real time match criteria."], "error_type": "executable_checker:wrong_result_real_time", "prompt": {"id": "executable_simple_30", "question": "\u6211\u6b63\u5728\u64b0\u5beb\u4e00\u7bc7\u95dc\u65bcCOVID-19\u60c5\u6cc1\u7684\u6587\u7ae0\uff0c\u91cd\u9ede\u662f\u5df4\u897f\u6301\u7e8c\u7684\u61c9\u5c0d\u63aa\u65bd\u4ee5\u53ca\u5b83\u5c0d\u7576\u5730\u4eba\u53e3\u7684\u5f71\u97ff\u3002\u6e96\u78ba\u7684\u6578\u64da\u5c0d\u6211\u7684\u5206\u6790\u81f3\u95dc\u91cd\u8981\u3002\u4f60\u80fd\u7d66\u6211\u5df4\u897f\u76ee\u524d\u6d3b\u8e8d\u7684COVID-19\u75c5\u4f8b\u6578\u64da\u55ce\uff1f", "function": {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the active cases of, in the format of the country's full name."}}, "required": ["country"]}}, "execution_result_type": ["real_time_match"], "ground_truth": ["get_active_covid_case_by_country(country='Brazil')"], "execution_result": [1783377]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_active_covid_case_by_country\", \"arguments\": \"{\\\"country\\\": \\\"\u5df4\u897f\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["get_active_covid_case_by_country(country='\u5df4\u897f')"], "model_executed_output": {"get": "statistics", "parameters": {"country": "\u5df4\u897f"}, "errors": {"country": "The Country field may only contain alpha-numeric characters, underscores, spaces and dashes."}, "results": 0, "response": []}}
{"id": 32, "model_name": "breeze-fc-v1", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result for \"get_active_covid_case_by_country(country='\u897f\u73ed\u7259')\". Expected: 30634, but got: {'get': 'statistics', 'parameters': {'country': '\u897f\u73ed\u7259'}, 'errors': {'country': 'The Country field may only contain alpha-numeric characters, underscores, spaces and dashes.'}, 'results': 0, 'response': []}. Type needs to be float or int for real time match criteria."], "error_type": "executable_checker:wrong_result_real_time", "prompt": {"id": "executable_simple_31", "question": "\u6211\u76ee\u524d\u6b63\u5728\u7de8\u5236\u4e00\u4efd\u6709\u95dc\u5404\u570bCOVID-19\u72c0\u6cc1\u7684\u5831\u544a\uff0c\u6211\u9700\u8981\u5305\u62ec\u897f\u73ed\u7259\u6700\u65b0\u7684\u6d3b\u8e8d\u75c5\u4f8b\u6578\u5b57\u3002\u4f60\u80fd\u5e6b\u6211\u53d6\u5f97\u897f\u73ed\u7259\u7684\u6700\u65b0\u6d3b\u8e8d\u75c5\u4f8b\u6578\u5b57\u55ce\uff1f", "function": {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the active cases of, in the format of the country's full name."}}, "required": ["country"]}}, "execution_result_type": ["real_time_match"], "ground_truth": ["get_active_covid_case_by_country(country='Spain')"], "execution_result": [30634]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_active_covid_case_by_country\", \"arguments\": \"{\\\"country\\\": \\\"\u897f\u73ed\u7259\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["get_active_covid_case_by_country(country='\u897f\u73ed\u7259')"], "model_executed_output": {"get": "statistics", "parameters": {"country": "\u897f\u73ed\u7259"}, "errors": {"country": "The Country field may only contain alpha-numeric characters, underscores, spaces and dashes."}, "results": 0, "response": []}}
{"id": 39, "model_name": "breeze-fc-v1", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result for \"get_covid_death_by_country(country='\u5df4\u897f')\". Expected: 711380, but got: {'get': 'statistics', 'parameters': {'country': '\u5df4\u897f'}, 'errors': {'country': 'The Country field may only contain alpha-numeric characters, underscores, spaces and dashes.'}, 'results': 0, 'response': []}. Type needs to be float or int for real time match criteria."], "error_type": "executable_checker:wrong_result_real_time", "prompt": {"id": "executable_simple_38", "question": "\u6211\u76ee\u524d\u6b63\u5728\u9032\u884c\u4e00\u9805\u95dc\u65bcCOVID-19\u5f71\u97ff\u7684\u7814\u7a76\uff0c\u4e26\u5c08\u6ce8\u65bc\u5df4\u897f\u7684\u60c5\u6cc1\u3002\u6211\u9700\u8981\u6700\u65b0\u7684\u6578\u64da\uff0c\u95dc\u65bc\u5df4\u897f\u56e0\u75c5\u6bd2\u6b7b\u4ea1\u7684\u7e3d\u6578\u3002\u4f60\u80fd\u63d0\u4f9b\u7d66\u6211\u9019\u4e9b\u4fe1\u606f\u55ce\uff1f", "function": {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of, in the format of the country's full name."}}, "required": ["country"]}}, "execution_result_type": ["real_time_match"], "ground_truth": ["get_covid_death_by_country(country='Brazil')"], "execution_result": [711380]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_covid_death_by_country\", \"arguments\": \"{\\\"country\\\": \\\"\u5df4\u897f\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["get_covid_death_by_country(country='\u5df4\u897f')"], "model_executed_output": {"get": "statistics", "parameters": {"country": "\u5df4\u897f"}, "errors": {"country": "The Country field may only contain alpha-numeric characters, underscores, spaces and dashes."}, "results": 0, "response": []}}
{"id": 40, "model_name": "breeze-fc-v1", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result for \"get_covid_death_by_country(country='\u5370\u5ea6')\". Expected: 533570, but got: {'get': 'statistics', 'parameters': {'country': '\u5370\u5ea6'}, 'errors': {'country': 'The Country field may only contain alpha-numeric characters, underscores, spaces and dashes.'}, 'results': 0, 'response': []}. Type needs to be float or int for real time match criteria."], "error_type": "executable_checker:wrong_result_real_time", "prompt": {"id": "executable_simple_39", "question": "\u6211\u662f\u4e00\u540d\u6d41\u884c\u75c5\u5b78\u5bb6\uff0c\u6b63\u5728\u8ffd\u8e64COVID-19\u7684\u5f71\u97ff\uff0c\u76ee\u524d\u6211\u5c08\u6ce8\u65bc\u5370\u5ea6\u7684\u60c5\u6cc1\u3002\u6211\u9700\u8981\u6700\u65b0\u7684\u6b7b\u4ea1\u4eba\u6578\u6578\u64da\u3002\u4f60\u80fd\u7d66\u6211\u5370\u5ea6COVID\u6b7b\u4ea1\u7e3d\u4eba\u6578\u7684\u6700\u65b0\u6578\u64da\u55ce\uff1f", "function": {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of, in the format of the country's full name."}}, "required": ["country"]}}, "execution_result_type": ["real_time_match"], "ground_truth": ["get_covid_death_by_country(country='India')"], "execution_result": [533570]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_covid_death_by_country\", \"arguments\": \"{\\\"country\\\": \\\"\u5370\u5ea6\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["get_covid_death_by_country(country='\u5370\u5ea6')"], "model_executed_output": {"get": "statistics", "parameters": {"country": "\u5370\u5ea6"}, "errors": {"country": "The Country field may only contain alpha-numeric characters, underscores, spaces and dashes."}, "results": 0, "response": []}}
{"id": 56, "model_name": "breeze-fc-v1", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result for \"get_stock_price_by_stock_name(stock_name='\u5fae\u8edf')\". Expected: 431.31, but got: {'meta': {'version': 'v1.0', 'status': 200, 'copywrite': 'https://apicalls.io', 'symbol': 'Quotes Data', 'processedTime': '2024-09-27T02:35:55.823874Z'}, 'body': []}. Type needs to be float or int for real time match criteria."], "error_type": "executable_checker:wrong_result_real_time", "prompt": {"id": "executable_simple_55", "question": "\u6211\u9700\u8981\u67e5\u8a62\u5fae\u8edf\u516c\u53f8\u80a1\u7968\u7684\u73fe\u50f9\u3002\u4f60\u80fd\u5e6b\u6211\u53d6\u5f97\u5fae\u8edf\u6700\u65b0\u7684\u80a1\u50f9\u55ce\uff1f", "function": {"name": "get_stock_price_by_stock_name", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}}, "required": ["stock_name"]}}, "execution_result_type": ["real_time_match"], "ground_truth": ["get_stock_price_by_stock_name(stock_name='MSFT')"], "execution_result": [431.31]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_stock_price_by_stock_name\", \"arguments\": \"{\\\"stock_name\\\": \\\"\u5fae\u8edf\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["get_stock_price_by_stock_name(stock_name='\u5fae\u8edf')"], "model_executed_output": {"meta": {"version": "v1.0", "status": 200, "copywrite": "https://apicalls.io", "symbol": "Quotes Data", "processedTime": "2024-09-27T02:35:55.823874Z"}, "body": []}}
{"id": 91, "model_name": "breeze-fc-v1", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result for \"book_room(room_type='\u8c6a\u83ef',price=1000.0,check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')\". Expected: {'customer_id': '123', 'room_number': 'deluxe', 'check_in_date': '08-11-2024', 'check_out_date': '08-15-2024', 'total_price': 1000}, but got: {'customer_id': '123', 'room_number': '\u8c6a\u83ef', 'check_in_date': '08-11-2024', 'check_out_date': '08-15-2024', 'total_price': 1000.0}."], "error_type": "executable_checker:wrong_result", "prompt": {"id": "executable_simple_90", "question": "\u6211\u6b63\u5728\u8a08\u5283\u524d\u5f80\u7d10\u7d04\u7684\u5546\u52d9\u65c5\u884c\uff0c\u4e26\u6c7a\u5b9a\u5ef6\u9577\u6211\u7684\u505c\u7559\u6642\u9593\uff0c\u597d\u597d\u4eab\u53d7\u9019\u5ea7\u57ce\u5e02\u3002\u6211\u60f3\u9810\u8a02\u4e00\u9593\u8c6a\u83ef\u5ba2\u623f\uff0c\u4ee5\u4fbf\u5728\u6211\u7684\u65c5\u884c\u671f\u9593\u5165\u4f4f\u3002\u6211\u6240\u8003\u616e\u7684\u65e5\u671f\u662f\u5f9e2024\u5e748\u670811\u65e5\u52302024\u5e748\u670815\u65e5\u3002\u6211\u5df2\u7d93\u6e96\u5099\u597d\u9810\u7b97\u7528\u65bc\u4f4f\u5bbf\uff0c\u4e26\u9858\u610f\u82b1\u8cbb\u9ad8\u90541000\u7f8e\u5143\u4eab\u53d7\u8212\u9069\u7684\u4f4f\u5bbf\u3002\u6211\u7684\u5ba2\u6236\u7de8\u865f\u662f123\u3002\u4f60\u80fd\u5e6b\u6211\u9810\u8a02\u90a3\u9593\u5ba2\u623f\u55ce\uff1f", "function": {"name": "book_room", "description": "Books a room for a customer.", "parameters": {"type": "dict", "properties": {"room_type": {"type": "string", "description": "The room type to book."}, "price": {"type": "float", "description": "The max price of the room. Default 0.0"}, "check_in_date": {"type": "string", "description": "The check-in date in format of MM-DD-YYYY. "}, "check_out_date": {"type": "string", "description": "The check-out date in format of MM-DD-YYYY."}, "customer_id": {"type": "string", "description": "The customer ID."}, "discount_code": {"type": "string", "description": "The discount code (if any).", "default": null}}, "required": ["room_type", "check_in_date", "check_out_date", "customer_id"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["book_room(room_type='deluxe',price=1000,check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')"], "execution_result": [{"customer_id": "123", "room_number": "deluxe", "check_in_date": "08-11-2024", "check_out_date": "08-15-2024", "total_price": 1000}]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"book_room\", \"arguments\": \"{\\\"room_type\\\": \\\"\u8c6a\u83ef\\\", \\\"price\\\": 1000.0, \\\"check_in_date\\\": \\\"08-11-2024\\\", \\\"check_out_date\\\": \\\"08-15-2024\\\", \\\"customer_id\\\": \\\"123\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["book_room(room_type='\u8c6a\u83ef',price=1000.0,check_in_date='08-11-2024',check_out_date='08-15-2024',customer_id='123')"], "model_executed_output": {"customer_id": "123", "room_number": "\u8c6a\u83ef", "check_in_date": "08-11-2024", "check_out_date": "08-15-2024", "total_price": 1000.0}}
{"id": 92, "model_name": "breeze-fc-v1", "test_category": "executable_simple", "valid": false, "error": ["Wrong execution result for \"book_room(room_type='\u7279\u5927\u5e8a',price=10000.0,check_in_date='2023-12-11',check_out_date='2024-08-15',customer_id='123')\". Expected: {'customer_id': '123', 'room_number': 'king', 'check_in_date': '12-11-2023', 'check_out_date': '08-15-2024', 'total_price': 10000}, but got: {'customer_id': '123', 'room_number': '\u7279\u5927\u5e8a', 'check_in_date': '2023-12-11', 'check_out_date': '2024-08-15', 'total_price': 10000.0}."], "error_type": "executable_checker:wrong_result", "prompt": {"id": "executable_simple_91", "question": "\u6211\u60f3\u70ba\u4e00\u4f4dID\u70ba123\u7684\u5ba2\u6236\u9810\u8a02\u4e00\u9593\u7279\u5927\u5e8a\u623f\u3002\u9810\u8a02\u65e5\u671f\u5f9e2023\u5e7412\u670811\u65e5\u52302024\u5e748\u670815\u65e5\u3002\u50f9\u683c\u70ba$10,000\u3002\u6b64\u9810\u8a02\u4e0d\u9069\u7528\u4efb\u4f55\u6298\u6263\u4ee3\u78bc\u3002\u60a8\u80fd\u5e6b\u6211\u8655\u7406\u9019\u6b21\u9810\u8a02\u55ce\uff1f", "function": {"name": "book_room", "description": "Books a room for a customer.", "parameters": {"type": "dict", "properties": {"room_type": {"type": "string", "description": "The room type to book."}, "price": {"type": "float", "description": "The max price of the room. Default 0.0"}, "check_in_date": {"type": "string", "description": "The check-in date in format of MM-DD-YYYY. "}, "check_out_date": {"type": "string", "description": "The check-out date in format of MM-DD-YYYY."}, "customer_id": {"type": "string", "description": "The customer ID."}, "discount_code": {"type": "string", "description": "The discount code (if any).", "default": null}}, "required": ["room_type", "check_in_date", "check_out_date", "customer_id"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["book_room(room_type='king',price=10000,check_in_date='12-11-2023',check_out_date='08-15-2024',customer_id='123')"], "execution_result": [{"customer_id": "123", "room_number": "king", "check_in_date": "12-11-2023", "check_out_date": "08-15-2024", "total_price": 10000}]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"book_room\", \"arguments\": \"{\\\"room_type\\\": \\\"\u7279\u5927\u5e8a\\\", \\\"price\\\": 10000.0, \\\"check_in_date\\\": \\\"2023-12-11\\\", \\\"check_out_date\\\": \\\"2024-08-15\\\", \\\"customer_id\\\": \\\"123\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["book_room(room_type='\u7279\u5927\u5e8a',price=10000.0,check_in_date='2023-12-11',check_out_date='2024-08-15',customer_id='123')"], "model_executed_output": {"customer_id": "123", "room_number": "\u7279\u5927\u5e8a", "check_in_date": "2023-12-11", "check_out_date": "2024-08-15", "total_price": 10000.0}}
{"id": 95, "model_name": "breeze-fc-v1", "test_category": "executable_simple", "valid": false, "error": ["Error in execution: \"get_movie_director(movie_name='\u963f\u51e1\u9054')\". Error: 'Director'"], "error_type": "executable_checker:execution_error", "prompt": {"id": "executable_simple_94", "question": "\u6211\u6628\u665a\u548c\u670b\u53cb\u8a0e\u8ad6\u96fb\u5f71\uff0c\u6211\u5011\u958b\u59cb\u8ac7\u8ad6\u300a\u963f\u51e1\u9054\u300b\u3002\u6211\u610f\u8b58\u5230\u6211\u4e0d\u8a18\u5f97\u662f\u8ab0\u5c0e\u6f14\u7684\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u51fa\u5c0e\u6f14\u7684\u540d\u5b57\u55ce\uff1f", "function": {"name": "get_movie_director", "description": "Fetches the director of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_movie_director(movie_name='Avatar')"], "execution_result": ["James Cameron"]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_movie_director\", \"arguments\": \"{\\\"movie_name\\\": \\\"\u963f\u51e1\u9054\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["get_movie_director(movie_name='\u963f\u51e1\u9054')"]}
{"id": 96, "model_name": "breeze-fc-v1", "test_category": "executable_simple", "valid": false, "error": ["Error in execution: \"get_movie_director(movie_name='\u4f4e\u4fd7\u5c0f\u8aaa')\". Error: 'Director'"], "error_type": "executable_checker:execution_error", "prompt": {"id": "executable_simple_95", "question": "\u6211\u548c\u670b\u53cb\u6b63\u5728\u8faf\u8ad6\u6709\u95dc\u7d93\u5178\u96fb\u5f71\u7684\u8a71\u984c\uff0c\u81ea\u7136\u5730\uff0c\u300e\u4f4e\u4fd7\u5c0f\u8aaa\u300f\u4e5f\u88ab\u63d0\u53ca\u3002\u6211\u5011\u958b\u59cb\u8a0e\u8ad6\u9019\u90e8\u96fb\u5f71\u7368\u7279\u7684\u5c0e\u6f14\u98a8\u683c\uff0c\u4f46\u4ee4\u4eba\u5c37\u5c2c\u7684\u662f\uff0c\u6211\u5fd8\u8a18\u4e86\u5c0e\u6f14\u7684\u540d\u5b57\u3002\u4f60\u53ef\u4ee5\u5e6b\u5fd9\u67e5\u4e00\u4e0b\u662f\u8ab0\u5c0e\u6f14\u4e86\u300e\u4f4e\u4fd7\u5c0f\u8aaa\u300f\u55ce\uff1f", "function": {"name": "get_movie_director", "description": "Fetches the director of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_movie_director(movie_name='Pulp Fiction')"], "execution_result": ["Quentin Tarantino"]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_movie_director\", \"arguments\": \"{\\\"movie_name\\\": \\\"\u4f4e\u4fd7\u5c0f\u8aaa\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["get_movie_director(movie_name='\u4f4e\u4fd7\u5c0f\u8aaa')"]}
{"id": 97, "model_name": "breeze-fc-v1", "test_category": "executable_simple", "valid": false, "error": ["Error in execution: \"get_movie_rating(movie_name='\u963f\u51e1\u9054')\". Error: 'Rated'"], "error_type": "executable_checker:execution_error", "prompt": {"id": "executable_simple_96", "question": "\u6211\u6b63\u5728\u8003\u616e\u5728\u9019\u500b\u9031\u672b\u7684\u5bb6\u5ead\u96fb\u5f71\u4e4b\u591c\u4e0a\u64ad\u653e\u96fb\u5f71\u300a\u963f\u51e1\u9054\u300b\uff0c\u4f46\u6211\u9700\u8981\u78ba\u4fdd\u5b83\u9069\u5408\u6240\u6709\u5e74\u9f61\u5c64\u3002\u4f60\u80fd\u5e6b\u6211\u67e5\u4e00\u4e0b\u300a\u963f\u51e1\u9054\u300b\u7684\u5e74\u9f61\u5206\u7d1a\u55ce\uff1f", "function": {"name": "get_movie_rating", "description": "Fetches the age rating of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_movie_rating(movie_name='Avatar')"], "execution_result": ["PG-13"]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_movie_rating\", \"arguments\": \"{\\\"movie_name\\\": \\\"\u963f\u51e1\u9054\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["get_movie_rating(movie_name='\u963f\u51e1\u9054')"]}
{"id": 98, "model_name": "breeze-fc-v1", "test_category": "executable_simple", "valid": false, "error": ["Error in execution: \"get_movie_rating(movie_name='\u4f4e\u4fd7\u5c0f\u8bf4')\". Error: 'Rated'"], "error_type": "executable_checker:execution_error", "prompt": {"id": "executable_simple_97", "question": "\u4f60\u80fd\u67e5\u51fa\u300a\u4f4e\u4fd7\u5c0f\u8bf4\u300b\u7684\u5e74\u9f61\u5206\u7d1a\u55ce\uff1f\u6211\u60f3\u6c7a\u5b9a\u9019\u90e8\u96fb\u5f71\u662f\u5426\u9069\u5408\u6211\u7684\u9752\u5c11\u5e74\u5b69\u5b50\u89c0\u770b\u3002", "function": {"name": "get_movie_rating", "description": "Fetches the age rating of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "execution_result_type": ["exact_match"], "ground_truth": ["get_movie_rating(movie_name='Pulp Fiction')"], "execution_result": ["R"]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_movie_rating\", \"arguments\": \"{\\\"movie_name\\\": \\\"\u4f4e\u4fd7\u5c0f\u8bf4\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["get_movie_rating(movie_name='\u4f4e\u4fd7\u5c0f\u8bf4')"]}