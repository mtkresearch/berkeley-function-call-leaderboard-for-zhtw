{"accuracy": 0.8, "correct_count": 40, "total_count": 50}
{"id": 3, "model_name": "breeze-fc-v1", "test_category": "executable_parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2, 3] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Wrong execution result for 'calculate_density(mass=500,volume=100)'. Expected: 5000.0, but got: 5.0."], "sub_error_type": "executable_checker:wrong_result", "model_executed_output": 5.0}}, {"Model Result Index 1": {"sub_error": ["Wrong execution result for 'calculate_density(mass=200,volume=50)'. Expected: 5000.0, but got: 4.0."], "sub_error_type": "executable_checker:wrong_result", "model_executed_output": 4.0}}, {"Model Result Index 2": {"sub_error": ["Wrong execution result for 'calculate_density(mass=300,volume=75)'. Expected: 5000.0, but got: 4.0."], "sub_error_type": "executable_checker:wrong_result", "model_executed_output": 4.0}}, {"Model Result Index 3": {"sub_error": ["Wrong execution result for 'calculate_density(mass=400,volume=80)'. Expected: 5000.0, but got: 5.0."], "sub_error_type": "executable_checker:wrong_result", "model_executed_output": 5.0}}], "error_type": "executable_checker:cannot_find_match", "prompt": {"id": "executable_parallel_function_2", "question": "\u6211\u6b63\u5728\u9032\u884c\u4e00\u500b\u5be6\u9a57\uff0c\u4f7f\u7528\u56db\u7a2e\u4e0d\u540c\u6750\u6599\u7684\u7269\u9ad4\uff0c\u6211\u9700\u8981\u8a08\u7b97\u5b83\u5011\u7684\u5bc6\u5ea6\u3002\u6211\u5df2\u7d93\u6e2c\u91cf\u4e86\u5b83\u5011\u7684\u8cea\u91cf\u548c\u9ad4\u7a4d\u3002\u91d1\u5c6c\u7acb\u65b9\u9ad4\u91cd500\u514b\uff0c\u4f54\u7528100\u7acb\u65b9\u5398\u7c73\uff0c\u5851\u6599\u7403\u9ad4\u91cd200\u514b\uff0c\u4f54\u752850\u7acb\u65b9\u5398\u7c73\uff0c\u6728\u584a\u91cd300\u514b\uff0c\u9ad4\u7a4d\u70ba75\u7acb\u65b9\u5398\u7c73\uff0c\u6700\u5f8c\uff0c\u73bb\u7483\u5713\u67f1\u9ad4\u91cd400\u514b\uff0c\u9ad4\u7a4d\u70ba80\u7acb\u65b9\u5398\u7c73\u3002\u6211\u60f3\u8981\u78ba\u5b9a\u6bcf\u500b\u7269\u9ad4\u7684\u5bc6\u5ea6\u3002", "function": {"name": "calculate_density", "description": "Calculates the density of an object.", "parameters": {"type": "dict", "properties": {"mass": {"type": "float", "description": "The mass of the object, in kilograms."}, "volume": {"type": "float", "description": "The volume of the object, in cubic meters."}}, "required": ["mass", "volume"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["calculate_density(mass=0.5, volume=0.0001)", "calculate_density(mass=0.2, volume=0.00005)", "calculate_density(mass=0.3, volume=0.000075)", "calculate_density(mass=0.4, volume=0.00008)"], "execution_result": [5000.0, 4000.0, 4000.0, 5000.0]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"calculate_density\", \"arguments\": \"{\\\"mass\\\": 500, \\\"volume\\\": 100}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"calculate_density\", \"arguments\": \"{\\\"mass\\\": 200, \\\"volume\\\": 50}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"calculate_density\", \"arguments\": \"{\\\"mass\\\": 300, \\\"volume\\\": 75}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"calculate_density\", \"arguments\": \"{\\\"mass\\\": 400, \\\"volume\\\": 80}\"}<|tool_call_end|>", "model_result_decoded": ["calculate_density(mass=500,volume=100)", "calculate_density(mass=200,volume=50)", "calculate_density(mass=300,volume=75)", "calculate_density(mass=400,volume=80)"]}
{"id": 12, "model_name": "breeze-fc-v1", "test_category": "executable_parallel_function", "valid": false, "error": ["Could not find a matching function among index [1, 2, 3] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Wrong execution result for \"convert_currency(amount=5000,from_currency='JPY',to_currency='EUR')\". Expected: 1.8552000000000002, but got: 30.92. 20.0% difference allowed."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": 30.92}}, {"Model Result Index 2": {"sub_error": ["Wrong execution result for \"convert_currency(amount=5000,from_currency='JPY',to_currency='AUD')\". Expected: 1.8552000000000002, but got: 50.150000000000006. 20.0% difference allowed."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": 50.150000000000006}}, {"Model Result Index 3": {"sub_error": ["Wrong execution result for \"convert_currency(amount=100,from_currency='CAD',to_currency='CHF')\". Expected: 1.8552000000000002, but got: 62.89. 20.0% difference allowed."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": 62.89}}], "error_type": "executable_checker:cannot_find_match", "prompt": {"id": "executable_parallel_function_11", "question": "\u6211\u6b63\u5728\u8a08\u5283\u4e00\u6b21\u8de8\u570b\u65c5\u884c\uff0c\u9700\u8981\u5728\u4e0d\u540c\u8ca8\u5e63\u4e2d\u9810\u7b97\u6211\u7684\u958b\u652f\u3002\u6211\u67095000\u65e5\u5143\u9700\u8981\u8f49\u63db\u6210\u7f8e\u5143\u3001\u6b50\u5143\u548c\u6fb3\u5143\uff0c\u4ee5\u4e86\u89e3\u6211\u5728\u6bcf\u500b\u5730\u5340\u53ef\u4ee5\u82b1\u591a\u5c11\u9322\u3002\u6b64\u5916\uff0c\u6211\u9084\u6709100\u52a0\u5143\uff0c\u6211\u5f88\u597d\u5947\u5b83\u5728\u745e\u58eb\u6cd5\u90ce\u4e2d\u7684\u50f9\u503c\u3002\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u4e9b\u8f49\u63db\u55ce\uff1f", "function": {"name": "convert_currency", "description": "Converts a given amount from one currency to another using the ExchangeRate-API.", "parameters": {"type": "dict", "properties": {"amount": {"type": "float", "description": "The amount of money to convert, in the base currency."}, "from_currency": {"type": "string", "description": "The ISO currency code for the base currency."}, "to_currency": {"type": "string", "description": "The ISO currency code for the target currency."}}, "required": ["amount", "from_currency", "to_currency"]}}, "execution_result_type": ["real_time_match", "real_time_match", "real_time_match", "real_time_match"], "ground_truth": ["convert_currency(amount=5000, from_currency='JPY', to_currency='USD')", "convert_currency(amount=300, from_currency='JPY', to_currency='EUR')", "convert_currency(amount=2000, from_currency='JPY', to_currency='AUD')", "convert_currency(amount=100, from_currency='CAD', to_currency='CHF')"], "execution_result": [34.515, 1.8552000000000002, 20.060000000000002, 62.89]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"convert_currency\", \"arguments\": \"{\\\"amount\\\": 5000, \\\"from_currency\\\": \\\"JPY\\\", \\\"to_currency\\\": \\\"USD\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"convert_currency\", \"arguments\": \"{\\\"amount\\\": 5000, \\\"from_currency\\\": \\\"JPY\\\", \\\"to_currency\\\": \\\"EUR\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"convert_currency\", \"arguments\": \"{\\\"amount\\\": 5000, \\\"from_currency\\\": \\\"JPY\\\", \\\"to_currency\\\": \\\"AUD\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"convert_currency\", \"arguments\": \"{\\\"amount\\\": 100, \\\"from_currency\\\": \\\"CAD\\\", \\\"to_currency\\\": \\\"CHF\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["convert_currency(amount=5000,from_currency='JPY',to_currency='USD')", "convert_currency(amount=5000,from_currency='JPY',to_currency='EUR')", "convert_currency(amount=5000,from_currency='JPY',to_currency='AUD')", "convert_currency(amount=100,from_currency='CAD',to_currency='CHF')"]}
{"id": 13, "model_name": "breeze-fc-v1", "test_category": "executable_parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2, 3] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Error in execution: \"estimate_derivative(function='3 * x ** 2 + 2 * x - 1',x=4)\". Error: 'int' object is not callable"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 1": {"sub_error": ["Error in execution: \"estimate_derivative(function='5 * x ** 3 - 3 * x ** 2 + 2 * x + 1',x=-2)\". Error: 'int' object is not callable"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 2": {"sub_error": ["Error in execution: \"estimate_derivative(function='2 * x ** 4 - 3 * x ** 3 + 2 * x ** 2 - x + 1',x=0)\". Error: 'int' object is not callable"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 3": {"sub_error": ["Error in execution: \"estimate_derivative(function='x ** 5 - 2 * x ** 4 + 3 * x ** 3 - 2 * x ** 2 + x - 1',x=1)\". Error: 'int' object is not callable"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}], "error_type": "executable_checker:cannot_find_match", "prompt": {"id": "executable_parallel_function_12", "question": "\u6211\u6b63\u5728\u8655\u7406\u4e00\u4e9b\u5fae\u7a4d\u5206\u554f\u984c\uff0c\u9700\u8981\u4e00\u4e9b\u5c0e\u6578\u65b9\u9762\u7684\u5e6b\u52a9\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u6211\u9700\u8981\u5728\u7279\u5b9a\u9ede\u4e0a\u7684\u4e00\u7d44\u51fd\u6578\u7684\u5c0e\u6578\u4f30\u8a08\u503c\u3002\u4f60\u80fd\u5e6b\u6211\u8655\u7406\u4ee5\u4e0b\u554f\u984c\u55ce\uff1f\n\n1. \u5728x = 4\u6642\uff0c\u627e\u51faf(x) = 3x^2 + 2x - 1\u7684\u5c0e\u6578\u3002\n2. \u7576x\u70ba-2\u6642\uff0c\u8a08\u7b97\u5c0e\u6578\uff0cg(x) = 5x^3 - 3x^2 + 2x + 1\u3002\n3. \u78ba\u5b9ah(x) = 2x^4 - 3x^3 + 2x^2 - x + 1\u5728x = 0\u6642\u7684\u5c0e\u6578\u3002\n4. \u5728x = 1\u6642\uff0c\u7372\u5f97i(x) = x^5 - 2x^4 + 3x^3 - 2x^2 + x - 1\u7684\u5c0e\u6578\u3002\n\n\u4f60\u80fd\u5e6b\u6211\u8a08\u7b97\u9019\u4e9b\u55ce\uff1f", "function": {"name": "estimate_derivative", "description": "Estimate the derivative of a function at a given point.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "x": {"type": "integer", "description": "The point to calculate the derivative at."}}, "required": ["function", "x"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["estimate_derivative(function='lambda x: 3*x**2 + 2*x - 1', x=4)", "estimate_derivative(function='lambda x: 5*x**3 - 3*x**2 + 2*x + 1', x=-2)", "estimate_derivative(function='lambda x: 2*x**4 - 3*x**3 + 2*x**2 - x + 1', x=0)", "estimate_derivative(function='lambda x: x**5 - 2*x**4 + 3*x**3 - 2*x**2 + x - 1', x=1)"], "execution_result": [26.000037678386434, 74.00004164992424, -1.000000082740371, 3.000000248221113]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"estimate_derivative\", \"arguments\": \"{\\\"function\\\": \\\"3 * x ** 2 + 2 * x - 1\\\", \\\"x\\\": 4}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"estimate_derivative\", \"arguments\": \"{\\\"function\\\": \\\"5 * x ** 3 - 3 * x ** 2 + 2 * x + 1\\\", \\\"x\\\": -2}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"estimate_derivative\", \"arguments\": \"{\\\"function\\\": \\\"2 * x ** 4 - 3 * x ** 3 + 2 * x ** 2 - x + 1\\\", \\\"x\\\": 0}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"estimate_derivative\", \"arguments\": \"{\\\"function\\\": \\\"x ** 5 - 2 * x ** 4 + 3 * x ** 3 - 2 * x ** 2 + x - 1\\\", \\\"x\\\": 1}\"}<|tool_call_end|>", "model_result_decoded": ["estimate_derivative(function='3 * x ** 2 + 2 * x - 1',x=4)", "estimate_derivative(function='5 * x ** 3 - 3 * x ** 2 + 2 * x + 1',x=-2)", "estimate_derivative(function='2 * x ** 4 - 3 * x ** 3 + 2 * x ** 2 - x + 1',x=0)", "estimate_derivative(function='x ** 5 - 2 * x ** 4 + 3 * x ** 3 - 2 * x ** 2 + x - 1',x=1)"]}
{"id": 14, "model_name": "breeze-fc-v1", "test_category": "executable_parallel_function", "valid": false, "error": ["Wrong number of functions provided. Expected 3, but got 1."], "error_type": "value_error:exec_result_count", "prompt": {"id": "executable_parallel_function_13", "question": "\u6211\u6700\u8fd1\u9047\u5230\u4e86\u4e00\u4e9b\u8fa6\u516c\u5ba4\u5e74\u8f15\u4eba\u5e38\u7528\u7684\u4fda\u8a9e\uff0c\u6211\u611f\u89ba\u6709\u9ede\u8ddf\u4e0d\u4e0a\u3002\u4f60\u80fd\u5e6b\u6211\u7406\u89e3\u5b83\u5011\u7684\u610f\u601d\u55ce\uff1f\u6211\u60f3\u77e5\u9053\u300cLit\u300d\u3001\u300cSavage\u300d\u548c\u300cYOLO\u300d\u5728Urban Dictionary\u4e0a\u7684\u5b9a\u7fa9\u3002\u4f60\u80fd\u5e6b\u6211\u67e5\u4e00\u4e0b\u55ce\uff1f\u6211\u5011\u4e00\u6b21\u67e5\u4e00\u500b\uff0c\u5148\u5f9e\u300cLit\u300d\u958b\u59cb\u3002", "function": {"name": "find_term_on_urban_dictionary", "description": "Finds the definition of a term on Urban Dictionary.", "parameters": {"type": "dict", "properties": {"term": {"type": "string", "description": "The term to find the definition of."}}, "required": ["term"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match"], "ground_truth": ["find_term_on_urban_dictionary(term='Lit')", "find_term_on_urban_dictionary(term='Savage')", "find_term_on_urban_dictionary(term='YOLO')"], "execution_result": ["Contrary to popular modern belief, Lit is a term used to describe mildly intoxicated. It was often used by blues and [jazz musicians] in the 40s, 50s and 60s to describe the \"[sweet spot]\" in which someone was drunk enough to be relaxed and play better, without being wasted and suffering from motor skill [impairment].", "Adj: [Merciless], [brutally honest]; Usually reffering to somebody who has [no regard] for how another person feels and doesn't hold back.", "An overused acronym for \"[You only live once].\" There is an [exception] for those who believe in [reincarnation] or are cats."]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"find_term_on_urban_dictionary\", \"arguments\": \"{\\\"term\\\": \\\"Lit\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["find_term_on_urban_dictionary(term='Lit')"]}
{"id": 16, "model_name": "breeze-fc-v1", "test_category": "executable_parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2, 3] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Wrong execution result for \"get_active_covid_case_by_country(country='\u6cd5\u570b')\". Expected: 0, but got: {'get': 'statistics', 'parameters': {'country': '\u6cd5\u570b'}, 'errors': {'country': 'The Country field may only contain alpha-numeric characters, underscores, spaces and dashes.'}, 'results': 0, 'response': []}. Type needs to be float or int for real time match criteria."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": {"get": "statistics", "parameters": {"country": "\u6cd5\u570b"}, "errors": {"country": "The Country field may only contain alpha-numeric characters, underscores, spaces and dashes."}, "results": 0, "response": []}}}, {"Model Result Index 1": {"sub_error": ["Wrong execution result for \"get_active_covid_case_by_country(country='\u610f\u5927\u5229')\". Expected: 0, but got: {'get': 'statistics', 'parameters': {'country': '\u610f\u5927\u5229'}, 'errors': {'country': 'The Country field may only contain alpha-numeric characters, underscores, spaces and dashes.'}, 'results': 0, 'response': []}. Type needs to be float or int for real time match criteria."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": {"get": "statistics", "parameters": {"country": "\u610f\u5927\u5229"}, "errors": {"country": "The Country field may only contain alpha-numeric characters, underscores, spaces and dashes."}, "results": 0, "response": []}}}, {"Model Result Index 2": {"sub_error": ["Wrong execution result for \"get_active_covid_case_by_country(country='\u7f8e\u570b')\". Expected: 0, but got: {'get': 'statistics', 'parameters': {'country': '\u7f8e\u570b'}, 'errors': {'country': 'The Country field may only contain alpha-numeric characters, underscores, spaces and dashes.'}, 'results': 0, 'response': []}. Type needs to be float or int for real time match criteria."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": {"get": "statistics", "parameters": {"country": "\u7f8e\u570b"}, "errors": {"country": "The Country field may only contain alpha-numeric characters, underscores, spaces and dashes."}, "results": 0, "response": []}}}, {"Model Result Index 3": {"sub_error": ["Wrong execution result for \"get_active_covid_case_by_country(country='\u4e2d\u570b')\". Expected: 0, but got: {'get': 'statistics', 'parameters': {'country': '\u4e2d\u570b'}, 'errors': {'country': 'The Country field may only contain alpha-numeric characters, underscores, spaces and dashes.'}, 'results': 0, 'response': []}. Type needs to be float or int for real time match criteria."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": {"get": "statistics", "parameters": {"country": "\u4e2d\u570b"}, "errors": {"country": "The Country field may only contain alpha-numeric characters, underscores, spaces and dashes."}, "results": 0, "response": []}}}], "error_type": "executable_checker:cannot_find_match", "prompt": {"id": "executable_parallel_function_15", "question": "\u96a8\u8457\u75ab\u60c5\u4ecd\u7136\u6301\u7e8c\uff0c\u6211\u6b63\u5728\u52aa\u529b\u4fdd\u6301\u5c0d\u5168\u7403COVID-19\u60c5\u6cc1\u7684\u6700\u65b0\u4e86\u89e3\u3002\u6211\u5c24\u5176\u95dc\u6ce8\u5e7e\u500b\u570b\u5bb6\u76ee\u524d\u7684\u6d3b\u8e8d\u75c5\u4f8b\u6578\u3002\u4f60\u80fd\u63d0\u4f9b\u6cd5\u570b\u6700\u65b0\u7684\u6d3b\u8e8dCOVID-19\u75c5\u4f8b\u6578\u5b57\u55ce\uff1f\u4e4b\u5f8c\uff0c\u6211\u4e5f\u60f3\u4e86\u89e3\u610f\u5927\u5229\u3001\u7f8e\u570b\u548c\u4e2d\u570b\u7684\u6700\u65b0\u60c5\u6cc1\u3002", "function": {"name": "get_active_covid_case_by_country", "description": "Finds the most up to date active cases of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the active cases of, in the format of the country's full name."}}, "required": ["country"]}}, "execution_result_type": ["real_time_match", "real_time_match", "real_time_match", "real_time_match"], "ground_truth": ["get_active_covid_case_by_country(country='France')", "get_active_covid_case_by_country(country='Italy')", "get_active_covid_case_by_country(country='United States')", "get_active_covid_case_by_country(country='China')"], "execution_result": [0, 165544, {"get": "statistics", "parameters": {"country": "United States"}, "errors": [], "results": 0, "response": []}, 118977]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_active_covid_case_by_country\", \"arguments\": \"{\\\"country\\\": \\\"\u6cd5\u570b\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"get_active_covid_case_by_country\", \"arguments\": \"{\\\"country\\\": \\\"\u610f\u5927\u5229\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"get_active_covid_case_by_country\", \"arguments\": \"{\\\"country\\\": \\\"\u7f8e\u570b\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"get_active_covid_case_by_country\", \"arguments\": \"{\\\"country\\\": \\\"\u4e2d\u570b\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["get_active_covid_case_by_country(country='\u6cd5\u570b')", "get_active_covid_case_by_country(country='\u610f\u5927\u5229')", "get_active_covid_case_by_country(country='\u7f8e\u570b')", "get_active_covid_case_by_country(country='\u4e2d\u570b')"]}
{"id": 20, "model_name": "breeze-fc-v1", "test_category": "executable_parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2, 3] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Wrong execution result for \"get_covid_death_by_country(country='\u5df4\u897f')\". Expected: 711380, but got: {'get': 'statistics', 'parameters': {'country': '\u5df4\u897f'}, 'errors': {'country': 'The Country field may only contain alpha-numeric characters, underscores, spaces and dashes.'}, 'results': 0, 'response': []}. Type needs to be float or int for real time match criteria."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": {"get": "statistics", "parameters": {"country": "\u5df4\u897f"}, "errors": {"country": "The Country field may only contain alpha-numeric characters, underscores, spaces and dashes."}, "results": 0, "response": []}}}, {"Model Result Index 1": {"sub_error": ["Wrong execution result for \"get_covid_death_by_country(country='\u5370\u5ea6')\". Expected: 711380, but got: {'get': 'statistics', 'parameters': {'country': '\u5370\u5ea6'}, 'errors': {'country': 'The Country field may only contain alpha-numeric characters, underscores, spaces and dashes.'}, 'results': 0, 'response': []}. Type needs to be float or int for real time match criteria."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": {"get": "statistics", "parameters": {"country": "\u5370\u5ea6"}, "errors": {"country": "The Country field may only contain alpha-numeric characters, underscores, spaces and dashes."}, "results": 0, "response": []}}}, {"Model Result Index 2": {"sub_error": ["Wrong execution result for \"get_covid_death_by_country(country='\u4fc4\u7f85\u65af')\". Expected: 711380, but got: {'get': 'statistics', 'parameters': {'country': '\u4fc4\u7f85\u65af'}, 'errors': {'country': 'The Country field may only contain alpha-numeric characters, underscores, spaces and dashes.'}, 'results': 0, 'response': []}. Type needs to be float or int for real time match criteria."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": {"get": "statistics", "parameters": {"country": "\u4fc4\u7f85\u65af"}, "errors": {"country": "The Country field may only contain alpha-numeric characters, underscores, spaces and dashes."}, "results": 0, "response": []}}}, {"Model Result Index 3": {"sub_error": ["Wrong execution result for \"get_covid_death_by_country(country='\u6cd5\u570b')\". Expected: 711380, but got: {'get': 'statistics', 'parameters': {'country': '\u6cd5\u570b'}, 'errors': {'country': 'The Country field may only contain alpha-numeric characters, underscores, spaces and dashes.'}, 'results': 0, 'response': []}. Type needs to be float or int for real time match criteria."], "sub_error_type": "executable_checker:wrong_result_real_time", "model_executed_output": {"get": "statistics", "parameters": {"country": "\u6cd5\u570b"}, "errors": {"country": "The Country field may only contain alpha-numeric characters, underscores, spaces and dashes."}, "results": 0, "response": []}}}], "error_type": "executable_checker:cannot_find_match", "prompt": {"id": "executable_parallel_function_19", "question": "\u6211\u6b63\u5728\u7de8\u64b0\u4e00\u4efd\u6709\u95dcCOVID-19\u5f71\u97ff\u7684\u5831\u544a\uff0c\u9700\u8981\u5e7e\u500b\u7279\u5b9a\u570b\u5bb6\u6700\u65b0\u7684\u6b7b\u4ea1\u4eba\u6578\u3002\u4f60\u80fd\u5426\u63d0\u4f9b\u5df4\u897f\u3001\u5370\u5ea6\u3001\u4fc4\u7f85\u65af\u548c\u6cd5\u570b\u7684\u7e3d\u6b7b\u4ea1\u4eba\u6578\u7d66\u6211\uff1f\u8acb\u78ba\u4fdd\u6578\u64da\u76e1\u53ef\u80fd\u6700\u65b0\u3002", "function": {"name": "get_covid_death_by_country", "description": "Finds the most up to date total deaths of a country result from COVID.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to find the total deaths of, in the format of the country's full name."}}, "required": ["country"]}}, "execution_result_type": ["real_time_match", "real_time_match", "real_time_match", "real_time_match"], "ground_truth": ["get_covid_death_by_country(country='Brazil')", "get_covid_death_by_country(country='India')", "get_covid_death_by_country(country='Russia')", "get_covid_death_by_country(country='France')"], "execution_result": [711380, 533570, 402756, 167642]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_covid_death_by_country\", \"arguments\": \"{\\\"country\\\": \\\"\u5df4\u897f\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"get_covid_death_by_country\", \"arguments\": \"{\\\"country\\\": \\\"\u5370\u5ea6\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"get_covid_death_by_country\", \"arguments\": \"{\\\"country\\\": \\\"\u4fc4\u7f85\u65af\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"get_covid_death_by_country\", \"arguments\": \"{\\\"country\\\": \\\"\u6cd5\u570b\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["get_covid_death_by_country(country='\u5df4\u897f')", "get_covid_death_by_country(country='\u5370\u5ea6')", "get_covid_death_by_country(country='\u4fc4\u7f85\u65af')", "get_covid_death_by_country(country='\u6cd5\u570b')"]}
{"id": 46, "model_name": "breeze-fc-v1", "test_category": "executable_parallel_function", "valid": false, "error": ["Wrong number of functions provided. Expected 4, but got 1."], "error_type": "value_error:exec_result_count", "prompt": {"id": "executable_parallel_function_45", "question": "\u6211\u8a08\u5283\u5728\u9019\u500b\u9031\u672b\u8209\u8fa6\u4e00\u500b\u5c0f\u805a\u6703\uff0c\u6211\u60f3\u70ba\u6211\u7684\u5ba2\u4eba\u8a02\u8cfc\u4e00\u4e9b\u98df\u7269\u3002\u6211\u60f3\u5148\u5f9e10\u500b\u6bcf\u500b$5\u7684\u6f22\u5821\u958b\u59cb\u3002\u63a5\u8457\uff0c\u6211\u60f3\u518d\u52a0\u4e0a7\u500b\u51b0\u6dc7\u6dcb\uff0c\u6bcf\u500b$2\u3002\u7136\u5f8c\uff0c\u6211\u60f3\u5728\u8a02\u55ae\u4e2d\u52a0\u51653\u500b\u6bcf\u500b$8\u7684\u6bd4\u85a9\u3002\u6700\u5f8c\uff0c\u70ba\u4e86\u5b8c\u7f8e\u6536\u5c3e\uff0c\u6211\u60f3\u898112\u500b\u6bcf\u500b$1\u7684\u751c\u751c\u5708\u3002\u80fd\u5426\u7528\u4f60\u5011\u7684\u8a02\u8cfc\u7cfb\u7d71\u8a08\u7b97\u9019\u4e9b\u7269\u54c1\u7684\u7e3d\u8cbb\u7528\uff1f", "function": {"name": "order_food", "description": "Orders food for a customer.Return the total price.", "parameters": {"type": "dict", "properties": {"item": {"type": "array", "items": {"type": "string", "description": "the name of the product, possible options ['fries', 'dumplings', 'pizza', 'soda', 'salad', 'rice bowl', 'burger', 'cake', 'cookie', 'ice cream', 'sandwich', 'hot dog', 'noodles', 'chicken', 'beef', 'pork', 'fish', 'shrimp', 'lobster', 'crab', 'steak']."}}, "quantity": {"type": "array", "items": {"type": "integer", "description": "the number of the product purchased."}}, "price": {"type": "array", "items": {"type": "float", "description": "the number of the product purchased."}}}, "required": ["item", "quantity", "price"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["order_food(item=['burger'], quantity=[10], price=[5])", "order_food(item=['ice cream'], quantity=[7], price=[2])", "order_food(item=['pizza'], quantity=[3], price=[8])", "order_food(item=['donut'], quantity=[12], price=[1])"], "execution_result": [50, 14, 24, 12]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"order_food\", \"arguments\": \"{\\\"item\\\": [\\\"burger\\\", \\\"ice cream\\\", \\\"pizza\\\", \\\"donut\\\"], \\\"quantity\\\": [10, 7, 3, 12], \\\"price\\\": [5, 2, 8, 1]}\"}<|tool_call_end|>", "model_result_decoded": ["order_food(item=['burger', 'ice cream', 'pizza', 'donut'],quantity=[10, 7, 3, 12],price=[5, 2, 8, 1])"]}
{"id": 47, "model_name": "breeze-fc-v1", "test_category": "executable_parallel_function", "valid": false, "error": ["Wrong number of functions provided. Expected 4, but got 1."], "error_type": "value_error:exec_result_count", "prompt": {"id": "executable_parallel_function_46", "question": "\u6211\u5011\u6b63\u5728\u8a08\u5283\u4e00\u9813\u665a\u9910\uff0c\u6c7a\u5b9a\u8a02\u8cfc\u4e00\u5927\u5806\u98df\u7269\u3002\u6211\u5011\u60f3\u8981101\u500b\u6bcf\u500b0.1\u7f8e\u5143\u7684\u9903\u5b50\uff0c20\u500b\u6bcf\u500b10\u7f8e\u5143\u7684\u98ef\u7897\uff0c50\u500b\u6bcf\u500b0.5\u7f8e\u5143\u7684\u6625\u6372\uff0c\u4ee5\u53ca10\u7897\u6bcf\u78973\u7f8e\u5143\u7684\u9eb5\u689d\u6e6f\u3002\u6211\u9700\u8981\u77e5\u9053\u6211\u5011\u7684\u9910\u9ede\u7e3d\u5171\u591a\u5c11\u9322\u3002\u4f60\u80fd\u5e6b\u6211\u7b97\u4e00\u4e0b\u55ce\uff1f", "function": {"name": "order_food", "description": "Orders food for a customer.Return the total price.", "parameters": {"type": "dict", "properties": {"item": {"type": "array", "items": {"type": "string", "description": "the name of the product, possible options ['fries', 'dumplings', 'pizza', 'soda', 'salad', 'rice bowl', 'burger', 'cake', 'cookie', 'ice cream', 'sandwich', 'hot dog', 'noodles', 'chicken', 'beef', 'pork', 'fish', 'shrimp', 'lobster', 'crab', 'steak']."}}, "quantity": {"type": "array", "items": {"type": "integer", "description": "the number of the product purchased."}}, "price": {"type": "array", "items": {"type": "float", "description": "the number of the product purchased."}}}, "required": ["item", "quantity", "price"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["order_food(item=['dumplings'], quantity=[101], price=[0.1])", "order_food(item=['rice bowl'], quantity=[20], price=[10])", "order_food(item=['spring rolls'], quantity=[50], price=[0.5])", "order_food(item=['noodle soup'], quantity=[10], price=[3])"], "execution_result": [10.100000000000001, 200, 25.0, 30]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"order_food\", \"arguments\": \"{\\\"item\\\": [\\\"dumplings\\\", \\\"rice bowl\\\", \\\"spring roll\\\", \\\"noodles soup\\\"], \\\"quantity\\\": [101, 20, 50, 10], \\\"price\\\": [0.1, 10.0, 0.5, 3.0]}\"}<|tool_call_end|>", "model_result_decoded": ["order_food(item=['dumplings', 'rice bowl', 'spring roll', 'noodles soup'],quantity=[101, 20, 50, 10],price=[0.1, 10.0, 0.5, 3.0])"]}
{"id": 48, "model_name": "breeze-fc-v1", "test_category": "executable_parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2, 3] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Error in execution: \"get_movie_director(movie_name='\u4f4e\u4fd7\u5c0f\u8aaa')\". Error: 'Director'"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 1": {"sub_error": ["Error in execution: \"get_movie_director(movie_name='\u60e1\u72ac\u5144\u5f1f')\". Error: 'Director'"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 2": {"sub_error": ["Error in execution: \"get_movie_director(movie_name='\u8ffd\u6bba\u6bd4\u723e')\". Error: 'Director'"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 3": {"sub_error": ["Error in execution: \"get_movie_director(movie_name='\u88ab\u89e3\u653e\u7684\u59dc\u6208')\". Error: 'Director'"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}], "error_type": "executable_checker:cannot_find_match", "prompt": {"id": "executable_parallel_function_47", "question": "\u4eca\u665a\u6211\u8981\u8209\u8fa6\u4e00\u5834\u5854\u502b\u63d0\u8afe\u96fb\u5f71\u99ac\u62c9\u677e\uff0c\u60f3\u8981\u78ba\u4fdd\u6211\u5c0d\u9019\u4e9b\u96fb\u5f71\u7684\u4e8b\u5be6\u90fd\u6709\u6240\u4e86\u89e3\uff0c\u4ee5\u4fbf\u5728\u548c\u670b\u53cb\u5011\u4e00\u8d77\u73a9\u554f\u7b54\u904a\u6232\u6642\u80fd\u5920\u8868\u73fe\u51fa\u8272\u3002\u4f60\u80fd\u5e6b\u6211\u627e\u4e00\u4e0b\u9019\u4e9b\u96fb\u5f71\u7684\u5c0e\u6f14\u55ce\uff1f\u5b83\u5011\u5206\u5225\u662f\u300a\u4f4e\u4fd7\u5c0f\u8aaa\u300b\u3001\u300a\u60e1\u72ac\u5144\u5f1f\u300b\u3001\u300a\u8ffd\u6bba\u6bd4\u723e\u300b\u548c\u300a\u88ab\u89e3\u653e\u7684\u59dc\u6208\u300b\u3002\u6211\u9700\u8981\u9019\u4e9b\u8cc7\u8a0a\u4f86\u7d66\u6211\u7684\u670b\u53cb\u5011\u7559\u4e0b\u6df1\u523b\u7684\u5370\u8c61\u3002", "function": {"name": "get_movie_director", "description": "Fetches the director of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_movie_director(movie_name='Pulp Fiction')", "get_movie_director(movie_name='Reservoir Dogs')", "get_movie_director(movie_name='Kill Bill')", "get_movie_director(movie_name='Django Unchained')"], "execution_result": ["Quentin Tarantino", "Quentin Tarantino", "Quentin Tarantino", "Quentin Tarantino"]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_movie_director\", \"arguments\": \"{\\\"movie_name\\\": \\\"\u4f4e\u4fd7\u5c0f\u8aaa\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"get_movie_director\", \"arguments\": \"{\\\"movie_name\\\": \\\"\u60e1\u72ac\u5144\u5f1f\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"get_movie_director\", \"arguments\": \"{\\\"movie_name\\\": \\\"\u8ffd\u6bba\u6bd4\u723e\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"get_movie_director\", \"arguments\": \"{\\\"movie_name\\\": \\\"\u88ab\u89e3\u653e\u7684\u59dc\u6208\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["get_movie_director(movie_name='\u4f4e\u4fd7\u5c0f\u8aaa')", "get_movie_director(movie_name='\u60e1\u72ac\u5144\u5f1f')", "get_movie_director(movie_name='\u8ffd\u6bba\u6bd4\u723e')", "get_movie_director(movie_name='\u88ab\u89e3\u653e\u7684\u59dc\u6208')"]}
{"id": 49, "model_name": "breeze-fc-v1", "test_category": "executable_parallel_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2, 3] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Error in execution: \"get_movie_rating(movie_name='\u4f4e\u4fd7\u5c0f\u8aaa')\". Error: 'Rated'"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 1": {"sub_error": ["Error in execution: \"get_movie_rating(movie_name='\u6559\u7236')\". Error: 'Rated'"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 2": {"sub_error": ["Error in execution: \"get_movie_rating(movie_name='\u8f9b\u5fb7\u52d2\u7684\u540d\u55ae')\". Error: 'Rated'"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}, {"Model Result Index 3": {"sub_error": ["Error in execution: \"get_movie_rating(movie_name='\u9ed1\u6697\u9a0e\u58eb')\". Error: 'Rated'"], "sub_error_type": "executable_checker:execution_error", "model_executed_output": null}}], "error_type": "executable_checker:cannot_find_match", "prompt": {"id": "executable_parallel_function_48", "question": "\u6211\u6700\u8fd1\u4e00\u76f4\u5728\u8ffd\u770b\u7d93\u5178\u96fb\u5f71\uff0c\u6211\u5df2\u7d93\u6e96\u5099\u597d\u5e7e\u90e8\u6a19\u8a8c\u6027\u7684\u96fb\u5f71\u4f86\u770b\u4e0b\u4e00\u6b21\u7684\u96fb\u5f71\u4e4b\u591c\u3002\u4e0d\u904e\uff0c\u6211\u7684\u8868\u5f1f\u6703\u7559\u5bbf\uff0c\u6211\u60f3\u78ba\u4fdd\u9019\u4e9b\u96fb\u5f71\u9069\u5408\u6211\u5011\u4e00\u8d77\u770b\u3002\u4f60\u53ef\u4ee5\u5e6b\u6211\u67e5\u4e00\u4e0b\u300a\u4f4e\u4fd7\u5c0f\u8aaa\u300b\u3001\u300a\u6559\u7236\u300b\u3001\u300a\u8f9b\u5fb7\u52d2\u7684\u540d\u55ae\u300b\u548c\u300a\u9ed1\u6697\u9a0e\u58eb\u300b\u7684\u5e74\u9f61\u5206\u7d1a\u55ce\uff1f", "function": {"name": "get_movie_rating", "description": "Fetches the age rating of a movie from the OMDB API.", "parameters": {"type": "dict", "properties": {"movie_name": {"type": "string", "description": "The name of the movie."}}, "required": ["movie_name"]}}, "execution_result_type": ["exact_match", "exact_match", "exact_match", "exact_match"], "ground_truth": ["get_movie_rating(movie_name='Pulp Fiction')", "get_movie_rating(movie_name='The Godfather')", "get_movie_rating(movie_name=\"Schindler's List\")", "get_movie_rating(movie_name='The Dark Knight')"], "execution_result": ["R", "R", "R", "PG-13"]}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_movie_rating\", \"arguments\": \"{\\\"movie_name\\\": \\\"\u4f4e\u4fd7\u5c0f\u8aaa\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"get_movie_rating\", \"arguments\": \"{\\\"movie_name\\\": \\\"\u6559\u7236\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"get_movie_rating\", \"arguments\": \"{\\\"movie_name\\\": \\\"\u8f9b\u5fb7\u52d2\u7684\u540d\u55ae\\\"}\"}<|tool_call_end|><|tool_call_begin|> {\"name\": \"get_movie_rating\", \"arguments\": \"{\\\"movie_name\\\": \\\"\u9ed1\u6697\u9a0e\u58eb\\\"}\"}<|tool_call_end|>", "model_result_decoded": ["get_movie_rating(movie_name='\u4f4e\u4fd7\u5c0f\u8aaa')", "get_movie_rating(movie_name='\u6559\u7236')", "get_movie_rating(movie_name='\u8f9b\u5fb7\u52d2\u7684\u540d\u55ae')", "get_movie_rating(movie_name='\u9ed1\u6697\u9a0e\u58eb')"]}