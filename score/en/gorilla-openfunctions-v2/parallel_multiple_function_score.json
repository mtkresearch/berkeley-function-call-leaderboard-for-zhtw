{"accuracy": 0.86, "correct_count": 172, "total_count": 200}
{"id": 3, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_multiple_function_2", "question": "Find the area and perimeter of a circle with a radius of 5 and also find the circumference of a circle with diameter of 10.", "function": [{"name": "circle.calculate_circumference", "description": "Calculate the circumference of a circle based on the diameter.", "parameters": {"type": "dict", "properties": {"diameter": {"type": "integer", "description": "The diameter of the circle."}}, "required": ["diameter"]}}, {"name": "circle.calculate_area", "description": "Calculate the area of a circle based on the radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}, {"name": "rectangle.calculate_perimeter", "description": "Calculate the perimeter of a rectangle based on the length and breadth.", "parameters": {"type": "dict", "properties": {"length": {"type": "integer", "description": "The length of the rectangle."}, "breadth": {"type": "integer", "description": "The breadth of the rectangle."}}, "required": ["length", "breadth"]}}]}, "model_result_raw": "circle.calculate_area(radius=5), rectangle.calculate_perimeter(length=10, breadth=10), circle.calculate_circumference(diameter=10)", "model_result_decoded": [{"circle.calculate_area": {"radius": 5}}, {"rectangle.calculate_perimeter": {"length": 10, "breadth": 10}}, {"circle.calculate_circumference": {"diameter": 10}}], "possible_answer": {"circle.calculate_area": {"radius": [5]}, "circle.calculate_circumference_1": {"diameter": [10]}}}
{"id": 16, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'rating': 4.0. Expected one of [1.0, '']."], "sub_error_type": "value_error:others", "model_output_item": {"restaurant.search": {"location": "New York, NY", "cuisine": "Chinese", "rating": 4.0}}, "possible_answer_item": {"restaurant.search_1": {"location": ["New York, NY", "\u7d10\u7d04"], "cuisine": ["Chinese", "\u4e2d\u5f0f"], "rating": [1.0, ""]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'location': 'Los Angeles, CA'. Expected one of ['New York, NY', '\u7d10\u7d04']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"restaurant.search": {"location": "Los Angeles, CA", "cuisine": "Italian", "rating": 4.0}}, "possible_answer_item": {"restaurant.search_1": {"location": ["New York, NY", "\u7d10\u7d04"], "cuisine": ["Chinese", "\u4e2d\u5f0f"], "rating": [1.0, ""]}}}}, {"Model Result Index 2": {"sub_error": ["Function name 'restaurant.search' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"flight.search": {"_from": "New York, NY", "to": "Los Angeles, CA", "type": "round-trip"}}, "possible_answer_item": {"restaurant.search_1": {"location": ["New York, NY", "\u7d10\u7d04"], "cuisine": ["Chinese", "\u4e2d\u5f0f"], "rating": [1.0, ""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_15", "question": "Find a Chinese restaurant near me in New York and suggest a high-rated of 4 Italian restaurant in Los Angeles. Then find a cheapest flight for round-trip from New York to Los Angeles", "function": [{"name": "restaurant.search", "description": "Find a restaurant in a specified location based on the cuisine and ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "cuisine": {"type": "string", "description": "The type of cuisine."}, "rating": {"type": "float", "description": "The minimum rating. Default 1.0"}}, "required": ["location", "cuisine"], "optional": ["rating"]}}, {"name": "flight.search", "description": "Find flights between two cities.", "parameters": {"type": "dict", "properties": {"_from": {"type": "string", "description": "The departure city."}, "to": {"type": "string", "description": "The destination city."}, "type": {"type": "string", "description": "The type of flight e.g., one-way, round-trip"}}, "required": ["_from", "to", "type"]}}]}, "model_result_raw": "restaurant.search(location='New York, NY', cuisine='Chinese', rating=4.0), restaurant.search(location='Los Angeles, CA', cuisine='Italian', rating=4.0), flight.search(_from='New York, NY', to='Los Angeles, CA', type='round-trip')", "model_result_decoded": [{"restaurant.search": {"location": "New York, NY", "cuisine": "Chinese", "rating": 4.0}}, {"restaurant.search": {"location": "Los Angeles, CA", "cuisine": "Italian", "rating": 4.0}}, {"flight.search": {"_from": "New York, NY", "to": "Los Angeles, CA", "type": "round-trip"}}], "possible_answer": {"restaurant.search_1": {"location": ["New York, NY", "\u7d10\u7d04"], "cuisine": ["Chinese", "\u4e2d\u5f0f"], "rating": [1.0, ""]}, "restaurant.search_2": {"location": ["Los Angeles, CA", "\u6d1b\u6749\u78ef"], "cuisine": ["Italian", "\u7fa9\u5f0f"], "rating": [4.0]}, "flight.search": {"_from": ["New York", "New York, NY", "\u7d10\u7d04"], "to": ["Los Angeles", "Los Angeles, CA", "\u6d1b\u6749\u78ef"], "type": ["round-trip", "round trip", "\u4f86\u56de"]}}}
{"id": 30, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_multiple_function_29", "question": "Find cases that pertain to 'Theft' from court record in 'New York' and from 'San Francisco', filed in year 2021, and display briefs of top 5 relevant cases.", "function": [{"name": "briefs.display_cases", "description": "Display briefs of the cases", "parameters": {"type": "dict", "properties": {"case_id": {"type": "array", "items": {"type": "string"}, "description": "A list of unique identifiers for cases."}}, "required": ["case_id"]}}, {"name": "court_records.search_cases", "description": "Search for court cases based on specific criteria.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the court is located"}, "query": {"type": "string", "description": "Search string to look for specific cases"}, "year": {"type": "integer", "description": "Year the case was filed"}, "limit": {"type": "integer", "description": "Limits the number of results returned", "default": 5}}, "required": ["location", "query", "year"]}}]}, "model_result_raw": "court_records.search_cases(location='New York', query='Theft', year=2021, limit=5), court_records.search_cases(location='San Francisco', query='Theft', year=2021, limit=5), briefs.display_cases(case_id=['NYC-TH-2021-001', 'SF-TH-2021-002'])", "model_result_decoded": [{"court_records.search_cases": {"location": "New York", "query": "Theft", "year": 2021, "limit": 5}}, {"court_records.search_cases": {"location": "San Francisco", "query": "Theft", "year": 2021, "limit": 5}}, {"briefs.display_cases": {"case_id": ["NYC-TH-2021-001", "SF-TH-2021-002"]}}], "possible_answer": {"court_records.search_cases_1": {"location": ["New York", "\u7d10\u7d04"], "query": ["Theft", "\u76dc\u7aca"], "year": [2021], "limit": [5, ""]}, "court_records.search_cases_2": {"location": ["San Francisco", "\u820a\u91d1\u5c71"], "query": ["Theft", "\u76dc\u7aca"], "year": [2021], "limit": [5, ""]}}}
{"id": 32, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_multiple_function_31", "question": "Find how many cases and the judge handling a specific lawsuit for Pacific Gas and Electric and Tesla Inc.", "function": [{"name": "lawsuit.fetch_details", "description": "Fetch the details of a lawsuit for a specific company.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The company involved in the lawsuit."}}, "required": ["company_name"]}}, {"name": "lawsuit.judge", "description": "Fetch the judge handling a lawsuit for a specific company.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The company involved in the lawsuit."}, "lawsuit_id": {"type": "integer", "description": "The ID number of the lawsuit. Default to 123", "default": 123}}, "required": ["company_name"]}}]}, "model_result_raw": "lawsuit.fetch_details(company_name='Pacific Gas and Electric'), lawsuit.judge(company_name='Tesla Inc.')", "model_result_decoded": [{"lawsuit.fetch_details": {"company_name": "Pacific Gas and Electric"}}, {"lawsuit.judge": {"company_name": "Tesla Inc."}}], "possible_answer": {"lawsuit.fetch_details_1": {"company_name": ["Pacific Gas and Electric", "PG&E"]}, "lawsuit.judge_1": {"company_name": ["Pacific Gas and Electric", "PG&E"], "lawsuit_id": [123, ""]}, "lawsuit.fetch_details_2": {"company_name": ["Tesla Inc.", "Tesla"]}, "lawsuit.judge_2": {"company_name": ["Tesla Inc.", "Tesla"], "lawsuit_id": [123, ""]}}}
{"id": 37, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [0, 1] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'specific_info': ['overview', 'causalities', 'date']. Expected one of [['overview'], ['\u6982\u8ff0']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"euro_history.battle_details": {"battle_name": "Battle of Waterloo", "specific_info": ["overview", "causalities", "date"]}}, "possible_answer_item": {"euro_history.battle_details": {"battle_name": ["Battle of Waterloo", "Waterloo", "\u6ed1\u9435\u76e7\u6230\u5f79"], "specific_info": [["overview"], ["\u6982\u8ff0"]]}}}}, {"Model Result Index 1": {"sub_error": ["Function name 'euro_history.battle_details' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"euro_history.treaty_info": {"treaty_name": "Treaty of Tordesillas", "info_requested": ["signatories", "ratification date", "clauses", "overview"]}}, "possible_answer_item": {"euro_history.battle_details": {"battle_name": ["Battle of Waterloo", "Waterloo", "\u6ed1\u9435\u76e7\u6230\u5f79"], "specific_info": [["overview"], ["\u6982\u8ff0"]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_36", "question": "Find overview about the Battle of Waterloo and the signing of the Treaty of Tordesillas.", "function": [{"name": "euro_history.treaty_info", "description": "Retrieve specific information about a signed European treaty.", "parameters": {"type": "dict", "properties": {"treaty_name": {"type": "string", "description": "The name of the treaty."}, "info_requested": {"type": "array", "items": {"type": "string", "enum": ["signatories", "ratification date", "clauses", "overview"]}, "description": "Specific aspects of the treaty for which to return information."}}, "required": ["treaty_name", "info_requested"]}}, {"name": "euro_history.battle_details", "description": "Retrieve detailed information about a specific European historical battle.", "parameters": {"type": "dict", "properties": {"battle_name": {"type": "string", "description": "The name of the historical battle."}, "specific_info": {"type": "array", "items": {"type": "string", "enum": ["overview", "causalities", "date"]}, "description": "The specific types of information to return about the battle."}}, "required": ["battle_name", "specific_info"]}}]}, "model_result_raw": "euro_history.battle_details(battle_name='Battle of Waterloo', specific_info=['overview', 'causalities', 'date']), euro_history.treaty_info(treaty_name='Treaty of Tordesillas', info_requested=['signatories', 'ratification date', 'clauses', 'overview'])", "model_result_decoded": [{"euro_history.battle_details": {"battle_name": "Battle of Waterloo", "specific_info": ["overview", "causalities", "date"]}}, {"euro_history.treaty_info": {"treaty_name": "Treaty of Tordesillas", "info_requested": ["signatories", "ratification date", "clauses", "overview"]}}], "possible_answer": {"euro_history.battle_details": {"battle_name": ["Battle of Waterloo", "Waterloo", "\u6ed1\u9435\u76e7\u6230\u5f79"], "specific_info": [["overview"], ["\u6982\u8ff0"]]}, "euro_history.treaty_info": {"treaty_name": ["Treaty of Tordesillas", "Tordesillas", "\u6258\u5fb7\u897f\u5229\u4e9e\u65af\u689d\u7d04", "\u6258\u5fb7\u897f\u5229\u4e9e\u65af\u689d\u7d04\u7c3d\u7f72"], "info_requested": [["overview"], ["\u6982\u8ff0"]]}}}
{"id": 42, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_multiple_function_41", "question": "Create a square painting with blue background and dimensions 16x16 inches, then display it for 30 seconds with 70% screen brightness", "function": [{"name": "painting.create", "description": "Creates a new painting with specified parameters", "parameters": {"type": "dict", "properties": {"shape": {"type": "string", "description": "Shape of the painting to be created."}, "background_color": {"type": "string", "description": "Background color of the painting."}, "dimensions": {"type": "array", "items": {"type": "integer"}, "description": "Dimensions of the painting in inches."}}, "required": ["shape", "background_color", "dimensions"]}}, {"name": "display.set_screen_brightness", "description": "Sets the screen brightness for viewing the painting", "parameters": {"type": "dict", "properties": {"percentage": {"type": "integer", "description": "Screen brightness level in percentage."}, "duration": {"type": "integer", "description": "Duration to maintain the brightness level in seconds."}}, "required": ["percentage", "duration"]}}, {"name": "painting.display", "description": "Displays a created painting for a specific amount of time", "parameters": {"type": "dict", "properties": {"time": {"type": "integer", "description": "Time in seconds the painting will be displayed for."}}, "required": ["time"]}}]}, "model_result_raw": "painting.create(shape='square', background_color='blue', dimensions=[16, 16]), display.set_screen_brightness(percentage=70, duration=30)", "model_result_decoded": [{"painting.create": {"shape": "square", "background_color": "blue", "dimensions": [16, 16]}}, {"display.set_screen_brightness": {"percentage": 70, "duration": 30}}], "possible_answer": {"painting.create": {"shape": ["square", "\u6b63\u65b9\u5f62"], "background_color": ["blue", "\u85cd\u8272", "\u85cd"], "dimensions": [[16, 16]]}, "display.set_screen_brightness": {"percentage": [70], "duration": [30]}, "painting.display": {"time": [30]}}}
{"id": 44, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [0, 1] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'museum_location': 'Philadelphia Museum'. Expected one of ['Philadelphia', '\u8cbb\u57ce']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"get_artwork_price": {"museum_location": "Philadelphia Museum", "sculpture_material": "marble", "sculpture_size": [4, 4]}}, "possible_answer_item": {"get_artwork_price_1": {"museum_location": ["Philadelphia", "\u8cbb\u57ce"], "sculpture_material": ["marble", "\u5927\u7406\u77f3"], "sculpture_size": [[4, 4]]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'museum_location': 'New York Museum'. Expected one of ['Philadelphia', '\u8cbb\u57ce']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"get_artwork_price": {"museum_location": "New York Museum", "sculpture_material": "bronze", "sculpture_size": [6, 3]}}, "possible_answer_item": {"get_artwork_price_1": {"museum_location": ["Philadelphia", "\u8cbb\u57ce"], "sculpture_material": ["marble", "\u5927\u7406\u77f3"], "sculpture_size": [[4, 4]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_43", "question": "What is the average price of a 4 ft x 4 ft marble statue in the museum of Philadelphia and 6 ft x 3 ft bronze sculpture in New York museum? ", "function": [{"name": "get_sculpture_details", "description": "Retrieves details of a sculpture, such as its material and size, from a museum database.", "parameters": {"type": "dict", "properties": {"museum_location": {"type": "string", "description": "Location of the museum housing the sculpture."}, "sculpture_id": {"type": "integer", "description": "Database ID of the sculpture."}}, "required": ["museum_location", "sculpture_id"]}}, {"name": "get_artwork_price", "description": "Retrieves the price of a sculpture based on size and material.", "parameters": {"type": "dict", "properties": {"museum_location": {"type": "string", "description": "Location of the museum housing the sculpture."}, "sculpture_material": {"type": "string", "description": "Material of the sculpture."}, "sculpture_size": {"type": "array", "items": {"type": "integer"}, "description": "Dimensions of the sculpture."}}, "required": ["museum_location", "sculpture_material", "sculpture_size"]}}]}, "model_result_raw": "get_artwork_price(museum_location='Philadelphia Museum', sculpture_material='marble', sculpture_size=[4, 4]), get_artwork_price(museum_location='New York Museum', sculpture_material='bronze', sculpture_size=[6, 3])", "model_result_decoded": [{"get_artwork_price": {"museum_location": "Philadelphia Museum", "sculpture_material": "marble", "sculpture_size": [4, 4]}}, {"get_artwork_price": {"museum_location": "New York Museum", "sculpture_material": "bronze", "sculpture_size": [6, 3]}}], "possible_answer": {"get_artwork_price_1": {"museum_location": ["Philadelphia", "\u8cbb\u57ce"], "sculpture_material": ["marble", "\u5927\u7406\u77f3"], "sculpture_size": [[4, 4]]}, "get_artwork_price_2": {"museum_location": ["New York", "\u7d10\u7d04"], "sculpture_material": ["bronze", "\u9752\u9285"], "sculpture_size": [[6, 3]]}}}
{"id": 52, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [1] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Function name 'get_player_record' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"get_team_info": {"team": "Chicago Bulls", "info": "championships_won"}}, "possible_answer_item": {"get_player_record_2": {"player": ["Michael Jordan", "\u9ea5\u53ef\u00b7\u55ac\u4e39", "\u9ea5\u53ef\u55ac\u4e39"], "stat": ["total_championships", "\u7e3d\u51a0\u8ecd\u7e3d\u6578"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_51", "question": "Can you find information on Michael Jordan's highest scoring game and the total championships he won?", "function": [{"name": "get_team_info", "description": "Retrieve information for a specific team, such as championships won.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "info": {"type": "string", "description": "The information sought. E.g., 'championships_won'."}}, "required": ["team", "info"]}}, {"name": "get_player_record", "description": "Retrieve record stats for a specific player and stat type.", "parameters": {"type": "dict", "properties": {"player": {"type": "string", "description": "The name of the player."}, "stat": {"type": "string", "description": "The type of statistic. E.g., 'highest_scoring_game', 'total_championships'."}}, "required": ["player", "stat"]}}]}, "model_result_raw": "get_player_record(player='Michael Jordan', stat='highest_scoring_game'), get_team_info(team='Chicago Bulls', info='championships_won')", "model_result_decoded": [{"get_player_record": {"player": "Michael Jordan", "stat": "highest_scoring_game"}}, {"get_team_info": {"team": "Chicago Bulls", "info": "championships_won"}}], "possible_answer": {"get_player_record_1": {"player": ["Michael Jordan", "\u9ea5\u53ef\u00b7\u55ac\u4e39", "\u9ea5\u53ef\u55ac\u4e39"], "stat": ["highest_scoring_game", "\u6700\u9ad8\u5f97\u5206\u6bd4\u8cfd"]}, "get_player_record_2": {"player": ["Michael Jordan", "\u9ea5\u53ef\u00b7\u55ac\u4e39", "\u9ea5\u53ef\u55ac\u4e39"], "stat": ["total_championships", "\u7e3d\u51a0\u8ecd\u7e3d\u6578"]}}}
{"id": 54, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [0, 1] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'player_count': 5. Expected one of [6]."], "sub_error_type": "value_error:others", "model_output_item": {"board_game_search": {"complexity": 2.5, "player_count": 5}}, "possible_answer_item": {"board_game_search": {"complexity": [2.5], "player_count": [6]}}}}, {"Model Result Index 1": {"sub_error": ["Function name 'board_game_search' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"trivia_game_search": {"duration": 60}}, "possible_answer_item": {"board_game_search": {"complexity": [2.5], "player_count": [6]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_53", "question": "Find a board game with complexity rating under 2.5 and that supports more than 5 players, as well as a trivia game that could be played within 60 minutes.", "function": [{"name": "card_game_search", "description": "Locate a card game based on a specific theme.", "parameters": {"type": "dict", "properties": {"theme": {"type": "string", "description": "The theme for the card game."}}, "required": ["theme"]}}, {"name": "board_game_search", "description": "Locate a board game based on specific criteria.", "parameters": {"type": "dict", "properties": {"complexity": {"type": "float", "description": "The maximum complexity rating of the board game (lower is simpler)."}, "player_count": {"type": "integer", "description": "The minimum player count for the board game."}}, "required": ["complexity", "player_count"]}}, {"name": "trivia_game_search", "description": "Locate a trivia game based on play duration.", "parameters": {"type": "dict", "properties": {"duration": {"type": "float", "description": "The maximum playing duration for the trivia game in minutes."}}, "required": ["duration"]}}]}, "model_result_raw": "board_game_search(complexity=2.5, player_count=5), trivia_game_search(duration=60)", "model_result_decoded": [{"board_game_search": {"complexity": 2.5, "player_count": 5}}, {"trivia_game_search": {"duration": 60}}], "possible_answer": {"board_game_search": {"complexity": [2.5], "player_count": [6]}, "trivia_game_search": {"duration": [60.0, 45.0, 30.0]}}}
{"id": 55, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_multiple_function_54", "question": "In game Battle Reign, change the armor level to 5 and find me a game guide for how to win in snowy weather conditions. Also find me any strategy guides available for game Shadow Fall.", "function": [{"name": "BattleReignGameAPI.update_player_equipment", "description": "Modify the player's equipment level for specified attributes", "parameters": {"type": "dict", "properties": {"attribute": {"type": "string", "description": "The attribute of the equipment to modify."}, "level": {"type": "integer", "description": "The level to modify the attribute to."}, "playerID": {"type": "integer", "description": "Player ID of the player. Default to 123", "default": 123}}, "required": ["attribute", "level"]}}, {"name": "GameGuideAPI.search_guide", "description": "Search for game guides given specific conditions and preferences", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "Name of the game."}, "condition": {"type": "string", "description": "Specific game conditions. (eg: 'snowy weather', 'hard mode').", "default": ""}, "type": {"type": "string", "description": "Specific type of guide. (eg: 'strategy', 'walkthrough')", "default": ""}}, "required": ["game"]}}]}, "model_result_raw": "BattleReignGameAPI.update_player_equipment(attribute='armor', level=5), GameGuideAPI.search_guide(game='Shadow Fall', condition='snowy weather', type='strategy')", "model_result_decoded": [{"BattleReignGameAPI.update_player_equipment": {"attribute": "armor", "level": 5}}, {"GameGuideAPI.search_guide": {"game": "Shadow Fall", "condition": "snowy weather", "type": "strategy"}}], "possible_answer": {"BattleReignGameAPI.update_player_equipment": {"attribute": ["armor", "\u8b77\u7532"], "level": [5], "playerID": [123, ""]}, "GameGuideAPI.search_guide_1": {"game": ["Battle Reign"], "condition": ["snowy weather", "\u96ea\u5929"], "type": [""]}, "GameGuideAPI.search_guide_2": {"game": ["Shadow Fall"], "type": ["strategy", "\u7b56\u7565"], "condition": [""]}}}
{"id": 56, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [1, 2] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'recipe': 'Homemade Gluten Free Spaghetti'. Expected one of ['spaghetti', 'homemade healthy spaghetti', 'Homemade healthy gluten free spaghetti', 'homemade_spaghetti', '\u7fa9\u5927\u5229\u9eb5', '\u81ea\u88fd\u7684\u5065\u5eb7\u610f\u5927\u5229\u9eb5', '\u5065\u5eb7\u610f\u5927\u5229\u9eb5']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"recipe_prep_time": {"recipe": "Homemade Gluten Free Spaghetti"}}, "possible_answer_item": {"recipe_prep_time": {"recipe": ["spaghetti", "homemade healthy spaghetti", "Homemade healthy gluten free spaghetti", "homemade_spaghetti", "\u7fa9\u5927\u5229\u9eb5", "\u81ea\u88fd\u7684\u5065\u5eb7\u610f\u5927\u5229\u9eb5", "\u5065\u5eb7\u610f\u5927\u5229\u9eb5"]}}}}, {"Model Result Index 2": {"sub_error": ["Function name 'recipe_prep_time' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"recipe_nutrition_info": {"recipe": "Homemade Gluten Free Spaghetti"}}, "possible_answer_item": {"recipe_prep_time": {"recipe": ["spaghetti", "homemade healthy spaghetti", "Homemade healthy gluten free spaghetti", "homemade_spaghetti", "\u7fa9\u5927\u5229\u9eb5", "\u81ea\u88fd\u7684\u5065\u5eb7\u610f\u5927\u5229\u9eb5", "\u5065\u5eb7\u610f\u5927\u5229\u9eb5"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_55", "question": "I want a homemade healthy spaghetti recipe that is gluten free, how long will it take to prepare and cook, and what nutritional information could it provide me.", "function": [{"name": "recipe_prep_time", "description": "Calculate the estimated preparation and cooking time for a specified recipe.", "parameters": {"type": "dict", "properties": {"recipe": {"type": "string", "description": "Name of the recipe to calculate time for."}}, "required": ["recipe"]}}, {"name": "recipe_nutrition_info", "description": "Provide detailed nutritional information for a specified recipe.", "parameters": {"type": "dict", "properties": {"recipe": {"type": "string", "description": "Name of the recipe to fetch nutrition info for."}}, "required": ["recipe"]}}, {"name": "recipe_search", "description": "Search for a recipe based on a particular ingredient or dietary requirement.", "parameters": {"type": "dict", "properties": {"ingredient": {"type": "string", "description": "The ingredient that you want to have in the recipe."}, "dietary_requirements": {"type": "array", "items": {"type": "string", "enum": ["gluten_free", "dairy_free", "vegetarian", "vegan"]}, "description": "Dietary requirements in the recipe."}, "isHomemade": {"type": "boolean", "description": "If true, returns homemade recipe; otherwise, return not homemade recipe."}}, "required": ["ingredient", "dietary_requirements", "isHomemade"]}}]}, "model_result_raw": "recipe_search(ingredient='spaghetti', dietary_requirements=['gluten_free'], isHomemade=True), recipe_prep_time(recipe='Homemade Gluten Free Spaghetti'), recipe_nutrition_info(recipe='Homemade Gluten Free Spaghetti')", "model_result_decoded": [{"recipe_search": {"ingredient": "spaghetti", "dietary_requirements": ["gluten_free"], "isHomemade": true}}, {"recipe_prep_time": {"recipe": "Homemade Gluten Free Spaghetti"}}, {"recipe_nutrition_info": {"recipe": "Homemade Gluten Free Spaghetti"}}], "possible_answer": {"recipe_search": {"ingredient": ["spaghetti", "\u7fa9\u5927\u5229\u9eb5"], "dietary_requirements": [["gluten_free"], ["\u7121\u9ea9\u8cea"]], "isHomemade": [true]}, "recipe_prep_time": {"recipe": ["spaghetti", "homemade healthy spaghetti", "Homemade healthy gluten free spaghetti", "homemade_spaghetti", "\u7fa9\u5927\u5229\u9eb5", "\u81ea\u88fd\u7684\u5065\u5eb7\u610f\u5927\u5229\u9eb5", "\u5065\u5eb7\u610f\u5927\u5229\u9eb5"]}, "recipe_nutrition_info": {"recipe": ["homemade_spaghetti", "homemade healthy spaghetti", "spaghetti", "Homemade healthy gluten free spaghetti", "\u7fa9\u5927\u5229\u9eb5", "\u81ea\u88fd\u7684\u5065\u5eb7\u610f\u5927\u5229\u9eb5", "\u5065\u5eb7\u610f\u5927\u5229\u9eb5"]}}}
{"id": 65, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [0, 2, 3] of model output for index 1 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'location': 'Africa'. Expected one of ['Serengeti', '\u585e\u502b\u84cb\u63d0']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"ecological_impact.analyze": {"species": "African Elephant", "ecosystem": "Serengeti", "location": "Africa"}}, "possible_answer_item": {"ecological_impact.analyze_1": {"species": ["African Elephant", "\u975e\u6d32\u5927\u8c61"], "ecosystem": ["Serengeti", "Serengeti ecosystem", "\u585e\u502b\u84cb\u63d0", "\u585e\u502b\u84cb\u63d0\u751f\u614b\u7cfb"], "location": ["Serengeti", "\u585e\u502b\u84cb\u63d0"], "timeframe": [5, ""]}}}}, {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'species': 'Bengal Tiger'. Expected one of ['African Elephant', '\u975e\u6d32\u5927\u8c61']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"ecological_impact.analyze": {"species": "Bengal Tiger", "ecosystem": "Sundarbans", "location": "India"}}, "possible_answer_item": {"ecological_impact.analyze_1": {"species": ["African Elephant", "\u975e\u6d32\u5927\u8c61"], "ecosystem": ["Serengeti", "Serengeti ecosystem", "\u585e\u502b\u84cb\u63d0", "\u585e\u502b\u84cb\u63d0\u751f\u614b\u7cfb"], "location": ["Serengeti", "\u585e\u502b\u84cb\u63d0"], "timeframe": [5, ""]}}}}, {"Model Result Index 3": {"sub_error": ["Function name 'ecological_impact.analyze' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"wildlife_population.assess_growth": {"species": "Bengal Tiger", "location": "Sundarbans", "duration": 7}}, "possible_answer_item": {"ecological_impact.analyze_1": {"species": ["African Elephant", "\u975e\u6d32\u5927\u8c61"], "ecosystem": ["Serengeti", "Serengeti ecosystem", "\u585e\u502b\u84cb\u63d0", "\u585e\u502b\u84cb\u63d0\u751f\u614b\u7cfb"], "location": ["Serengeti", "\u585e\u502b\u84cb\u63d0"], "timeframe": [5, ""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_64", "question": "\"Can you help me understand the ecological impact of the African Elephant in the Serengeti ecosystem over the last 5 years and also assess the population growth of the same species in the same location over the last 10 years? After that, I would also like to know the ecological impact of the Bengal Tiger in the Sundarbans ecosystem over the last 3 years and assess the population growth of the same species in the same location over the last 7 years.\"", "function": [{"name": "wildlife_population.assess_growth", "description": "Assesses the population growth of a specific species in a specified location over a period.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which the growth is to be calculated."}, "location": {"type": "string", "description": "The area where the species is present."}, "duration": {"type": "integer", "description": "The time period for which the population growth should be calculated in years."}}, "required": ["species", "location", "duration"]}}, {"name": "ecological_impact.analyze", "description": "Analyzes the impact of a species on a particular ecosystem.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species whose impact is to be calculated."}, "ecosystem": {"type": "string", "description": "The ecosystem being affected."}, "location": {"type": "string", "description": "The area where the impact is analyzed."}, "timeframe": {"type": "integer", "description": "The time period for which the impact analysis should be carried out in years.", "default": 5}}, "required": ["species", "ecosystem", "location"]}}]}, "model_result_raw": "ecological_impact.analyze(species='African Elephant', ecosystem='Serengeti', location='Africa'), wildlife_population.assess_growth(species='African Elephant', location='Serengeti', duration=10), ecological_impact.analyze(species='Bengal Tiger', ecosystem='Sundarbans', location='India'), wildlife_population.assess_growth(species='Bengal Tiger', location='Sundarbans', duration=7)", "model_result_decoded": [{"ecological_impact.analyze": {"species": "African Elephant", "ecosystem": "Serengeti", "location": "Africa"}}, {"wildlife_population.assess_growth": {"species": "African Elephant", "location": "Serengeti", "duration": 10}}, {"ecological_impact.analyze": {"species": "Bengal Tiger", "ecosystem": "Sundarbans", "location": "India"}}, {"wildlife_population.assess_growth": {"species": "Bengal Tiger", "location": "Sundarbans", "duration": 7}}], "possible_answer": {"wildlife_population.assess_growth_1": {"species": ["African Elephant", "\u975e\u6d32\u5927\u8c61"], "location": ["Serengeti", "Serengeti ecosystem", "\u585e\u502b\u84cb\u63d0", "\u585e\u502b\u84cb\u63d0\u751f\u614b\u7cfb"], "duration": [10]}, "ecological_impact.analyze_1": {"species": ["African Elephant", "\u975e\u6d32\u5927\u8c61"], "ecosystem": ["Serengeti", "Serengeti ecosystem", "\u585e\u502b\u84cb\u63d0", "\u585e\u502b\u84cb\u63d0\u751f\u614b\u7cfb"], "location": ["Serengeti", "\u585e\u502b\u84cb\u63d0"], "timeframe": [5, ""]}, "wildlife_population.assess_growth_2": {"species": ["Bengal Tiger", "\u5b5f\u52a0\u62c9\u864e"], "location": ["Sundarbans", "Sundarbans ecosystem", "\u5dfd\u5fb7\u73ed", "\u5dfd\u5fb7\u73ed\u751f\u614b\u7cfb"], "duration": [7]}, "ecological_impact.analyze_2": {"species": ["Bengal Tiger", "Tiger", "\u5b5f\u52a0\u62c9\u864e"], "ecosystem": ["Sundarbans", "Sundarbans ecosystem", "\u5dfd\u5fb7\u73ed", "\u5dfd\u5fb7\u73ed\u751f\u614b\u7cfb"], "location": ["Sundarbans", "\u5dfd\u5fb7\u73ed"], "timeframe": [3]}}}
{"id": 68, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [2] of model output for index 2 of possible answers.", {"Model Result Index 2": {"sub_error": ["Nested type checking failed for parameter 'coefficients'. Expected outer type array with inner type <class 'float'>. Parameter value: [6, -3, 2, -1, 1]."], "sub_error_type": "type_error:nested", "model_output_item": {"math.roots.polynomial": {"coefficients": [6, -3, 2, -1, 1], "degree": 4}}, "possible_answer_item": {"math.roots.polynomial": {"coefficients": [[6.0, -3.0, 2.0, -1.0, 1.0]], "degree": [4.0, ""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_67", "question": "\"Can you help me with some math problems? First, I need to find the roots of a quadratic equation. The equation is 3x^2 + 4x - 7 = 0, where 3 is the coefficient of the second-degree term, 4 is the coefficient of the first-degree term, and -7 is the constant term. \n\nSecond, I have a cubic equation, 2x^3 - 5x^2 + 3x - 1 = 0. Here, 2 is the coefficient of the third-degree term, -5 is the coefficient of the second-degree term, 3 is the coefficient of the first-degree term, and -1 is the constant term. \n\nFinally, I have a polynomial equation of degree 4, which is 6x^4 - 3x^3 + 2x^2 - x + 1 = 0. The array of coefficients of the polynomial equation starting from the highest degree term is [6, -3, 2, -1, 1]. Can you calculate the roots for these equations?\"", "function": [{"name": "math.roots.polynomial", "description": "Calculate the roots of a polynomial equation.", "parameters": {"type": "dict", "properties": {"coefficients": {"type": "array", "items": {"type": "float"}, "description": "Array of coefficients of the polynomial equation starting from highest degree term."}, "degree": {"type": "float", "description": "Degree of the polynomial equation.", "default": 4}}, "required": ["coefficients"]}}, {"name": "math.roots.cubic", "description": "Calculate the roots of a cubic equation.", "parameters": {"type": "dict", "properties": {"a": {"type": "float", "description": "Coefficient of the third-degree term."}, "b": {"type": "float", "description": "Coefficient of the second-degree term."}, "c": {"type": "float", "description": "Coefficient of the first-degree term."}, "d": {"type": "float", "description": "Constant term."}}, "required": ["a", "b", "c", "d"]}}, {"name": "math_roots.quadratic", "description": "Calculate the roots of a quadratic equation.", "parameters": {"type": "dict", "properties": {"a": {"type": "float", "description": "Coefficient of the second-degree term."}, "b": {"type": "float", "description": "Coefficient of the first-degree term."}, "c": {"type": "float", "description": "Constant term."}}, "required": ["a", "b", "c"]}}]}, "model_result_raw": "math_roots.quadratic(a=3, b=4, c=-7), math.roots.cubic(a=2, b=-5, c=3, d=-1), math.roots.polynomial(coefficients=[6, -3, 2, -1, 1], degree=4)", "model_result_decoded": [{"math_roots.quadratic": {"a": 3, "b": 4, "c": -7}}, {"math.roots.cubic": {"a": 2, "b": -5, "c": 3, "d": -1}}, {"math.roots.polynomial": {"coefficients": [6, -3, 2, -1, 1], "degree": 4}}], "possible_answer": {"math_roots.quadratic": {"a": [3.0], "b": [4.0], "c": [-7.0]}, "math.roots.cubic": {"a": [2.0], "b": [-5.0], "c": [3.0], "d": [-1.0]}, "math.roots.polynomial": {"coefficients": [[6.0, -3.0, 2.0, -1.0, 1.0]], "degree": [4.0, ""]}}}
{"id": 70, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2, 3] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'depreciation_rate': 2.0. Expected one of [0.02]."], "sub_error_type": "value_error:others", "model_output_item": {"finance.property_depreciation": {"initial_cost": 500000, "depreciation_rate": 2, "years": 5, "monthly": false}}, "possible_answer_item": {"finance.property_depreciation_1": {"initial_cost": [500000.0], "depreciation_rate": [0.02], "years": [5], "monthly": [""]}}}}, {"Model Result Index 1": {"sub_error": ["Function name 'finance.property_depreciation' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"finance.inflation_adjustment": {"initial_sum": 200000, "years": 5, "inflation_rate": 3}}, "possible_answer_item": {"finance.property_depreciation_1": {"initial_cost": [500000.0], "depreciation_rate": [0.02], "years": [5], "monthly": [""]}}}}, {"Model Result Index 2": {"sub_error": ["Function name 'finance.property_depreciation' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"finance.loan_repayment": {"loan_amount": 300000, "interest_rate": 4, "loan_term": 10}}, "possible_answer_item": {"finance.property_depreciation_1": {"initial_cost": [500000.0], "depreciation_rate": [0.02], "years": [5], "monthly": [""]}}}}, {"Model Result Index 3": {"sub_error": ["Invalid value for parameter 'depreciation_rate': 2.0. Expected one of [0.02]."], "sub_error_type": "value_error:others", "model_output_item": {"finance.property_depreciation": {"initial_cost": 500000, "depreciation_rate": 2, "years": 5, "monthly": true}}, "possible_answer_item": {"finance.property_depreciation_1": {"initial_cost": [500000.0], "depreciation_rate": [0.02], "years": [5], "monthly": [""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_69", "question": "\"Imagine you are a real estate investor. You bought a property 5 years ago for $500,000. The annual depreciation rate for the property is 2%. Can you calculate the current depreciated value of the property? Now, consider you had a sum of $200,000 at the same time you bought the property. If the annual inflation rate has been 3% for the past 5 years, how much would that sum be worth today? Also, suppose you took out a loan of $300,000 with an annual interest rate of 4% to help finance the property purchase. If the loan term was 10 years, what would be your monthly repayment for the loan? Lastly, if you calculate the property depreciation monthly instead of annually, what would be the depreciated value of the property now?\"", "function": [{"name": "finance.loan_repayment", "description": "Calculates the monthly repayment for a loan.", "parameters": {"type": "dict", "properties": {"loan_amount": {"type": "float", "description": "The amount borrowed or loaned."}, "interest_rate": {"type": "float", "description": "The annual interest rate."}, "loan_term": {"type": "integer", "description": "The term of the loan in years."}}, "required": ["loan_amount", "interest_rate", "loan_term"]}}, {"name": "finance.inflation_adjustment", "description": "Adjusts a sum of money for inflation based on the consumer price index (CPI).", "parameters": {"type": "dict", "properties": {"initial_sum": {"type": "float", "description": "The initial sum of money."}, "years": {"type": "integer", "description": "The number of years over which inflation is calculated."}, "inflation_rate": {"type": "float", "description": "The annual rate of inflation."}}, "required": ["initial_sum", "years", "inflation_rate"]}}, {"name": "finance.property_depreciation", "description": "Calculates the depreciated value of a property given its initial cost, depreciation rate, and the number of years.", "parameters": {"type": "dict", "properties": {"initial_cost": {"type": "float", "description": "The initial cost of the property."}, "depreciation_rate": {"type": "float", "description": "The annual depreciation rate in percentage."}, "years": {"type": "integer", "description": "The number of years for which to calculate the depreciation."}, "monthly": {"type": "boolean", "description": "If set to true, it will calculate monthly depreciation instead of annually. (optional)", "default": false}}, "required": ["initial_cost", "depreciation_rate", "years"]}}]}, "model_result_raw": "finance.property_depreciation(initial_cost=500000, depreciation_rate=2, years=5, monthly=False), finance.inflation_adjustment(initial_sum=200000, years=5, inflation_rate=3), finance.loan_repayment(loan_amount=300000, interest_rate=4, loan_term=10), finance.property_depreciation(initial_cost=500000, depreciation_rate=2, years=5, monthly=True)", "model_result_decoded": [{"finance.property_depreciation": {"initial_cost": 500000, "depreciation_rate": 2, "years": 5, "monthly": false}}, {"finance.inflation_adjustment": {"initial_sum": 200000, "years": 5, "inflation_rate": 3}}, {"finance.loan_repayment": {"loan_amount": 300000, "interest_rate": 4, "loan_term": 10}}, {"finance.property_depreciation": {"initial_cost": 500000, "depreciation_rate": 2, "years": 5, "monthly": true}}], "possible_answer": {"finance.property_depreciation_1": {"initial_cost": [500000.0], "depreciation_rate": [0.02], "years": [5], "monthly": [""]}, "finance.inflation_adjustment": {"initial_sum": [200000.0], "years": [5], "inflation_rate": [0.03]}, "finance.loan_repayment": {"loan_amount": [300000.0], "interest_rate": [0.04], "loan_term": [10]}, "finance.property_depreciation_2": {"initial_cost": [500000.0], "depreciation_rate": [0.02], "years": [5], "monthly": [true]}}}
{"id": 76, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2, 3, 4] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Function name 'route_planner.calculate_route' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"chess_club_details.find": {"name": "Knight Gambit", "city": "Boston"}}, "possible_answer_item": {"route_planner.calculate_route_1": {"start": ["New York", "\u7d10\u7d04"], "destination": ["Boston", "\u6ce2\u58eb\u9813"], "method": ["fastest", "", "\u6700\u5feb"]}}}}, {"Model Result Index 1": {"sub_error": ["Function name 'route_planner.calculate_route' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"chess_club_details.find": {"name": "Rook Corner", "city": "Philadelphia"}}, "possible_answer_item": {"route_planner.calculate_route_1": {"start": ["New York", "\u7d10\u7d04"], "destination": ["Boston", "\u6ce2\u58eb\u9813"], "method": ["fastest", "", "\u6700\u5feb"]}}}}, {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'destination': 'Knight Gambit'. Expected one of ['Boston', '\u6ce2\u58eb\u9813']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"route_planner.calculate_route": {"start": "New York", "destination": "Knight Gambit", "method": "fastest"}}, "possible_answer_item": {"route_planner.calculate_route_1": {"start": ["New York", "\u7d10\u7d04"], "destination": ["Boston", "\u6ce2\u58eb\u9813"], "method": ["fastest", "", "\u6700\u5feb"]}}}}, {"Model Result Index 3": {"sub_error": ["Invalid value for parameter 'start': 'Knight Gambit'. Expected one of ['New York', '\u7d10\u7d04']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"route_planner.calculate_route": {"start": "Knight Gambit", "destination": "Rook Corner", "method": "fastest"}}, "possible_answer_item": {"route_planner.calculate_route_1": {"start": ["New York", "\u7d10\u7d04"], "destination": ["Boston", "\u6ce2\u58eb\u9813"], "method": ["fastest", "", "\u6700\u5feb"]}}}}, {"Model Result Index 4": {"sub_error": ["Invalid value for parameter 'start': 'Rook Corner'. Expected one of ['New York', '\u7d10\u7d04']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"route_planner.calculate_route": {"start": "Rook Corner", "destination": "New York", "method": "shortest"}}, "possible_answer_item": {"route_planner.calculate_route_1": {"start": ["New York", "\u7d10\u7d04"], "destination": ["Boston", "\u6ce2\u58eb\u9813"], "method": ["fastest", "", "\u6700\u5feb"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_75", "question": "\"Can you help me plan my day? I want to start from my home in New York and go to a chess club named 'Knight Gambit' located in Boston. I want to take the fastest route. After that, I want to go to another chess club named 'Rook Corner' in Philadelphia, again taking the fastest route. Finally, I want to return home, but this time I want to take the shortest route. Can you also provide me with the details of the events hosted by both chess clubs?\"", "function": [{"name": "chess_club_details.find", "description": "Provides details about a chess club, including location.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the chess club."}, "city": {"type": "string", "description": "The city in which the chess club is located."}, "event": {"type": "string", "description": "The event hosted by the club.", "default": "null"}}, "required": ["name", "city"]}}, {"name": "route_planner.calculate_route", "description": "Determines the best route between two points.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "The starting point of the journey."}, "destination": {"type": "string", "description": "The destination of the journey."}, "method": {"type": "string", "enum": ["fastest", "shortest", "balanced"], "description": "The method to use when calculating the route (default is 'fastest').", "default": "fastest"}}, "required": ["start", "destination"]}}]}, "model_result_raw": "chess_club_details.find(name='Knight Gambit', city='Boston'), chess_club_details.find(name='Rook Corner', city='Philadelphia'), route_planner.calculate_route(start='New York', destination='Knight Gambit', method='fastest'), route_planner.calculate_route(start='Knight Gambit', destination='Rook Corner', method='fastest'), route_planner.calculate_route(start='Rook Corner', destination='New York', method='shortest')", "model_result_decoded": [{"chess_club_details.find": {"name": "Knight Gambit", "city": "Boston"}}, {"chess_club_details.find": {"name": "Rook Corner", "city": "Philadelphia"}}, {"route_planner.calculate_route": {"start": "New York", "destination": "Knight Gambit", "method": "fastest"}}, {"route_planner.calculate_route": {"start": "Knight Gambit", "destination": "Rook Corner", "method": "fastest"}}, {"route_planner.calculate_route": {"start": "Rook Corner", "destination": "New York", "method": "shortest"}}], "possible_answer": {"route_planner.calculate_route_1": {"start": ["New York", "\u7d10\u7d04"], "destination": ["Boston", "\u6ce2\u58eb\u9813"], "method": ["fastest", "", "\u6700\u5feb"]}, "chess_club_details.find_1": {"name": ["Knight Gambit"], "city": ["Boston", "\u6ce2\u58eb\u9813"], "event": ["null", ""]}, "route_planner.calculate_route_2": {"start": ["Boston", "\u6ce2\u58eb\u9813"], "destination": ["Philadelphia", "\u8cbb\u57ce"], "method": ["fastest", "", "\u6700\u5feb"]}, "chess_club_details.find_2": {"name": ["Rook Corner"], "city": ["Philadelphia", "\u8cbb\u57ce"]}, "route_planner.calculate_route_3": {"start": ["Philadelphia", "\u8cbb\u57ce"], "destination": ["New York", "\u7d10\u7d04"], "method": ["shortest", "\u6700\u77ed"]}}}
{"id": 83, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_multiple_function_82", "question": "\"Imagine you are a sculptor working on a large project. You have two different types of materials available to you, each with a different density. The first material has a density of 5.2 g/cm^3 and the second material has a density of 7.8 g/cm^3. You are planning to create two identical cones, each with a base radius of 10 cm and a height of 30 cm. The first cone will be made from the first material and the second cone will be made from the second material. Can you calculate the volume of each cone, rounding off to 2 decimal places, and then calculate the mass of each cone using their respective densities?\"", "function": [{"name": "geometry.calculate_cone_volume", "description": "Calculate the volume of a cone given the radius and height.", "parameters": {"type": "dict", "properties": {"radius": {"type": "float", "description": "Radius of the cone base."}, "height": {"type": "float", "description": "Height of the cone."}, "round_off": {"type": "integer", "description": "Number of decimal places to round off the answer.", "default": 2}}, "required": ["radius", "height"]}}, {"name": "physics.calculate_cone_mass", "description": "Calculate the mass of a cone given the radius, height, and density.", "parameters": {"type": "dict", "properties": {"radius": {"type": "float", "description": "Radius of the cone base."}, "height": {"type": "float", "description": "Height of the cone."}, "density": {"type": "float", "description": "Density of the material the cone is made of."}}, "required": ["radius", "height", "density"]}}]}, "model_result_raw": "geometry.calculate_cone_volume(radius=10, height=30, round_off=2), physics.calculate_cone_mass(radius=10, height=30, density=5.2), geometry.calculate_cone_volume(radius=10, height=30, round_off=2), physics.calculate_cone_mass(radius=10, height=30, density=7.8)", "model_result_decoded": [{"geometry.calculate_cone_volume": {"radius": 10, "height": 30, "round_off": 2}}, {"physics.calculate_cone_mass": {"radius": 10, "height": 30, "density": 5.2}}, {"geometry.calculate_cone_volume": {"radius": 10, "height": 30, "round_off": 2}}, {"physics.calculate_cone_mass": {"radius": 10, "height": 30, "density": 7.8}}], "possible_answer": {"geometry.calculate_cone_volume": {"radius": [10.0], "height": [30.0], "round_off": [2, ""]}, "physics.calculate_cone_mass_1": {"radius": [10.0], "height": [30.0], "density": [5.2]}, "physics.calculate_cone_mass_2": {"radius": [10.0], "height": [30.0], "density": [7.8]}}}
{"id": 85, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_multiple_function_84", "question": "\"Imagine you are a math teacher preparing for a class. You want to create a challenging problem for your students that involves multiple steps. You decide to create a problem that involves finding the least common multiple (LCM) and the greatest common divisor (GCD) of two numbers, and then calculating the square root of these results. You choose the numbers 36 and 48 for the LCM and GCD calculations. For the square root calculations, you want the results to be accurate to 3 decimal places. What are the square roots of the LCM and GCD of 36 and 48, accurate to 3 decimal places?\"", "function": [{"name": "math.sqrt", "description": "Calculates the square root of a number.", "parameters": {"type": "dict", "properties": {"num": {"type": "float", "description": "The number."}, "accuracy": {"type": "float", "description": "The number of decimal places in the result.", "default": 2.0}}, "required": ["num"]}}, {"name": "math.gcd", "description": "Calculates the greatest common divisor of two numbers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}, {"name": "math.lcm", "description": "Calculates the least common multiple of two numbers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}]}, "model_result_raw": "math.lcm(num1=36, num2=48), math.gcd(num1=36, num2=48), math.sqrt(num=math.lcm(num1=36, num2=48), accuracy=3), math.sqrt(num=math.gcd(num1=36, num2=48), accuracy=3)", "model_result_decoded": [{"math.lcm": {"num1": 36, "num2": 48}}, {"math.gcd": {"num1": 36, "num2": 48}}, {"math.sqrt": {"num": {"math.lcm": {"num1": 36, "num2": 48}}, "accuracy": 3}}, {"math.sqrt": {"num": {"math.gcd": {"num1": 36, "num2": 48}}, "accuracy": 3}}], "possible_answer": {"math.lcm": {"num1": [36], "num2": [48]}, "math.gcd": {"num1": [36], "num2": [48]}}}
{"id": 87, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [1] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'distance': 120.0. Expected one of ['']."], "sub_error_type": "value_error:others", "model_output_item": {"kinematics.calculate_acceleration": {"initial_speed": 12, "final_speed": 24, "time": 5, "distance": 120}}, "possible_answer_item": {"kinematics.calculate_acceleration": {"initial_speed": [12.0], "final_speed": [24.0], "time": [5.0], "distance": [""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_86", "question": "\"A car starts from rest and travels a distance of 120 meters in 10 seconds. What is the speed of the car at the end of this time period? After reaching this speed, the car continues to accelerate for another 5 seconds from 12 m/s until it reaches a final speed doubling the initial speed. The final speed is twice the speed calculated in the first part. What is the acceleration of the car in this second phase?\"", "function": [{"name": "kinematics.calculate_acceleration", "description": "Calculates the acceleration of an object under given conditions.", "parameters": {"type": "dict", "properties": {"initial_speed": {"type": "float", "description": "The initial speed of the object."}, "final_speed": {"type": "float", "description": "The final speed of the object."}, "time": {"type": "float", "description": "The time in seconds it took the object to reach the final speed."}, "distance": {"type": "float", "description": "The distance in meters the object has traveled.", "default": 0}}, "required": ["initial_speed", "final_speed", "time"]}}, {"name": "kinematics.calculate_speed_from_rest", "description": "Calculates the speed of an object that starts from rest under a constant acceleration over a specified distance.", "parameters": {"type": "dict", "properties": {"distance": {"type": "float", "description": "The distance in meters the object has traveled."}, "time": {"type": "float", "description": "The time in seconds it took the object to travel."}, "initial_speed": {"type": "float", "description": "The initial speed of the object.", "default": 0}}, "required": ["distance", "time"]}}]}, "model_result_raw": "kinematics.calculate_speed_from_rest(distance=120, time=10), kinematics.calculate_acceleration(initial_speed=12, final_speed=24, time=5, distance=120)", "model_result_decoded": [{"kinematics.calculate_speed_from_rest": {"distance": 120, "time": 10}}, {"kinematics.calculate_acceleration": {"initial_speed": 12, "final_speed": 24, "time": 5, "distance": 120}}], "possible_answer": {"kinematics.calculate_speed_from_rest": {"distance": [120.0], "time": [10.0], "initial_speed": [0.0, ""]}, "kinematics.calculate_acceleration": {"initial_speed": [12.0], "final_speed": [24.0], "time": [5.0], "distance": [""]}}}
{"id": 90, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [1, 2, 3] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'location': 'Whole Foods at 789 Broadway'. Expected one of ['789 Broadway']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"grocery_delivery.order": {"location": "Whole Foods at 789 Broadway", "items": ["milk", "bread", "eggs", "apples"], "max_delivery_cost": 10.0}}, "possible_answer_item": {"grocery_delivery.order": {"location": ["789 Broadway"], "items": [["milk", "bread", "eggs", "apples"], ["milk", "bread", "apples", "eggs"], ["milk", "eggs", "bread", "apples"], ["milk", "eggs", "apples", "bread"], ["milk", "apples", "bread", "eggs"], ["milk", "apples", "eggs", "bread"], ["bread", "milk", "eggs", "apples"], ["bread", "milk", "apples", "eggs"], ["bread", "eggs", "milk", "apples"], ["bread", "eggs", "apples", "milk"], ["bread", "apples", "milk", "eggs"], ["bread", "apples", "eggs", "milk"], ["eggs", "milk", "bread", "apples"], ["eggs", "milk", "apples", "bread"], ["eggs", "bread", "milk", "apples"], ["eggs", "bread", "apples", "milk"], ["eggs", "apples", "milk", "bread"], ["eggs", "apples", "bread", "milk"], ["apples", "milk", "bread", "eggs"], ["apples", "milk", "eggs", "bread"], ["apples", "bread", "milk", "eggs"], ["apples", "bread", "eggs", "milk"], ["apples", "eggs", "milk", "bread"], ["apples", "eggs", "bread", "milk"], ["\u725b\u5976", "\u9eb5\u5305", "\u96de\u86cb", "\u860b\u679c"], ["\u725b\u5976", "\u9eb5\u5305", "\u860b\u679c", "\u96de\u86cb"], ["\u725b\u5976", "\u860b\u679c", "\u9eb5\u5305", "\u96de\u86cb"], ["\u725b\u5976", "\u96de\u86cb", "\u9eb5\u5305", "\u860b\u679c"], ["\u725b\u5976", "\u860b\u679c", "\u96de\u86cb", "\u9eb5\u5305"], ["\u725b\u5976", "\u96de\u86cb", "\u860b\u679c", "\u9eb5\u5305"], ["\u9eb5\u5305", "\u725b\u5976", "\u96de\u86cb", "\u860b\u679c"], ["\u9eb5\u5305", "\u725b\u5976", "\u860b\u679c", "\u96de\u86cb"], ["\u9eb5\u5305", "\u860b\u679c", "\u725b\u5976", "\u96de\u86cb"], ["\u9eb5\u5305", "\u96de\u86cb", "\u725b\u5976", "\u860b\u679c"], ["\u9eb5\u5305", "\u860b\u679c", "\u96de\u86cb", "\u725b\u5976"], ["\u9eb5\u5305", "\u96de\u86cb", "\u860b\u679c", "\u725b\u5976"], ["\u96de\u86cb", "\u725b\u5976", "\u9eb5\u5305", "\u860b\u679c"], ["\u96de\u86cb", "\u725b\u5976", "\u860b\u679c", "\u9eb5\u5305"], ["\u96de\u86cb", "\u860b\u679c", "\u725b\u5976", "\u9eb5\u5305"], ["\u96de\u86cb", "\u9eb5\u5305", "\u725b\u5976", "\u860b\u679c"], ["\u96de\u86cb", "\u860b\u679c", "\u9eb5\u5305", "\u725b\u5976"], ["\u96de\u86cb", "\u9eb5\u5305", "\u860b\u679c", "\u725b\u5976"], ["\u860b\u679c", "\u725b\u5976", "\u9eb5\u5305", "\u96de\u86cb"], ["\u860b\u679c", "\u725b\u5976", "\u96de\u86cb", "\u9eb5\u5305"], ["\u860b\u679c", "\u96de\u86cb", "\u725b\u5976", "\u9eb5\u5305"], ["\u860b\u679c", "\u9eb5\u5305", "\u725b\u5976", "\u96de\u86cb"], ["\u860b\u679c", "\u96de\u86cb", "\u9eb5\u5305", "\u725b\u5976"], ["\u860b\u679c", "\u9eb5\u5305", "\u96de\u86cb", "\u725b\u5976"]], "max_delivery_cost": [10.0, ""]}}}}, {"Model Result Index 2": {"sub_error": ["Function name 'grocery_delivery.order' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"ride_hailing.get_rides": {"source": "456 Park Avenue", "destination": "321 Elm Street", "max_cost": 20.0}}, "possible_answer_item": {"grocery_delivery.order": {"location": ["789 Broadway"], "items": [["milk", "bread", "eggs", "apples"], ["milk", "bread", "apples", "eggs"], ["milk", "eggs", "bread", "apples"], ["milk", "eggs", "apples", "bread"], ["milk", "apples", "bread", "eggs"], ["milk", "apples", "eggs", "bread"], ["bread", "milk", "eggs", "apples"], ["bread", "milk", "apples", "eggs"], ["bread", "eggs", "milk", "apples"], ["bread", "eggs", "apples", "milk"], ["bread", "apples", "milk", "eggs"], ["bread", "apples", "eggs", "milk"], ["eggs", "milk", "bread", "apples"], ["eggs", "milk", "apples", "bread"], ["eggs", "bread", "milk", "apples"], ["eggs", "bread", "apples", "milk"], ["eggs", "apples", "milk", "bread"], ["eggs", "apples", "bread", "milk"], ["apples", "milk", "bread", "eggs"], ["apples", "milk", "eggs", "bread"], ["apples", "bread", "milk", "eggs"], ["apples", "bread", "eggs", "milk"], ["apples", "eggs", "milk", "bread"], ["apples", "eggs", "bread", "milk"], ["\u725b\u5976", "\u9eb5\u5305", "\u96de\u86cb", "\u860b\u679c"], ["\u725b\u5976", "\u9eb5\u5305", "\u860b\u679c", "\u96de\u86cb"], ["\u725b\u5976", "\u860b\u679c", "\u9eb5\u5305", "\u96de\u86cb"], ["\u725b\u5976", "\u96de\u86cb", "\u9eb5\u5305", "\u860b\u679c"], ["\u725b\u5976", "\u860b\u679c", "\u96de\u86cb", "\u9eb5\u5305"], ["\u725b\u5976", "\u96de\u86cb", "\u860b\u679c", "\u9eb5\u5305"], ["\u9eb5\u5305", "\u725b\u5976", "\u96de\u86cb", "\u860b\u679c"], ["\u9eb5\u5305", "\u725b\u5976", "\u860b\u679c", "\u96de\u86cb"], ["\u9eb5\u5305", "\u860b\u679c", "\u725b\u5976", "\u96de\u86cb"], ["\u9eb5\u5305", "\u96de\u86cb", "\u725b\u5976", "\u860b\u679c"], ["\u9eb5\u5305", "\u860b\u679c", "\u96de\u86cb", "\u725b\u5976"], ["\u9eb5\u5305", "\u96de\u86cb", "\u860b\u679c", "\u725b\u5976"], ["\u96de\u86cb", "\u725b\u5976", "\u9eb5\u5305", "\u860b\u679c"], ["\u96de\u86cb", "\u725b\u5976", "\u860b\u679c", "\u9eb5\u5305"], ["\u96de\u86cb", "\u860b\u679c", "\u725b\u5976", "\u9eb5\u5305"], ["\u96de\u86cb", "\u9eb5\u5305", "\u725b\u5976", "\u860b\u679c"], ["\u96de\u86cb", "\u860b\u679c", "\u9eb5\u5305", "\u725b\u5976"], ["\u96de\u86cb", "\u9eb5\u5305", "\u860b\u679c", "\u725b\u5976"], ["\u860b\u679c", "\u725b\u5976", "\u9eb5\u5305", "\u96de\u86cb"], ["\u860b\u679c", "\u725b\u5976", "\u96de\u86cb", "\u9eb5\u5305"], ["\u860b\u679c", "\u96de\u86cb", "\u725b\u5976", "\u9eb5\u5305"], ["\u860b\u679c", "\u9eb5\u5305", "\u725b\u5976", "\u96de\u86cb"], ["\u860b\u679c", "\u96de\u86cb", "\u9eb5\u5305", "\u725b\u5976"], ["\u860b\u679c", "\u9eb5\u5305", "\u96de\u86cb", "\u725b\u5976"]], "max_delivery_cost": [10.0, ""]}}}}, {"Model Result Index 3": {"sub_error": ["Function name 'grocery_delivery.order' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"ride_hailing.get_rides": {"source": "321 Elm Street", "destination": "123 Main Street", "max_cost": 25.0}}, "possible_answer_item": {"grocery_delivery.order": {"location": ["789 Broadway"], "items": [["milk", "bread", "eggs", "apples"], ["milk", "bread", "apples", "eggs"], ["milk", "eggs", "bread", "apples"], ["milk", "eggs", "apples", "bread"], ["milk", "apples", "bread", "eggs"], ["milk", "apples", "eggs", "bread"], ["bread", "milk", "eggs", "apples"], ["bread", "milk", "apples", "eggs"], ["bread", "eggs", "milk", "apples"], ["bread", "eggs", "apples", "milk"], ["bread", "apples", "milk", "eggs"], ["bread", "apples", "eggs", "milk"], ["eggs", "milk", "bread", "apples"], ["eggs", "milk", "apples", "bread"], ["eggs", "bread", "milk", "apples"], ["eggs", "bread", "apples", "milk"], ["eggs", "apples", "milk", "bread"], ["eggs", "apples", "bread", "milk"], ["apples", "milk", "bread", "eggs"], ["apples", "milk", "eggs", "bread"], ["apples", "bread", "milk", "eggs"], ["apples", "bread", "eggs", "milk"], ["apples", "eggs", "milk", "bread"], ["apples", "eggs", "bread", "milk"], ["\u725b\u5976", "\u9eb5\u5305", "\u96de\u86cb", "\u860b\u679c"], ["\u725b\u5976", "\u9eb5\u5305", "\u860b\u679c", "\u96de\u86cb"], ["\u725b\u5976", "\u860b\u679c", "\u9eb5\u5305", "\u96de\u86cb"], ["\u725b\u5976", "\u96de\u86cb", "\u9eb5\u5305", "\u860b\u679c"], ["\u725b\u5976", "\u860b\u679c", "\u96de\u86cb", "\u9eb5\u5305"], ["\u725b\u5976", "\u96de\u86cb", "\u860b\u679c", "\u9eb5\u5305"], ["\u9eb5\u5305", "\u725b\u5976", "\u96de\u86cb", "\u860b\u679c"], ["\u9eb5\u5305", "\u725b\u5976", "\u860b\u679c", "\u96de\u86cb"], ["\u9eb5\u5305", "\u860b\u679c", "\u725b\u5976", "\u96de\u86cb"], ["\u9eb5\u5305", "\u96de\u86cb", "\u725b\u5976", "\u860b\u679c"], ["\u9eb5\u5305", "\u860b\u679c", "\u96de\u86cb", "\u725b\u5976"], ["\u9eb5\u5305", "\u96de\u86cb", "\u860b\u679c", "\u725b\u5976"], ["\u96de\u86cb", "\u725b\u5976", "\u9eb5\u5305", "\u860b\u679c"], ["\u96de\u86cb", "\u725b\u5976", "\u860b\u679c", "\u9eb5\u5305"], ["\u96de\u86cb", "\u860b\u679c", "\u725b\u5976", "\u9eb5\u5305"], ["\u96de\u86cb", "\u9eb5\u5305", "\u725b\u5976", "\u860b\u679c"], ["\u96de\u86cb", "\u860b\u679c", "\u9eb5\u5305", "\u725b\u5976"], ["\u96de\u86cb", "\u9eb5\u5305", "\u860b\u679c", "\u725b\u5976"], ["\u860b\u679c", "\u725b\u5976", "\u9eb5\u5305", "\u96de\u86cb"], ["\u860b\u679c", "\u725b\u5976", "\u96de\u86cb", "\u9eb5\u5305"], ["\u860b\u679c", "\u96de\u86cb", "\u725b\u5976", "\u9eb5\u5305"], ["\u860b\u679c", "\u9eb5\u5305", "\u725b\u5976", "\u96de\u86cb"], ["\u860b\u679c", "\u96de\u86cb", "\u9eb5\u5305", "\u725b\u5976"], ["\u860b\u679c", "\u9eb5\u5305", "\u96de\u86cb", "\u725b\u5976"]], "max_delivery_cost": [10.0, ""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_89", "question": "\"Could you help me plan my day? I need to go from my home at 123 Main Street to my office at 456 Park Avenue, and I don't want to spend more than $30 on the ride. After work, I need to order groceries from the Whole Foods at 789 Broadway. The items I need are milk, bread, eggs, and apples. I don't want to spend more than $10 on delivery. Then, I need to get a ride from my office to my friend's house at 321 Elm Street, and I don't want to spend more than $20 on that ride. Finally, I need to get a ride from my friend's house back to my home, and I don't want to spend more than $25 on that ride. Can you help me with all of this?\"", "function": [{"name": "grocery_delivery.order", "description": "Order grocery items from a specific location with optional delivery price limit", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the grocery store"}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order"}, "max_delivery_cost": {"type": "float", "description": "The maximum delivery cost. It is optional", "default": 10.0}}, "required": ["location", "items"]}}, {"name": "ride_hailing.get_rides", "description": "Find ride from source to destination with an optional cost limit", "parameters": {"type": "dict", "properties": {"source": {"type": "string", "description": "The starting point of the journey"}, "destination": {"type": "string", "description": "The endpoint of the journey"}, "max_cost": {"type": "float", "description": "The maximum cost of the ride. It is optional", "default": 30.0}}, "required": ["source", "destination"]}}]}, "model_result_raw": "ride_hailing.get_rides(source='123 Main Street', destination='456 Park Avenue', max_cost=30.0), grocery_delivery.order(location='Whole Foods at 789 Broadway', items=['milk', 'bread', 'eggs', 'apples'], max_delivery_cost=10.0), ride_hailing.get_rides(source='456 Park Avenue', destination='321 Elm Street', max_cost=20.0), ride_hailing.get_rides(source='321 Elm Street', destination='123 Main Street', max_cost=25.0)", "model_result_decoded": [{"ride_hailing.get_rides": {"source": "123 Main Street", "destination": "456 Park Avenue", "max_cost": 30.0}}, {"grocery_delivery.order": {"location": "Whole Foods at 789 Broadway", "items": ["milk", "bread", "eggs", "apples"], "max_delivery_cost": 10.0}}, {"ride_hailing.get_rides": {"source": "456 Park Avenue", "destination": "321 Elm Street", "max_cost": 20.0}}, {"ride_hailing.get_rides": {"source": "321 Elm Street", "destination": "123 Main Street", "max_cost": 25.0}}], "possible_answer": {"ride_hailing.get_rides_1": {"source": ["123 Main Street"], "destination": ["456 Park Avenue"], "max_cost": [30.0, ""]}, "grocery_delivery.order": {"location": ["789 Broadway"], "items": [["milk", "bread", "eggs", "apples"], ["milk", "bread", "apples", "eggs"], ["milk", "eggs", "bread", "apples"], ["milk", "eggs", "apples", "bread"], ["milk", "apples", "bread", "eggs"], ["milk", "apples", "eggs", "bread"], ["bread", "milk", "eggs", "apples"], ["bread", "milk", "apples", "eggs"], ["bread", "eggs", "milk", "apples"], ["bread", "eggs", "apples", "milk"], ["bread", "apples", "milk", "eggs"], ["bread", "apples", "eggs", "milk"], ["eggs", "milk", "bread", "apples"], ["eggs", "milk", "apples", "bread"], ["eggs", "bread", "milk", "apples"], ["eggs", "bread", "apples", "milk"], ["eggs", "apples", "milk", "bread"], ["eggs", "apples", "bread", "milk"], ["apples", "milk", "bread", "eggs"], ["apples", "milk", "eggs", "bread"], ["apples", "bread", "milk", "eggs"], ["apples", "bread", "eggs", "milk"], ["apples", "eggs", "milk", "bread"], ["apples", "eggs", "bread", "milk"], ["\u725b\u5976", "\u9eb5\u5305", "\u96de\u86cb", "\u860b\u679c"], ["\u725b\u5976", "\u9eb5\u5305", "\u860b\u679c", "\u96de\u86cb"], ["\u725b\u5976", "\u860b\u679c", "\u9eb5\u5305", "\u96de\u86cb"], ["\u725b\u5976", "\u96de\u86cb", "\u9eb5\u5305", "\u860b\u679c"], ["\u725b\u5976", "\u860b\u679c", "\u96de\u86cb", "\u9eb5\u5305"], ["\u725b\u5976", "\u96de\u86cb", "\u860b\u679c", "\u9eb5\u5305"], ["\u9eb5\u5305", "\u725b\u5976", "\u96de\u86cb", "\u860b\u679c"], ["\u9eb5\u5305", "\u725b\u5976", "\u860b\u679c", "\u96de\u86cb"], ["\u9eb5\u5305", "\u860b\u679c", "\u725b\u5976", "\u96de\u86cb"], ["\u9eb5\u5305", "\u96de\u86cb", "\u725b\u5976", "\u860b\u679c"], ["\u9eb5\u5305", "\u860b\u679c", "\u96de\u86cb", "\u725b\u5976"], ["\u9eb5\u5305", "\u96de\u86cb", "\u860b\u679c", "\u725b\u5976"], ["\u96de\u86cb", "\u725b\u5976", "\u9eb5\u5305", "\u860b\u679c"], ["\u96de\u86cb", "\u725b\u5976", "\u860b\u679c", "\u9eb5\u5305"], ["\u96de\u86cb", "\u860b\u679c", "\u725b\u5976", "\u9eb5\u5305"], ["\u96de\u86cb", "\u9eb5\u5305", "\u725b\u5976", "\u860b\u679c"], ["\u96de\u86cb", "\u860b\u679c", "\u9eb5\u5305", "\u725b\u5976"], ["\u96de\u86cb", "\u9eb5\u5305", "\u860b\u679c", "\u725b\u5976"], ["\u860b\u679c", "\u725b\u5976", "\u9eb5\u5305", "\u96de\u86cb"], ["\u860b\u679c", "\u725b\u5976", "\u96de\u86cb", "\u9eb5\u5305"], ["\u860b\u679c", "\u96de\u86cb", "\u725b\u5976", "\u9eb5\u5305"], ["\u860b\u679c", "\u9eb5\u5305", "\u725b\u5976", "\u96de\u86cb"], ["\u860b\u679c", "\u96de\u86cb", "\u9eb5\u5305", "\u725b\u5976"], ["\u860b\u679c", "\u9eb5\u5305", "\u96de\u86cb", "\u725b\u5976"]], "max_delivery_cost": [10.0, ""]}, "ride_hailing.get_rides_2": {"source": ["456 Park Avenue"], "destination": ["321 Elm Street"], "max_cost": [20.0]}, "ride_hailing.get_rides_3": {"source": ["321 Elm Street"], "destination": ["123 Main Street"], "max_cost": [25.0]}}}
{"id": 92, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [1, 2] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Incorrect type for parameter 'energy'. Expected type float, got dict. Parameter value: {'biological.calc_energy': {'mols': 5, 'substance': 'C6H12O6', 'joules_per_mol': 2800.0}}."], "sub_error_type": "type_error:simple", "model_output_item": {"biological.calc_biomass": {"energy": {"biological.calc_energy": {"mols": 5, "substance": "C6H12O6", "joules_per_mol": 2800.0}}, "efficiency": 0.1}}, "possible_answer_item": {"biological.calc_biomass": {"energy": [14000.0], "efficiency": [0.1, ""]}}}}, {"Model Result Index 2": {"sub_error": ["Function name 'biological.calc_biomass' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"physical.calc_work": {"energy": {"biological.calc_energy": {"mols": 5, "substance": "C6H12O6", "joules_per_mol": 2800.0}}, "distance": 2}}, "possible_answer_item": {"biological.calc_biomass": {"energy": [14000.0], "efficiency": [0.1, ""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_91", "question": "\"Imagine you are a scientist studying the energy production of a certain type of bacteria. You have a sample of this bacteria that has consumed 5 moles of glucose (C6H12O6) and you know that the energy produced from glucose is typically 2800 kJ/mol. You also know that the bacteria's conversion efficiency, or the percentage of energy from glucose that is converted into biomass, is 10%. \n\nFirst, calculate the total energy produced by the bacteria from consuming the glucose. \n\nSecond, calculate the amount of biomass produced by the bacteria given the energy produced and the conversion efficiency. \n\nNow, imagine you are using this bacteria in a bioreactor to power a small machine. The machine needs to move a distance of 2 meters and you want to calculate the work done by the machine. \n\nThird, calculate the work done by the machine given the total energy produced by the bacteria and the distance the machine needs to move.\"", "function": [{"name": "biological.calc_biomass", "description": "Calculate the biomass from the energy given the energy conversion efficiency.", "parameters": {"type": "dict", "properties": {"energy": {"type": "float", "description": "The total energy produced."}, "efficiency": {"type": "float", "description": "The conversion efficiency, default value is 10%.", "default": 0.1}}, "required": ["energy"]}}, {"name": "biological.calc_energy", "description": "Calculate energy from amount of substance based on its molecular composition.", "parameters": {"type": "dict", "properties": {"mols": {"type": "float", "description": "Amount of substance in moles."}, "substance": {"type": "string", "description": "The chemical formula of the substance."}, "joules_per_mol": {"type": "float", "description": "The energy produced or required for the reaction, default value for glucose is 2800 kJ/mol", "default": 2800.0}}, "required": ["mols", "substance"]}}, {"name": "physical.calc_work", "description": "Calculate the work from energy.", "parameters": {"type": "dict", "properties": {"energy": {"type": "float", "description": "The total energy produced."}, "distance": {"type": "float", "description": "The distance over which the work is done."}}, "required": ["energy", "distance"]}}]}, "model_result_raw": "biological.calc_energy(mols=5, substance='C6H12O6', joules_per_mol=2800.0), biological.calc_biomass(energy=biological.calc_energy(mols=5, substance='C6H12O6', joules_per_mol=2800.0), efficiency=0.1), physical.calc_work(energy=biological.calc_energy(mols=5, substance='C6H12O6', joules_per_mol=2800.0), distance=2)", "model_result_decoded": [{"biological.calc_energy": {"mols": 5, "substance": "C6H12O6", "joules_per_mol": 2800.0}}, {"biological.calc_biomass": {"energy": {"biological.calc_energy": {"mols": 5, "substance": "C6H12O6", "joules_per_mol": 2800.0}}, "efficiency": 0.1}}, {"physical.calc_work": {"energy": {"biological.calc_energy": {"mols": 5, "substance": "C6H12O6", "joules_per_mol": 2800.0}}, "distance": 2}}], "possible_answer": {"biological.calc_energy": {"mols": [5.0], "substance": ["C6H12O6", "glucose", "\u8461\u8404\u7cd6"], "joules_per_mol": [2800.0, ""]}, "biological.calc_biomass": {"energy": [14000.0], "efficiency": [0.1, ""]}, "physical.calc_work": {"energy": [1400.0], "distance": [2.0]}}}
{"id": 95, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [1, 2, 3] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'condition': 'startswith(\"b\")'. Expected one of ['b', 'B', 'startswith(b)']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"filter_list": {"elements": ["apple", "banana", "cherry", "date", "elderberry"], "condition": "startswith(\"b\")"}}, "possible_answer_item": {"filter_list": {"elements": [["apple", "banana", "cherry", "date", "elderberry"]], "condition": ["b", "B", "startswith(b)"]}}}}, {"Model Result Index 2": {"sub_error": ["Function name 'filter_list' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"sum_elements": {"elements": [5, 10, 15, 20, 25]}}, "possible_answer_item": {"filter_list": {"elements": [["apple", "banana", "cherry", "date", "elderberry"]], "condition": ["b", "B", "startswith(b)"]}}}}, {"Model Result Index 3": {"sub_error": ["Function name 'filter_list' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"sort_list": {"elements": [35, 10, 25, 5, 15], "order": "asc"}}, "possible_answer_item": {"filter_list": {"elements": [["apple", "banana", "cherry", "date", "elderberry"]], "condition": ["b", "B", "startswith(b)"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_94", "question": "\"Given the list of words ['apple', 'banana', 'cherry', 'date', 'elderberry'], can you first use the 'sort_list' function to sort this list in descending order? Then, using the 'filter_list' function, can you filter out the fruits that start with the letter 'b'? After that, consider the list of numbers [5, 10, 15, 20, 25]. Can you use the 'sum_elements' function to find the total sum of these numbers? Finally, use the 'sort_list' function again to sort the numbers [35, 10, 25, 5, 15] in ascending order?\"", "function": [{"name": "sort_list", "description": "Sort the elements of a list in ascending or descending order", "parameters": {"type": "dict", "properties": {"elements": {"type": "array", "items": {"type": "integer"}, "description": "The list of elements to sort."}, "order": {"type": "string", "description": "The order in which to sort the elements. This can be 'asc' for ascending order, or 'desc' for descending order.", "default": "asc"}}, "required": ["elements"]}}, {"name": "sum_elements", "description": "Add all elements of a numeric list", "parameters": {"type": "dict", "properties": {"elements": {"type": "array", "items": {"type": "integer"}, "description": "The list of numeric elements to add."}}, "required": ["elements"]}}, {"name": "filter_list", "description": "Filters elements of a list based on a given condition", "parameters": {"type": "dict", "properties": {"elements": {"type": "array", "items": {"type": "string"}, "description": "The list of elements to filter."}, "condition": {"type": "string", "description": "The condition to filter the elements on."}}, "required": ["elements", "condition"]}}]}, "model_result_raw": "sort_list(elements=['apple', 'banana', 'cherry', 'date', 'elderberry'], order='desc'), filter_list(elements=['apple', 'banana', 'cherry', 'date', 'elderberry'], condition='startswith(\"b\")'), sum_elements(elements=[5, 10, 15, 20, 25]), sort_list(elements=[35, 10, 25, 5, 15], order='asc')", "model_result_decoded": [{"sort_list": {"elements": ["apple", "banana", "cherry", "date", "elderberry"], "order": "desc"}}, {"filter_list": {"elements": ["apple", "banana", "cherry", "date", "elderberry"], "condition": "startswith(\"b\")"}}, {"sum_elements": {"elements": [5, 10, 15, 20, 25]}}, {"sort_list": {"elements": [35, 10, 25, 5, 15], "order": "asc"}}], "possible_answer": {"sort_list_1": {"elements": [["apple", "banana", "cherry", "date", "elderberry"], ["elderberry", "cherry", "banana", "apple", "date"]], "order": ["desc", "descending", "\u964d\u5e8f"]}, "filter_list": {"elements": [["apple", "banana", "cherry", "date", "elderberry"]], "condition": ["b", "B", "startswith(b)"]}, "sum_elements": {"elements": [[5, 10, 15, 20, 25]]}, "sort_list_2": {"elements": [[35, 10, 25, 5, 15]], "order": ["asc", "", "\u5347\u5e8f"]}}}
{"id": 98, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'annual_rate': 4.0. Expected one of [0.04]."], "sub_error_type": "value_error:others", "model_output_item": {"calc_Simple_Interest": {"principle_amount": 5000, "duration": 5, "annual_rate": 4}}, "possible_answer_item": {"calc_Simple_Interest": {"principle_amount": [5000.0], "duration": [5.0], "annual_rate": [0.04]}}}}, {"Model Result Index 1": {"sub_error": ["Function name 'calc_Simple_Interest' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"calc_Compound_Interest": {"principle_amount": 5000, "duration": 5, "annual_rate": 3.5}}, "possible_answer_item": {"calc_Simple_Interest": {"principle_amount": [5000.0], "duration": [5.0], "annual_rate": [0.04]}}}}, {"Model Result Index 2": {"sub_error": ["Function name 'calc_Simple_Interest' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"future_value": {"initial_investment": 3000, "interest_rate": 0.05, "time": 6, "num_compoundings": 2}}, "possible_answer_item": {"calc_Simple_Interest": {"principle_amount": [5000.0], "duration": [5.0], "annual_rate": [0.04]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_97", "question": "\"John has decided to invest his savings. He has $5000 that he wants to invest for a period of 5 years. He is considering two options. The first option is a simple interest scheme that offers an annual interest rate of 4%. The second option is a compound interest scheme that offers an annual interest rate of 3.5% and compounds interest annually. He also came across a third option where he can invest an initial amount of $3000 at an annual interest rate of 5% for 6 years with interest compounded twice a year. Can you help him calculate the returns for each of these options using the calc_Simple_Interest, calc_Compound_Interest, and future_value functions respectively?\"", "function": [{"name": "calc_Simple_Interest", "description": "Compute simple interest.", "parameters": {"type": "dict", "properties": {"principle_amount": {"type": "float", "description": "The principle amount that is invested."}, "duration": {"type": "float", "description": "Duration of time period in years."}, "annual_rate": {"type": "float", "description": "Interest rate in percentage."}}, "required": ["principle_amount", "duration", "annual_rate"]}}, {"name": "future_value", "description": "Calculates the future value of an investment given an interest rate and time period.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "float", "description": "The initial investment amount."}, "interest_rate": {"type": "float", "description": "The annual interest rate (as a decimal)."}, "time": {"type": "integer", "description": "The number of time periods the money is invested for."}, "num_compoundings": {"type": "integer", "default": 1, "description": "The number of times that interest is compounded per time period."}}, "required": ["initial_investment", "interest_rate", "time"]}}, {"name": "calc_Compound_Interest", "description": "Compute compound interest.", "parameters": {"type": "dict", "properties": {"principle_amount": {"type": "float", "description": "The principle amount that is invested."}, "duration": {"type": "float", "description": "Duration of time period in years."}, "annual_rate": {"type": "float", "description": "Interest rate in percentage."}, "compound_freq": {"type": "integer", "default": 1, "description": "The number of times that interest is compounded per unit time."}}, "required": ["principle_amount", "duration", "annual_rate"]}}]}, "model_result_raw": "calc_Simple_Interest(principle_amount=5000, duration=5, annual_rate=4), calc_Compound_Interest(principle_amount=5000, duration=5, annual_rate=3.5), future_value(initial_investment=3000, interest_rate=0.05, time=6, num_compoundings=2)", "model_result_decoded": [{"calc_Simple_Interest": {"principle_amount": 5000, "duration": 5, "annual_rate": 4}}, {"calc_Compound_Interest": {"principle_amount": 5000, "duration": 5, "annual_rate": 3.5}}, {"future_value": {"initial_investment": 3000, "interest_rate": 0.05, "time": 6, "num_compoundings": 2}}], "possible_answer": {"calc_Simple_Interest": {"principle_amount": [5000.0], "duration": [5.0], "annual_rate": [0.04]}, "calc_Compound_Interest": {"principle_amount": [5000.0], "duration": [5.0], "annual_rate": [0.035], "compound_freq": [1, ""]}, "future_value": {"initial_investment": [3000.0], "interest_rate": [0.05], "time": [6], "num_compoundings": [2]}}}
{"id": 107, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2, 3] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Optional parameter 'time_period' not provided and not marked as optional."], "sub_error_type": "simple_function_checker:missing_optional", "model_output_item": {"traffic_estimate": {"start_location": "San Francisco", "end_location": "Palo Alto"}}, "possible_answer_item": {"traffic_estimate_1": {"start_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "end_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "time_period": ["weekday", "\u5de5\u4f5c\u65e5"]}}}}, {"Model Result Index 1": {"sub_error": ["Function name 'traffic_estimate' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"calculate_distance": {"start_point": "San Francisco", "end_point": "Palo Alto"}}, "possible_answer_item": {"traffic_estimate_1": {"start_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "end_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "time_period": ["weekday", "\u5de5\u4f5c\u65e5"]}}}}, {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'start_location': 'Palo Alto'. Expected one of ['San Francisco', 'SF', '\u820a\u91d1\u5c71']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"traffic_estimate": {"start_location": "Palo Alto", "end_location": "Los Angeles", "time_period": "weekend"}}, "possible_answer_item": {"traffic_estimate_1": {"start_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "end_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "time_period": ["weekday", "\u5de5\u4f5c\u65e5"]}}}}, {"Model Result Index 3": {"sub_error": ["Function name 'traffic_estimate' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"weather_forecast": {"location": "Los Angeles", "days": 5}}, "possible_answer_item": {"traffic_estimate_1": {"start_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "end_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "time_period": ["weekday", "\u5de5\u4f5c\u65e5"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_106", "question": "\"Can you help me plan my upcoming trip? I need to know the estimated traffic from my home in San Francisco to my office in Palo Alto on a typical weekday. Also, I'm curious about the distance between these two locations. Furthermore, I'm planning a weekend getaway to Los Angeles, so I'd like to know the traffic estimate from Palo Alto to Los Angeles for the coming weekend. Lastly, could you provide me with a 5-day weather forecast for Los Angeles?\"", "function": [{"name": "calculate_distance", "description": "Calculate distance between two locations.", "parameters": {"type": "dict", "properties": {"start_point": {"type": "string", "description": "Starting point of the journey."}, "end_point": {"type": "string", "description": "Ending point of the journey."}}, "required": ["start_point", "end_point"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "traffic_estimate", "description": "Estimate traffic from one location to another for a specific time period.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "Starting location for the journey."}, "end_location": {"type": "string", "description": "Ending location for the journey."}, "time_period": {"type": "string", "description": "Specify a time frame to estimate the traffic, 'now' for current, 'weekend' for the coming weekend. Default is 'now'."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "traffic_estimate(start_location='San Francisco', end_location='Palo Alto'), calculate_distance(start_point='San Francisco', end_point='Palo Alto'), traffic_estimate(start_location='Palo Alto', end_location='Los Angeles', time_period='weekend'), weather_forecast(location='Los Angeles', days=5)", "model_result_decoded": [{"traffic_estimate": {"start_location": "San Francisco", "end_location": "Palo Alto"}}, {"calculate_distance": {"start_point": "San Francisco", "end_point": "Palo Alto"}}, {"traffic_estimate": {"start_location": "Palo Alto", "end_location": "Los Angeles", "time_period": "weekend"}}, {"weather_forecast": {"location": "Los Angeles", "days": 5}}], "possible_answer": {"traffic_estimate_1": {"start_location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "end_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "time_period": ["weekday", "\u5de5\u4f5c\u65e5"]}, "calculate_distance_1": {"start_point": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "end_point": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"]}, "traffic_estimate_2": {"start_location": ["Palo Alto", "\u5e15\u7f85\u5967\u5716"], "end_location": ["Los Angeles", "LA", "\u6d1b\u6749\u78ef"], "time_period": ["weekend", "\u5de5\u4f5c\u65e5"]}, "weather_forecast_1": {"location": ["Los Angeles", "LA", "\u6d1b\u6749\u78ef"], "days": [5]}}}
{"id": 149, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [3] of model output for index 3 of possible answers.", {"Model Result Index 3": {"sub_error": ["Incorrect type for parameter 'height'. Expected type integer, got float. Parameter value: 182.88."], "sub_error_type": "type_error:simple", "model_output_item": {"calculate_bmi": {"weight": 200, "height": 182.88, "unit": "imperial"}}, "possible_answer_item": {"calculate_bmi_2": {"weight": [200], "height": [74], "unit": ["imperial", "\u82f1\u5236"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_148", "question": "\"Can you tell me the net worth of the famous footballer Lionel Messi in Euros? After that, I would like to know the net worth of the basketball player LeBron James in British Pounds. Also, I'm curious about the Body Mass Index (BMI) of a person who weighs 85 kilograms and is 180 centimeters tall using the metric system. Lastly, could you calculate the BMI of another person who weighs 200 pounds and is 6 feet 2 inches tall using the imperial system?\"", "function": [{"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) of a person.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "Weight of the person in kilograms."}, "height": {"type": "integer", "description": "Height of the person in centimeters."}, "unit": {"type": "string", "description": "Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'."}}, "required": ["weight", "height"]}}, {"name": "celebrity_net_worth.get", "description": "Get the total net worth of a sports celebrity based on most recent data.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the sports celebrity."}, "currency": {"type": "string", "description": "The currency in which the net worth will be returned. Default is 'USD'."}}, "required": ["name", "currency"]}}]}, "model_result_raw": "celebrity_net_worth.get(name='Lionel Messi', currency='EUR'), celebrity_net_worth.get(name='LeBron James', currency='GBP'), calculate_bmi(weight=85, height=180), calculate_bmi(weight=200, height=182.88, unit='imperial')", "model_result_decoded": [{"celebrity_net_worth.get": {"name": "Lionel Messi", "currency": "EUR"}}, {"celebrity_net_worth.get": {"name": "LeBron James", "currency": "GBP"}}, {"calculate_bmi": {"weight": 85, "height": 180}}, {"calculate_bmi": {"weight": 200, "height": 182.88, "unit": "imperial"}}], "possible_answer": {"celebrity_net_worth.get_1": {"name": ["Lionel Messi", "\u6885\u897f", "\u840a\u7d0d\u723e\u00b7\u6885\u897f", "\u840a\u7d0d\u723e\u6885\u897f"], "currency": ["EUR", "Euros", "\u6b50\u5143"]}, "celebrity_net_worth.get_2": {"name": ["LeBron James", "\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af", "\u52d2\u5e03\u6717\u8a79\u59c6\u65af"], "currency": ["GBP", "British Pounds", "\u82f1\u938a"]}, "calculate_bmi_1": {"weight": [85], "height": [180], "unit": ["metric", "", "\u516c\u5236"]}, "calculate_bmi_2": {"weight": [200], "height": [74], "unit": ["imperial", "\u82f1\u5236"]}}}
{"id": 152, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [2, 3] of model output for index 2 of possible answers.", {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'items': ['bottles of water', 'apples', 'loaf of bread']. Expected one of [['water', 'apples', 'bread'], ['\u6c34', '\u860b\u679c', '\u9eb5\u5305']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"safeway.order": {"location": "Palo Alto, CA", "items": ["bottles of water", "apples", "loaf of bread"], "quantity": [2, 3, 1]}}, "possible_answer_item": {"safeway.order": {"location": ["Palo Alto, CA", "Palo Alto", "CA", "\u52a0\u5dde\u5e15\u7f85\u5967\u5716", "\u52a0\u5dde", "\u5e15\u7f85\u5967\u5716"], "items": [["water", "apples", "bread"], ["\u6c34", "\u860b\u679c", "\u9eb5\u5305"]], "quantity": [[2, 3, 1]]}}}}, {"Model Result Index 3": {"sub_error": ["Function name 'safeway.order' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"light_travel_time": {"distance_in_light_years": 4.24, "speed_of_light": 299792458}}, "possible_answer_item": {"safeway.order": {"location": ["Palo Alto, CA", "Palo Alto", "CA", "\u52a0\u5dde\u5e15\u7f85\u5967\u5716", "\u52a0\u5dde", "\u5e15\u7f85\u5967\u5716"], "items": [["water", "apples", "bread"], ["\u6c34", "\u860b\u679c", "\u9eb5\u5305"]], "quantity": [[2, 3, 1]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_151", "question": "\"Imagine you are planning a vacation to Paris, France. You want to stay at the 'Hotel Le Bristol Paris' in a suite room for 10 days starting from 12-01-2022. You also have a preference for a city view from your room. How would you book this hotel? After booking, you want to know how much 1000 US dollars would be in Euros. Can you find out the latest exchange rate? On your way to the hotel, you want to stop by a Safeway store in Palo Alto, CA to pick up some items. You need to order 2 bottles of water, 3 apples, and 1 loaf of bread. How would you place this order? Lastly, you are curious about the universe and want to know how long it would take for light to travel from Earth to Proxima Centauri, which is approximately 4.24 light years away, considering the speed of light in vacuum is 299792458 m/s. Can you calculate this?\"", "function": [{"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}, {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}, {"name": "latest_exchange_rate", "description": "Retrieve the latest exchange rate between two specified currencies.", "parameters": {"type": "dict", "properties": {"source_currency": {"type": "string", "description": "The currency you are converting from."}, "target_currency": {"type": "string", "description": "The currency you are converting to."}, "amount": {"type": "integer", "description": "The amount to be converted. If omitted, default to xchange rate of 1 unit source currency."}}, "required": ["source_currency", "target_currency"]}}, {"name": "light_travel_time", "description": "Calculate the time taken for light to travel from a celestial body to another.", "parameters": {"type": "dict", "properties": {"distance_in_light_years": {"type": "float", "description": "The distance between the two celestial bodies in light years."}, "speed_of_light": {"type": "integer", "description": "The speed of light in vacuum, in m/s. Default value is 299792458 m/s."}}, "required": ["distance_in_light_years"]}}]}, "model_result_raw": "book_hotel(hotel_name='Hotel Le Bristol Paris', location='Paris, France', room_type='suite', start_date='12-01-2022', stay_duration=10, view='city'), latest_exchange_rate(source_currency='USD', target_currency='EUR', amount=1000), safeway.order(location='Palo Alto, CA', items=['bottles of water', 'apples', 'loaf of bread'], quantity=[2, 3, 1]), light_travel_time(distance_in_light_years=4.24, speed_of_light=299792458)", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hotel Le Bristol Paris", "location": "Paris, France", "room_type": "suite", "start_date": "12-01-2022", "stay_duration": 10, "view": "city"}}, {"latest_exchange_rate": {"source_currency": "USD", "target_currency": "EUR", "amount": 1000}}, {"safeway.order": {"location": "Palo Alto, CA", "items": ["bottles of water", "apples", "loaf of bread"], "quantity": [2, 3, 1]}}, {"light_travel_time": {"distance_in_light_years": 4.24, "speed_of_light": 299792458}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hotel Le Bristol Paris", "\u5df4\u9ece\u5e03\u91cc\u65af\u591a\u9152\u5e97"], "location": ["Paris, France", "Paris", "\u5df4\u9ece", "\u6cd5\u570b\u5df4\u9ece"], "room_type": ["suite", "Suite", "\u5957\u623f"], "start_date": ["12-01-2022", "2022-12-01", "Dec 1, 2022", "2022\u5e7412\u67081\u65e5"], "stay_duration": [10], "view": ["city view", "city", "\u57ce\u5e02\u666f\u89c0", "\u57ce\u5e02"]}, "latest_exchange_rate": {"source_currency": ["USD", "US Dollars", "US Dollar", "\u7f8e\u5143"], "target_currency": ["EUR", "Euro", "\u6b50\u5143"], "amount": [1000]}, "safeway.order": {"location": ["Palo Alto, CA", "Palo Alto", "CA", "\u52a0\u5dde\u5e15\u7f85\u5967\u5716", "\u52a0\u5dde", "\u5e15\u7f85\u5967\u5716"], "items": [["water", "apples", "bread"], ["\u6c34", "\u860b\u679c", "\u9eb5\u5305"]], "quantity": [[2, 3, 1]]}, "light_travel_time": {"distance_in_light_years": [4.24], "speed_of_light": [299792458, ""]}}}
{"id": 161, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [0, 1] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'annual_rate': 5.0. Expected one of [0.05]."], "sub_error_type": "value_error:others", "model_output_item": {"compound_interest": {"principal": 5000, "annual_rate": 5, "compounding_freq": "quarterly", "time_in_years": 7}}, "possible_answer_item": {"compound_interest": {"principal": [5000], "annual_rate": [0.05], "compounding_freq": ["quarterly", "\u5b63\u5ea6", "\u5b63"], "time_in_years": [7]}}}}, {"Model Result Index 1": {"sub_error": ["Function name 'compound_interest' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"lawsuits_search": {"company_name": "Tech Corp", "location": "San Francisco", "year": 2018}}, "possible_answer_item": {"compound_interest": {"principal": [5000], "annual_rate": [0.05], "compounding_freq": ["quarterly", "\u5b63\u5ea6", "\u5b63"], "time_in_years": [7]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_160", "question": "\"Can you help me with two tasks? First, I want to calculate the compound interest on an investment I made. I invested $5000 with an annual interest rate of 5%. The interest is compounded quarterly and I plan to keep the money invested for 7 years. Secondly, I heard some rumors about a company named 'Tech Corp' and I want to check if there were any lawsuits filed against them in 'San Francisco' in the year 2018. Can you find this information for me?\"", "function": [{"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, default to search for all types."}}, "required": ["company_name", "location", "year"]}}, {"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "float", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "integer", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}]}, "model_result_raw": "compound_interest(principal=5000, annual_rate=5, compounding_freq='quarterly', time_in_years=7), lawsuits_search(company_name='Tech Corp', location='San Francisco', year=2018)", "model_result_decoded": [{"compound_interest": {"principal": 5000, "annual_rate": 5, "compounding_freq": "quarterly", "time_in_years": 7}}, {"lawsuits_search": {"company_name": "Tech Corp", "location": "San Francisco", "year": 2018}}], "possible_answer": {"compound_interest": {"principal": [5000], "annual_rate": [0.05], "compounding_freq": ["quarterly", "\u5b63\u5ea6", "\u5b63"], "time_in_years": [7]}, "lawsuits_search": {"company_name": ["Tech Corp"], "location": ["San Francisco", "SF", "\u820a\u91d1\u5c71"], "year": [2018], "case_type": [""]}}}
{"id": 170, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Could not find a matching function among index [3] of model output for index 3 of possible answers.", {"Model Result Index 3": {"sub_error": ["Invalid value for parameter 'min_humidity': 0. Expected one of ['']."], "sub_error_type": "value_error:others", "model_output_item": {"weather.humidity_forecast": {"location": "London", "days": 7, "min_humidity": 0}}, "possible_answer_item": {"weather.humidity_forecast_2": {"location": ["London", "\u502b\u6566"], "days": [7], "min_humidity": [""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_multiple_function_169", "question": "\"Could you please tell me the latest game score, individual player stats, and team stats for the basketball team 'Los Angeles Lakers' in the 'NBA' league? Also, I would like to know the same information but this time for the football team 'Manchester United' in the 'Premier League'. Additionally, could you provide me with a 5-day humidity forecast for New York, ensuring that the minimum humidity level is 60%? Lastly, I would also like to know the humidity forecast for the next 7 days in London, but without any minimum humidity level filter.\"", "function": [{"name": "weather.humidity_forecast", "description": "Retrieve a humidity forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the humidity for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "min_humidity": {"type": "integer", "description": "Minimum level of humidity (in percentage) to filter the result. Default is 0."}}, "required": ["location", "days"]}}, {"name": "get_team_score", "description": "Retrieves the latest game score, individual player stats, and team stats for a specified sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The league that the team is part of."}, "include_player_stats": {"type": "boolean", "default": false, "description": "Indicates if individual player statistics should be included in the result. Default is false."}}, "required": ["team_name", "league"]}}]}, "model_result_raw": "get_team_score(team_name='Los Angeles Lakers', league='NBA', include_player_stats=True), get_team_score(team_name='Manchester United', league='Premier League', include_player_stats=True), weather.humidity_forecast(location='New York', days=5, min_humidity=60), weather.humidity_forecast(location='London', days=7, min_humidity=0)", "model_result_decoded": [{"get_team_score": {"team_name": "Los Angeles Lakers", "league": "NBA", "include_player_stats": true}}, {"get_team_score": {"team_name": "Manchester United", "league": "Premier League", "include_player_stats": true}}, {"weather.humidity_forecast": {"location": "New York", "days": 5, "min_humidity": 60}}, {"weather.humidity_forecast": {"location": "London", "days": 7, "min_humidity": 0}}], "possible_answer": {"get_team_score_1": {"team_name": ["Los Angeles Lakers", "L.A. Lakers", "\u6d1b\u6749\u78ef\u6e56\u4eba"], "league": ["NBA"], "include_player_stats": [true]}, "get_team_score_2": {"team_name": ["Manchester United", "Man United", "Man Utd", "\u66fc\u5fb9\u65af\u7279\u806f\u8db3\u7403\u4ff1\u6a02\u90e8", "\u66fc\u806f"], "league": ["Premier League", "EPL", "English Premier League", "\u82f1\u683c\u862d\u8db3\u7403\u8d85\u7d1a\u806f\u8cfd", "\u82f1\u8d85\u806f\u8cfd"], "include_player_stats": [true]}, "weather.humidity_forecast_1": {"location": ["New York", "New York, NY", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "days": [5], "min_humidity": [60]}, "weather.humidity_forecast_2": {"location": ["London", "\u502b\u6566"], "days": [7], "min_humidity": [""]}}}
{"id": 180, "model_name": "gorilla-openfunctions-v2", "test_category": "parallel_multiple_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_multiple_function_179", "question": "\"Can you help me with a few things? First, I need to update my user information in the CustomerInfo database. My user ID is 12345, and I want to change my name to John Doe and my email to johndoe@example.com. Second, I'm curious about the last match played by the soccer club Manchester United, and I'd like to know the match statistics as well. Third, I'm doing a history project and need to know who the U.S. president was in the year 1980, and I'd like the full name with middle initial if applicable. Lastly, I'm playing a card game and need to find the Ace of Spades in a standard 52 card deck. Can you assist with these?\"", "function": [{"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "dict", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "dict", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}}, "description": "Deck of cards. If not provided, the deck will be default to an empty array"}}, "required": ["rank", "suit"]}}, {"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}, {"name": "US_president.in_year", "description": "Retrieve the name of the U.S. president in a given year.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "The year in question."}, "full_name": {"type": "boolean", "default": true, "description": "Option to return full name with middle initial, if applicable."}}, "required": ["year"]}}, {"name": "update_user_info", "description": "Update user information in the database.", "parameters": {"type": "dict", "properties": {"user_id": {"type": "integer", "description": "The user ID of the customer."}, "update_info": {"type": "dict", "properties": {"name": {"type": "string", "description": "The customer's updated name."}, "email": {"type": "string", "description": "The customer's updated email."}}, "description": "The new information to update."}, "database": {"type": "string", "description": "The database where the user's information is stored.", "default": "CustomerInfo"}}, "required": ["user_id", "update_info"]}}]}, "model_result_raw": "update_user_info(user_id=12345, update_info={'name': 'John Doe', 'email': 'johndoe@example.com'}, database='CustomerInfo'), soccer.get_last_match(team_name='Manchester United', include_stats=True), US_president.in_year(year=1980, full_name=True), find_card_in_deck(rank='Ace', suit='Spades')", "model_result_decoded": [{"update_user_info": {"user_id": 12345, "update_info": {"name": "John Doe", "email": "johndoe@example.com"}, "database": "CustomerInfo"}}, {"soccer.get_last_match": {"team_name": "Manchester United", "include_stats": true}}, {"US_president.in_year": {"year": 1980, "full_name": true}}, {"find_card_in_deck": {"rank": "Ace", "suit": "Spades"}}], "possible_answer": {"update_user_info": {"user_id": [12345], "update_info": [{"name": ["John Doe"], "email": ["johndoe@example.com"]}], "database": ["CustomerInfo", ""]}, "soccer.get_last_match": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC", "\u66fc\u5fb9\u65af\u7279\u806f\u8db3\u7403\u4ff1\u6a02\u90e8", "\u66fc\u806f"], "include_stats": [true]}, "US_president.in_year": {"year": [1980], "full_name": [true]}, "find_card_in_deck": {"rank": ["Ace", "A"], "suit": ["Spades", "\u9ed1\u6843"]}, "deck": [[], ""]}}