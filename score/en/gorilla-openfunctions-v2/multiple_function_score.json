{"accuracy": 0.955, "correct_count": 191, "total_count": 200}
{"id": 8, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "multiple_function_7", "question": "How to assess the population growth in deer and their impact on woodland in Washington state over the past decade?", "function": [{"name": "wildlife_population.assess_growth", "description": "Assesses the population growth of a specific species in a specified location over a period.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which the growth is to be calculated."}, "location": {"type": "string", "description": "The area where the species is present."}, "duration": {"type": "integer", "description": "The time period for which the population growth should be calculated in years."}}, "required": ["species", "location", "duration"]}}, {"name": "ecological_impact.analyze", "description": "Analyzes the impact of a species on a particular ecosystem.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species whose impact is to be calculated."}, "ecosystem": {"type": "string", "description": "The ecosystem being affected."}, "location": {"type": "string", "description": "The area where the impact is analyzed."}, "timeframe": {"type": "integer", "description": "The time period for which the impact analysis should be carried out in years.", "default": 5}}, "required": ["species", "ecosystem", "location"]}}]}, "model_result_raw": "wildlife_population.assess_growth(species='deer', location='Washington state', duration=10), ecological_impact.analyze(species='deer', ecosystem='woodland', location='Washington state', timeframe=10)", "model_result_decoded": [{"wildlife_population.assess_growth": {"species": "deer", "location": "Washington state", "duration": 10}}, {"ecological_impact.analyze": {"species": "deer", "ecosystem": "woodland", "location": "Washington state", "timeframe": 10}}], "possible_answer": {"wildlife_population.assess_growth": {"species": ["deer", "Deer", "\u9e7f"], "location": ["Washington state", "WA", "Washington", "\u83ef\u76db\u9813\u5dde", "\u83ef\u76db\u9813"], "duration": [10]}}}
{"id": 25, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Function name 'route_planner.calculate_route' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"chess_club_details.find": {"name": "Edinburgh Chess Club", "city": "Edinburgh"}}, "possible_answer_item": {"route_planner.calculate_route": {"start": ["London", "\u502b\u6566"], "destination": ["Edinburgh", "\u611b\u4e01\u5821"], "method": ["fastest", "", "\u6700\u5feb"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_24", "question": "What is the fastest route from London to Edinburgh for playing a chess championship? Also provide an estimate of the distance.", "function": [{"name": "route_planner.calculate_route", "description": "Determines the best route between two points.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "The starting point of the journey."}, "destination": {"type": "string", "description": "The destination of the journey."}, "method": {"type": "string", "enum": ["fastest", "shortest", "balanced"], "description": "The method to use when calculating the route (default is 'fastest').", "default": "fastest"}}, "required": ["start", "destination"]}}, {"name": "chess_club_details.find", "description": "Provides details about a chess club, including location.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the chess club."}, "city": {"type": "string", "description": "The city in which the chess club is located."}, "event": {"type": "string", "description": "The event hosted by the club.", "default": "null"}}, "required": ["name", "city"]}}]}, "model_result_raw": "chess_club_details.find(name='Edinburgh Chess Club', city='Edinburgh')", "model_result_decoded": [{"chess_club_details.find": {"name": "Edinburgh Chess Club", "city": "Edinburgh"}}], "possible_answer": {"route_planner.calculate_route": {"start": ["London", "\u502b\u6566"], "destination": ["Edinburgh", "\u611b\u4e01\u5821"], "method": ["fastest", "", "\u6700\u5feb"]}}}
{"id": 27, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'mission': 'Assassination'. Expected one of ['']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"game_rewards.get": {"game": "Fortnite", "platform": "Playstation", "mission": "Assassination", "trophy": "Gold"}}, "possible_answer_item": {"game_rewards.get": {"game": ["Fortnite", "\u8981\u585e\u82f1\u96c4"], "platform": ["Playstation", "PS"], "mission": [""], "trophy": [""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_26", "question": "Find out the rewards for playing Fortnite on Playstation platform with different missions and trophies", "function": [{"name": "game_scores.get", "description": "Retrieve scores and rankings based on player\u2019s performance in a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "level": {"type": "integer", "description": "The level of the game for which you want to retrieve the scores."}, "player": {"type": "string", "description": "The name of the player for whom you want to retrieve scores. Default ''", "optional": true}}, "required": ["game", "platform", "level"]}}, {"name": "game_rewards.get", "description": "Retrieve information about different types of rewards that you can receive when playing a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "mission": {"type": "string", "description": "The mission for which you want to know the rewards. Default to ''", "optional": true}, "trophy": {"type": "string", "description": "The trophy level for which you want to know the rewards. Default to ''", "optional": true}}, "required": ["game", "platform"]}}, {"name": "game_missions.list", "description": "List all missions for a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}}, "required": ["game"]}}]}, "model_result_raw": "game_rewards.get(game='Fortnite', platform='Playstation', mission='Assassination', trophy='Gold')", "model_result_decoded": [{"game_rewards.get": {"game": "Fortnite", "platform": "Playstation", "mission": "Assassination", "trophy": "Gold"}}], "possible_answer": {"game_rewards.get": {"game": ["Fortnite", "\u8981\u585e\u82f1\u96c4"], "platform": ["Playstation", "PS"], "mission": [""], "trophy": [""]}}}
{"id": 41, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Function name 'electromagnetism.biot_savart_law' not found in model output."], "sub_error_type": "simple_function_checker:wrong_func_name", "model_output_item": {"electromagnetism.ampere_law": {"enclosed_current": 12, "radius": 8}}, "possible_answer_item": {"electromagnetism.biot_savart_law": {"current": [12], "distance": [8], "mu0": [1.256e-06, 1.256e-06, ""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_40", "question": "Calculate the strength of magnetic field given distance is 8 meters and current is 12 Amperes?", "function": [{"name": "electromagnetism.ampere_law", "description": "Calculate magnetic field strength using Ampere's Circuital Law. Input the current enclosed by a circular path and the distance from the center of the circle. Can be applied to a cylindrical or spherical symmetry of consistent magnetic field. ", "parameters": {"type": "dict", "properties": {"enclosed_current": {"type": "float", "description": "The total current enclosed by the loop. In Amperes."}, "radius": {"type": "float", "description": "The radius of the circle or the distance from the center of the circular path. In meters."}, "mu0": {"type": "float", "description": "Permeability of free space. Its value is default approximated to be 0.000001256 H/m. Optional"}}, "required": ["enclosed_current", "radius"]}}, {"name": "electromagnetism.biot_savart_law", "description": "Calculate magnetic field strength using Biot-Savart law. Input the current in Ampere and the distance in meters.", "parameters": {"type": "dict", "properties": {"current": {"type": "integer", "description": "The current in the conductor, in Amperes."}, "distance": {"type": "integer", "description": "Distance from the current carrying conductor, in meters."}, "mu0": {"type": "float", "description": "Permeability of free space. Its value is default approximated to be 0.000001256 H/m. Optional"}}, "required": ["current", "distance"]}}]}, "model_result_raw": "electromagnetism.ampere_law(enclosed_current=12, radius=8)", "model_result_decoded": [{"electromagnetism.ampere_law": {"enclosed_current": 12, "radius": 8}}], "possible_answer": {"electromagnetism.biot_savart_law": {"current": [12], "distance": [8], "mu0": [1.256e-06, 1.256e-06, ""]}}}
{"id": 52, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Optional parameter 'n_rolls' not provided and not marked as optional."], "sub_error_type": "simple_function_checker:missing_optional", "model_output_item": {"dice_roll_probability": {"desired_sum": 7, "sides_per_die": 6}}, "possible_answer_item": {"dice_roll_probability": {"desired_sum": [7], "sides_per_die": [6], "n_rolls": [2]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_51", "question": "Calculate the probability of rolling a sum of 7 on a roll of two dice.", "function": [{"name": "dice_roll_probability", "description": "Calculate the probability of a specific sum appearing from rolling two dice.", "parameters": {"type": "dict", "properties": {"desired_sum": {"type": "integer", "description": "The sum for which to calculate the probability."}, "n_rolls": {"type": "integer", "description": "Number of dice to be rolled. Default is 1", "optional": true}, "sides_per_die": {"type": "integer", "description": "Number of sides on each die."}}, "required": ["desired_sum", "sides_per_die"]}}, {"name": "flip_coin_probability", "description": "Calculate the probability of a specific outcome appearing from flipping a coin.", "parameters": {"type": "dict", "properties": {"desired_outcome": {"type": "string", "description": "The outcome for which to calculate the probability."}, "n_flips": {"type": "integer", "description": "Number of coins to be flipped. Default 1", "optional": true}}, "required": ["desired_outcome"]}}, {"name": "shuffle_card_probability", "description": "Calculate the probability of a specific card appearing from a shuffled deck.", "parameters": {"type": "dict", "properties": {"desired_card": {"type": "string", "description": "The card for which to calculate the probability."}, "n_decks": {"type": "integer", "description": "Number of decks to shuffle. Default 1", "optional": true}}, "required": ["desired_card"]}}]}, "model_result_raw": "dice_roll_probability(desired_sum=7, sides_per_die=6)", "model_result_decoded": [{"dice_roll_probability": {"desired_sum": 7, "sides_per_die": 6}}], "possible_answer": {"dice_roll_probability": {"desired_sum": [7], "sides_per_die": [6], "n_rolls": [2]}}}
{"id": 54, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'dependent_var': 'house_prices'. Expected one of ['house_price', 'house price']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"linear_regression": {"independent_var": ["interest_rates", "unemployment_rates"], "dependent_var": "house_prices", "forecast_period": 5}}, "possible_answer_item": {"linear_regression": {"independent_var": [["interest rates", "unemployment rates"], ["interest_rate", "unemployment_rate"], ["interest rate", "unemployment rate"], ["\u5229\u7387", "\u5931\u696d\u7387"], ["\u5931\u696d\u7387", "\u5229\u7387"]], "dependent_var": ["house_price", "house price"], "forecast_period": [5]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_53", "question": "Predict the house prices for next 5 years based on interest rates and unemployment rates.", "function": [{"name": "linear_regression", "description": "Applies linear regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}, {"name": "random_forest_regression", "description": "Applies Random Forest Regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest. Default 1", "optional": true}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}]}, "model_result_raw": "linear_regression(independent_var=['interest_rates', 'unemployment_rates'], dependent_var='house_prices', forecast_period=5)", "model_result_decoded": [{"linear_regression": {"independent_var": ["interest_rates", "unemployment_rates"], "dependent_var": "house_prices", "forecast_period": 5}}], "possible_answer": {"linear_regression": {"independent_var": [["interest rates", "unemployment rates"], ["interest_rate", "unemployment_rate"], ["interest rate", "unemployment rate"], ["\u5229\u7387", "\u5931\u696d\u7387"], ["\u5931\u696d\u7387", "\u5229\u7387"]], "dependent_var": ["house_price", "house price"], "forecast_period": [5]}}}
{"id": 81, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'services': ['Guitar Lessons', 'Violin Lessons']. Expected one of [['Violin Lessons'], ['\u5c0f\u63d0\u7434\u8ab2\u7a0b']]."], "sub_error_type": "value_error:list/tuple", "model_output_item": {"music_shop.find_nearby": {"location": "Nashville, TN", "services": ["Guitar Lessons", "Violin Lessons"]}}, "possible_answer_item": {"music_shop.find_nearby": {"location": ["Nashville, TN", "Nashville", "\u7d0d\u4ec0\u7dad\u723e", "\u7530\u7d0d\u897f\u5dde\u7d0d\u4ec0\u7dad\u723e"], "services": [["Violin Lessons"], ["\u5c0f\u63d0\u7434\u8ab2\u7a0b"]], "instruments": [["Guitars"], ["\u5409\u4ed6"]]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_80", "question": "Find a local guitar shop that also offers violin lessons in Nashville.", "function": [{"name": "music_shop.find_nearby", "description": "Locate nearby music shops based on specific criteria like instrument lessons availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "services": {"type": "array", "items": {"type": "string", "enum": ["Guitar Lessons", "Violin Lessons", "Piano Lessons", "Ukulele Lessons"]}, "description": "Types of instrument lessons offered in the shop. Default empty array"}, "instruments": {"type": "array", "items": {"type": "string", "enum": ["Guitars", "Violins", "Pianos", "Drums"]}, "description": "Types of instruments sold in the shop. Default empty array"}}, "required": ["location"]}}, {"name": "gym.find_nearby", "description": "Locate nearby gyms based on specific criteria like types of fitness classes availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "classes": {"type": "array", "items": {"type": "string", "enum": ["Yoga", "Spin", "Zumba", "CrossFit"]}, "description": "Types of fitness classes offered in the gym. Default empty array"}, "equipment": {"type": "array", "items": {"type": "string", "enum": ["Treadmills", "Ellipticals", "Weight Machines", "Free Weights"]}, "description": "Types of gym equipment available. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "music_shop.find_nearby(location='Nashville, TN', services=['Guitar Lessons', 'Violin Lessons'])", "model_result_decoded": [{"music_shop.find_nearby": {"location": "Nashville, TN", "services": ["Guitar Lessons", "Violin Lessons"]}}], "possible_answer": {"music_shop.find_nearby": {"location": ["Nashville, TN", "Nashville", "\u7d0d\u4ec0\u7dad\u723e", "\u7530\u7d0d\u897f\u5dde\u7d0d\u4ec0\u7dad\u723e"], "services": [["Violin Lessons"], ["\u5c0f\u63d0\u7434\u8ab2\u7a0b"]], "instruments": [["Guitars"], ["\u5409\u4ed6"]]}}}
{"id": 135, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Could not find a matching function among index [0] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Optional parameter 'details' not provided and not marked as optional."], "sub_error_type": "simple_function_checker:missing_optional", "model_output_item": {"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego"}}, "possible_answer_item": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "San Diego County", "\u8056\u5730\u7259\u54e5"], "details": [true]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "multiple_function_134", "question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": [{"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "float", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}, {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}, {"name": "get_highest_scoring_player", "description": "Retrieve the highest scoring player in a specific game and season.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game in which you want to find the highest scoring player."}, "season": {"type": "string", "description": "The season during which the high score was achieved."}, "region": {"type": "string", "description": "The geographical region in which the game is being played (Optional). Defaults to 'USA'"}}, "required": ["game", "season"]}}, {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "dict", "properties": {"principle": {"type": "float", "description": "The initial amount of the investment."}, "interest_rate": {"type": "float", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}]}, "model_result_raw": "crime_record.get_record(case_number='CA123456', county='San Diego')", "model_result_decoded": [{"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego"}}], "possible_answer": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "San Diego County", "\u8056\u5730\u7259\u54e5"], "details": [true]}}}
{"id": 150, "model_name": "gorilla-openfunctions-v2", "test_category": "multiple_function", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_function_149", "question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}, {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "dict", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}, {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "height": {"type": "integer", "description": "The height of the person in centimeters."}, "system": {"type": "string", "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, "required": ["weight", "height"]}}]}, "model_result_raw": "sentiment_analysis(text='I love the food here! It's always fresh and delicious.', language='English')", "possible_answer": {"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious.", "\u6211\u559c\u6b61\u9019\u88e1\u7684\u98df\u7269\uff01\u5b83\u7e3d\u662f\u65b0\u9bae\u53c8\u7f8e\u5473\u3002", "\u6211\u559c\u6b61\u9019\u88e1\u7684\u98df\u7269\uff01\u5b83\u7e3d\u662f\u65b0\u9bae\u53c8\u7f8e\u5473"], "language": ["english", "English", "\u4e2d\u6587", "\u7e41\u9ad4\u4e2d\u6587"]}}}