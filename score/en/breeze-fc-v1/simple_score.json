{"accuracy": 0.9, "correct_count": 360, "total_count": 400}
{"id": 14, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"calculate_area_under_curve\", \"arguments\": \"{\\\"function\\\": \\\"x**2\\\", \\\"interval\\\": [1, 3]}\"}<|tool_call_end|>", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x**2", "interval": [1, 3]}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y = x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal", "\u68af\u5f62"]}}}
{"id": 18, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'formatted'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_17", "question": "Find the prime factors of 450", "function": {"name": "get_prime_factors", "description": "Function to retrieve prime factors of a number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "Number for which prime factors need to be calculated"}, "formatted": {"type": "boolean", "description": "Return formatted string if true, array if false. Default is true."}}, "required": ["number", "formatted"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_prime_factors\", \"arguments\": \"{\\\"number\\\": 450}\"}<|tool_call_end|>", "model_result_decoded": [{"get_prime_factors": {"number": 450}}], "possible_answer": {"get_prime_factors": {"number": [450], "formatted": [true, ""]}}}
{"id": 43, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'inductance': 5e-05. Expected one of [0.05]."], "error_type": "value_error:others", "prompt": {"id": "simple_42", "question": "Calculate the resonant frequency of an LC circuit given capacitance of 100\u00b5F and inductance of 50mH.", "function": {"name": "calculate_resonant_frequency", "description": "Calculate the resonant frequency of an LC (inductor-capacitor) circuit.", "parameters": {"type": "dict", "properties": {"inductance": {"type": "float", "description": "The inductance (L) in henries (H)."}, "capacitance": {"type": "float", "description": "The capacitance (C) in farads (F)."}, "round_off": {"type": "integer", "description": "Rounding off the result to a certain decimal places, default is 2."}}, "required": ["inductance", "capacitance"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"calculate_resonant_frequency\", \"arguments\": \"{\\\"inductance\\\": 0.00005, \\\"capacitance\\\": 0.0001, \\\"round_off\\\": 6}\"}<|tool_call_end|>", "model_result_decoded": [{"calculate_resonant_frequency": {"inductance": 5e-05, "capacitance": 0.0001, "round_off": 6}}], "possible_answer": {"calculate_resonant_frequency": {"inductance": [0.05], "capacitance": [0.0001], "round_off": ["", 2]}}}
{"id": 56, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_type': 'human cell'. Expected one of ['human', '\u4eba', '\u4eba\u985e', '\u4eba\u985e\u7d30\u80de']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_55", "question": "Find me detailed information about the structure of human cell", "function": {"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"biology.get_cell_info\", \"arguments\": \"{\\\"cell_type\\\": \\\"human cell\\\", \\\"detailed\\\": true}\"}<|tool_call_end|>", "model_result_decoded": [{"biology.get_cell_info": {"cell_type": "human cell", "detailed": true}}], "possible_answer": {"biology.get_cell_info": {"cell_type": ["human", "\u4eba", "\u4eba\u985e", "\u4eba\u985e\u7d30\u80de"], "detailed": [true]}}}
{"id": 60, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'to_unit': 'g/mole'. Expected one of ['grams/mole', 'g/mol', '\u514b/\u83ab\u8033']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_59", "question": "Calculate the molecular weight of Glucose (C6H12O6) in grams/mole.", "function": {"name": "calculate_molecular_weight", "description": "Calculate the molecular weight of a compound given the compound formula.", "parameters": {"type": "dict", "properties": {"compound": {"type": "string", "description": "The molecular formula of the compound."}, "to_unit": {"type": "string", "description": "The unit in which to return the result."}}, "required": ["compound", "to_unit"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"calculate_molecular_weight\", \"arguments\": \"{\\\"compound\\\": \\\"C6H12O6\\\", \\\"to_unit\\\": \\\"g/mole\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"calculate_molecular_weight": {"compound": "C6H12O6", "to_unit": "g/mole"}}], "possible_answer": {"calculate_molecular_weight": {"compound": ["C6H12O6"], "to_unit": ["grams/mole", "g/mol", "\u514b/\u83ab\u8033"]}}}
{"id": 70, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Optional parameter 'species' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_69", "question": "Find out the population and species of turtles in Mississippi river in 2020.", "function": {"name": "ecology.get_turtle_population", "description": "Get the population and species of turtles in a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location."}, "year": {"type": "integer", "description": "The year of the data requested. Default is 2001."}, "species": {"type": "boolean", "description": "Whether to include species information. Default is false."}}, "required": ["location"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"ecology.get_turtle_population\", \"arguments\": \"{\\\"location\\\": \\\"Mississippi river\\\", \\\"year\\\": 2020}\"}<|tool_call_end|>", "model_result_decoded": [{"ecology.get_turtle_population": {"location": "Mississippi river", "year": 2020}}], "possible_answer": {"ecology.get_turtle_population": {"location": ["Mississippi river", "\u5bc6\u897f\u897f\u6bd4\u6cb3"], "year": [2020], "species": [true]}}}
{"id": 78, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dietary_preference': ['Vegan']. Expected one of [['Vegan', '\u7d20', '\u7d20\u98df']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_77", "question": "Find a nearby restaurant that serves vegan food in Los Angeles.", "function": {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty list."}}, "required": ["location"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"restaurant.find_nearby\", \"arguments\": \"{\\\"location\\\": \\\"Los Angeles, CA\\\", \\\"dietary_preference\\\": [\\\"Vegan\\\"]}\"}<|tool_call_end|>", "model_result_decoded": [{"restaurant.find_nearby": {"location": "Los Angeles, CA", "dietary_preference": ["Vegan"]}}], "possible_answer": {"restaurant.find_nearby": {"location": ["Los Angeles, CA", "\u52a0\u5dde\u6d1b\u6749\u78ef", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef", "\u6d1b\u6749\u78ef, CA"], "dietary_preference": [["Vegan", "\u7d20", "\u7d20\u98df"]]}}}
{"id": 88, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"array_sort\", \"arguments\": \"{\\\"list\\\": [5, 3, 4, 1, 2], \\\"order\\\": \\\"ascending\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending", "\u5347\u5e8f", "\u905e\u589e"]}}}
{"id": 95, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'database': 'customer_db'. Expected one of ['CustomerInfo', '', '\u5ba2\u6236\u8cc7\u8a0a', '\u9867\u5ba2\u8cc7\u8a0a']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_94", "question": "Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database.", "function": {"name": "update_user_info", "description": "Update user information in the database.", "parameters": {"type": "dict", "properties": {"user_id": {"type": "integer", "description": "The user ID of the customer."}, "update_info": {"type": "dict", "properties": {"name": {"type": "string", "description": "The customer's updated name."}, "email": {"type": "string", "description": "The customer's updated email."}}, "description": "The new information to update."}, "database": {"type": "string", "description": "The database where the user's information is stored.", "default": "CustomerInfo"}}, "required": ["user_id", "update_info"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"update_user_info\", \"arguments\": \"{\\\"user_id\\\": 43523, \\\"update_info\\\": {\\\"name\\\": \\\"John Doe\\\", \\\"email\\\": \\\"johndoe@email.com\\\"}, \\\"database\\\": \\\"customer_db\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"update_user_info": {"user_id": 43523, "update_info": {"name": "John Doe", "email": "johndoe@email.com"}, "database": "customer_db"}}], "possible_answer": {"update_user_info": {"user_id": [43523], "update_info": [{"name": ["John Doe"], "email": ["johndoe@email.com"]}], "database": ["CustomerInfo", "", "\u5ba2\u6236\u8cc7\u8a0a", "\u9867\u5ba2\u8cc7\u8a0a"]}}}
{"id": 99, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hours': 18. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"id": "simple_98", "question": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?", "function": {"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "dict", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"calculate_clock_angle\", \"arguments\": \"{\\\"hours\\\": 18, \\\"minutes\\\": 30}\"}<|tool_call_end|>", "model_result_decoded": [{"calculate_clock_angle": {"hours": 18, "minutes": 30}}], "possible_answer": {"calculate_clock_angle": {"hours": [6], "minutes": [30], "round_to": ["", 2]}}}
{"id": 100, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'end_range'. Expected type float, got str. Parameter value: '2 * math.pi'."], "error_type": "type_error:simple", "prompt": {"id": "simple_99", "question": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz.", "function": {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians. Four decimal places."}, "end_range": {"type": "float", "description": "End of the range in radians. Four decimal places."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"plot_sine_wave\", \"arguments\": \"{\\\"start_range\\\": 0, \\\"end_range\\\": \\\"2 * math.pi\\\", \\\"frequency\\\": 5}\"}<|tool_call_end|>", "model_result_decoded": [{"plot_sine_wave": {"start_range": 0, "end_range": "2 * math.pi", "frequency": 5}}], "possible_answer": {"plot_sine_wave": {"start_range": [0.0], "end_range": [6.2832], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}}
{"id": 104, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"mathematics.calculate_area_under_curve\", \"arguments\": \"{\\\"polynomial\\\": [3, 2, -4], \\\"limits\\\": [-1, 2]}\"}<|tool_call_end|>", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 123, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': [10, 20, 30, 40]. Expected one of [[[10, 20], [30, 40]]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_122", "question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "integer"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"chi_squared_test\", \"arguments\": \"{\\\"table\\\": [10, 20, 30, 40]}\"}<|tool_call_end|>", "model_result_decoded": [{"chi_squared_test": {"table": [10, 20, 30, 40]}}], "possible_answer": {"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}}
{"id": 137, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_rate': 0.05. Expected one of [5]."], "error_type": "value_error:others", "prompt": {"id": "simple_136", "question": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years.", "function": {"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "float", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "integer", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"compound_interest\", \"arguments\": \"{\\\"principal\\\": 10000, \\\"annual_rate\\\": 0.05, \\\"compounding_freq\\\": \\\"monthly\\\", \\\"time_in_years\\\": 5}\"}<|tool_call_end|>", "model_result_decoded": [{"compound_interest": {"principal": 10000, "annual_rate": 0.05, "compounding_freq": "monthly", "time_in_years": 5}}], "possible_answer": {"compound_interest": {"principal": [10000], "annual_rate": [5], "compounding_freq": ["monthly", "\u6708", "\u6bcf\u6708"], "time_in_years": [5]}}}
{"id": 152, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_151", "question": "Find the highest grossing bank in the U.S for year 2020.", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"highest_grossing_banks\", \"arguments\": \"{\\\"country\\\": \\\"U.S\\\", \\\"year\\\": 2020}\"}<|tool_call_end|>", "model_result_decoded": [{"highest_grossing_banks": {"country": "U.S", "year": 2020}}], "possible_answer": {"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S.", "\u7f8e\u570b"], "year": [2020], "top_n": [1]}}}
{"id": 157, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Optional parameter 'details' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_156", "question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"crime_record.get_record\", \"arguments\": \"{\\\"case_number\\\": \\\"CA123456\\\", \\\"county\\\": \\\"San Diego\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego"}}], "possible_answer": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "\u8056\u5730\u7259\u54e5"], "details": [true]}}}
{"id": 167, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'specialty': ['Divorce']. Expected one of [['Divorce', '\u96e2\u5a5a']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_166", "question": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.", "function": {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"lawyer.find_nearby\", \"arguments\": \"{\\\"city\\\": \\\"Chicago, IL\\\", \\\"specialty\\\": [\\\"Divorce\\\"], \\\"fee\\\": 399}\"}<|tool_call_end|>", "model_result_decoded": [{"lawyer.find_nearby": {"city": "Chicago, IL", "specialty": ["Divorce"], "fee": 399}}], "possible_answer": {"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL", "\u829d\u52a0\u54e5", "\u4f0a\u5229\u8afe\u5dde\u829d\u52a0\u54e5", "\u829d\u52a0\u54e5, IL"], "specialty": [["Divorce", "\u96e2\u5a5a"]], "fee": [400]}}}
{"id": 178, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'status': 'open'. Expected one of ['all', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_177", "question": "Find all Patent lawsuit cases of Facebook in 2018.", "function": {"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_lawsuit_cases\", \"arguments\": \"{\\\"company_name\\\": \\\"Facebook\\\", \\\"year\\\": 2018, \\\"status\\\": \\\"open\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"get_lawsuit_cases": {"company_name": "Facebook", "year": 2018, "status": "open"}}], "possible_answer": {"get_lawsuit_cases": {"company_name": ["Facebook", "\u81c9\u66f8"], "year": [2018], "status": ["all", ""]}}}
{"id": 184, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara'. Expected one of ['Santa Clara County', '\u8056\u5854\u514b\u62c9\u62c9', '\u8056\u5854\u514b\u62c9\u62c9\u7e23']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_183", "question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"lawsuit_search\", \"arguments\": \"{\\\"entity\\\": \\\"Apple\\\", \\\"county\\\": \\\"Santa Clara\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"lawsuit_search": {"entity": "Apple", "county": "Santa Clara"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple", "\u860b\u679c"], "county": ["Santa Clara County", "\u8056\u5854\u514b\u62c9\u62c9", "\u8056\u5854\u514b\u62c9\u62c9\u7e23"], "state": ["California", "", "\u52a0\u5dde", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde"]}}}
{"id": 198, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time': '2023-04-01T12:00:00'. Expected one of ['12pm', '12:00']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_197", "question": "Find the air quality index in San Diego at 12pm.", "function": {"name": "get_air_quality_index", "description": "Retrieve the air quality index at a specified location and time.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to get the air quality index for."}, "time": {"type": "string", "description": "The specific time to check the air quality. Default is the current time."}}, "required": ["location", "time"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_air_quality_index\", \"arguments\": \"{\\\"location\\\": \\\"San Diego\\\", \\\"time\\\": \\\"2023-04-01T12:00:00\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"get_air_quality_index": {"location": "San Diego", "time": "2023-04-01T12:00:00"}}], "possible_answer": {"get_air_quality_index": {"location": ["San Diego", "\u8056\u5730\u4e9e\u54e5"], "time": ["12pm", "12:00"]}}}
{"id": 215, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'genre': 'rock concert'. Expected one of ['Rock', 'rock', '\u6416\u6efe', '\u6416\u6efe\u6a02']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_214", "question": "Search for upcoming month rock concerts in New York.", "function": {"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"event_finder.find_upcoming\", \"arguments\": \"{\\\"location\\\": \\\"New York\\\", \\\"genre\\\": \\\"rock concert\\\", \\\"days_ahead\\\": 30}\"}<|tool_call_end|>", "model_result_decoded": [{"event_finder.find_upcoming": {"location": "New York", "genre": "rock concert", "days_ahead": 30}}], "possible_answer": {"event_finder.find_upcoming": {"location": ["New York", "New York, NY", "NYC", "\u7d10\u7d04", "\u7d10\u7d04\u5e02", "\u7d10\u7d04, NY"], "genre": ["Rock", "rock", "\u6416\u6efe", "\u6416\u6efe\u6a02"], "days_ahead": [30]}}}
{"id": 234, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Optional parameter 'format' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_233", "question": "When did the Treaty of Tordesillas take place? Put it in the format of YYYY.", "function": {"name": "european_history.get_event_date", "description": "Retrieve the date of a specific event in European history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "format": {"type": "string", "description": "Optional format of the returned date. Default is 'MM-DD-YYYY'."}}, "required": ["event_name"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"european_history.get_event_date\", \"arguments\": \"{\\\"event_name\\\": \\\"Treaty of Tordesillas\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"european_history.get_event_date": {"event_name": "Treaty of Tordesillas"}}], "possible_answer": {"european_history.get_event_date": {"event_name": ["Treaty of Tordesillas", "\u6258\u5fb7\u897f\u5229\u4e9e\u65af\u689d\u7d04"], "format": ["YYYY"]}}}
{"id": 235, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'region': 'Europe'. Expected one of ['Northern', 'Southern', 'Eastern', 'Western', '\u5317\u65b9', '\u5357\u65b9', '\u6771\u65b9', '\u897f\u65b9']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_234", "question": "Find important Wars in European history during the 19th century.", "function": {"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"history_eu.fetch_events\", \"arguments\": \"{\\\"century\\\": 19, \\\"region\\\": \\\"Europe\\\", \\\"category\\\": \\\"Wars\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"history_eu.fetch_events": {"century": 19, "region": "Europe", "category": "Wars"}}], "possible_answer": {"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western", "\u5317\u65b9", "\u5357\u65b9", "\u6771\u65b9", "\u897f\u65b9"], "category": ["Wars", "\u6230\u722d"]}}}
{"id": 239, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'year'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_238", "question": "Who was the president of the United States during the American Civil War?", "function": {"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"us_history.get_president\", \"arguments\": \"{\\\"event\\\": \\\"American Civil War\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"us_history.get_president": {"event": "American Civil War"}}], "possible_answer": {"us_history.get_president": {"event": ["American Civil War", "\u7f8e\u570b\u5167\u6230"], "year": [1861]}}}
{"id": 245, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'work_title': 'Philosophi\u00e6 Naturalis Principia Mathematica'. Expected one of ['Law of Universal Gravitation', 'Universal Law of Gravitation', 'The law of universal gravitation', '\u842c\u6709\u5f15\u529b\u5b9a\u5f8b']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_244", "question": "What year was the law of universal gravitation published by Isaac Newton?", "function": {"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"publication_year.find\", \"arguments\": \"{\\\"author\\\": \\\"Isaac Newton\\\", \\\"work_title\\\": \\\"Philosophi\u00e6 Naturalis Principia Mathematica\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"publication_year.find": {"author": "Isaac Newton", "work_title": "Philosophi\u00e6 Naturalis Principia Mathematica"}}], "possible_answer": {"publication_year.find": {"author": ["Isaac Newton", "\u827e\u85a9\u514b\u00b7\u725b\u9813", "\u827e\u85a9\u514b\u725b\u9813"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation", "\u842c\u6709\u5f15\u529b\u5b9a\u5f8b"], "location": ["", "all"]}}}
{"id": 268, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY', '\u7d10\u7d04\u5e02', '\u7d10\u7d04']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"find_exhibition\", \"arguments\": \"{\\\"location\\\": \\\"New York\\\", \\\"art_form\\\": \\\"sculpture\\\", \\\"month\\\": \\\"upcoming\\\", \\\"user_ratings\\\": \\\"high\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "sculpture", "month": "upcoming", "user_ratings": "high"}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY", "\u7d10\u7d04\u5e02", "\u7d10\u7d04"], "art_form": ["sculpture", "modern sculpture", "\u96d5\u5851", "\u73fe\u4ee3\u96d5\u5851", "\u96d5\u50cf", "\u73fe\u4ee3\u96d5\u50cf"], "month": [""], "user_ratings": ["high", "\u9ad8", "\u6700\u9ad8"]}}}
{"id": 278, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Optional parameter 'information' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_277", "question": "Find the working hours and ticket price of The British Museum for this weekend.", "function": {"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date or date range for which information is needed. It could be specific date such as '2022-12-01' or a date range like 'this weekend', 'next week'. It could also be a recurring time such as 'every Saturday'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"museum_info\", \"arguments\": \"{\\\"museum\\\": \\\"The British Museum\\\", \\\"date\\\": \\\"this weekend\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"museum_info": {"museum": "The British Museum", "date": "this weekend"}}], "possible_answer": {"museum_info": {"museum": ["The British Museum", "\u5927\u82f1\u535a\u7269\u9928"], "date": ["this weekend", "2023-06-20", "06/20/2023", "Jun.20,2023", "\u9019\u500b\u9031\u672b"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"], ["\u9580\u7968\u50f9\u683c", "\u71df\u696d\u6642\u9593"], ["\u71df\u696d\u6642\u9593", "\u9580\u7968\u50f9\u683c"]]}}}
{"id": 300, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': 'C sharp major'. Expected one of ['C#', 'C sharp']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_299", "question": "What is the musical scale associated with C sharp major?", "function": {"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"musical_scale\", \"arguments\": \"{\\\"key\\\": \\\"C sharp major\\\", \\\"scale_type\\\": \\\"major\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"musical_scale": {"key": "C sharp major", "scale_type": "major"}}], "possible_answer": {"musical_scale": {"key": ["C#", "C sharp"], "scale_type": ["major", "", "\u5927\u8abf"]}}}
{"id": 309, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'league': 'Premier League'. Expected one of ['English Premier League', '', '\u82f1\u683c\u862d\u8db3\u7403\u8d85\u7d1a\u806f\u8cfd', '\u82f1\u8d85\u806f\u8cfd']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_308", "question": "What are the next five matches for Manchester United and who are they playing against in Premier League?", "function": {"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter. Default is 'English Premier League'."}}, "required": ["team_name", "num_matches"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"sports.match_schedule\", \"arguments\": \"{\\\"team_name\\\": \\\"Manchester United\\\", \\\"num_matches\\\": 5, \\\"league\\\": \\\"Premier League\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"sports.match_schedule": {"team_name": "Manchester United", "num_matches": 5, "league": "Premier League"}}], "possible_answer": {"sports.match_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC", "\u66fc\u5fb9\u65af\u7279\u806f\u8db3\u7403\u4ff1\u6a02\u90e8", "\u66fc\u806f"], "num_matches": [5], "league": ["English Premier League", "", "\u82f1\u683c\u862d\u8db3\u7403\u8d85\u7d1a\u806f\u8cfd", "\u82f1\u8d85\u806f\u8cfd"]}}}
{"id": 335, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Optional parameter 'ace_value' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_334", "question": "Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1.", "function": {"name": "blackjack.check_winner", "description": "Checks and determines the winner in a game of blackjack.", "parameters": {"type": "dict", "properties": {"player_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the player."}, "dealer_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the dealer."}, "ace_value": {"type": "integer", "description": "The value considered for the ace card, can be either 1 or 11.", "default": 11}}, "required": ["player_cards", "dealer_cards"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"blackjack.check_winner\", \"arguments\": \"{\\\"player_cards\\\": [\\\"A\\\", \\\"10\\\"], \\\"dealer_cards\\\": [\\\"10\\\", \\\"9\\\"]}\"}<|tool_call_end|>", "model_result_decoded": [{"blackjack.check_winner": {"player_cards": ["A", "10"], "dealer_cards": ["10", "9"]}}], "possible_answer": {"blackjack.check_winner": {"player_cards": [["A", "10"]], "dealer_cards": [["10", "9"]], "ace_value": [1]}}}
{"id": 339, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'desired_cards': 14. Expected one of [13]."], "error_type": "value_error:others", "prompt": {"id": "simple_338", "question": "What is the probability of drawing a heart card from a deck of 52 cards?", "function": {"name": "card_game_probability.calculate", "description": "Calculate the probability of drawing a certain card or suit from a deck of cards.", "parameters": {"type": "dict", "properties": {"total_cards": {"type": "integer", "description": "Total number of cards in the deck."}, "desired_cards": {"type": "integer", "description": "Number of cards in the deck that satisfy the conditions."}, "cards_drawn": {"type": "integer", "default": 1, "description": "Number of cards drawn from the deck."}}, "required": ["total_cards", "desired_cards"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"card_game_probability.calculate\", \"arguments\": \"{\\\"total_cards\\\": 52, \\\"desired_cards\\\": 14}\"}<|tool_call_end|>", "model_result_decoded": [{"card_game_probability.calculate": {"total_cards": 52, "desired_cards": 14}}], "possible_answer": {"card_game_probability.calculate": {"total_cards": [52], "desired_cards": [13], "cards_drawn": ["", 1]}}}
{"id": 340, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'deck_size'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_339", "question": "What is the probability of getting a full house in poker?", "function": {"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "dict", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"poker_probability.full_house\", \"arguments\": \"{}\"}<|tool_call_end|>", "model_result_decoded": [{"poker_probability.full_house": {}}], "possible_answer": {"poker_probability.full_house": {"deck_size": [52], "hand_size": [5]}}}
{"id": 363, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'review_rate': 0.8. Expected one of [4.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_362", "question": "What are the top five sushi restaurants with high reviews i.e. above 4/5 in Tokyo?", "function": {"name": "get_best_sushi_places", "description": "Returns the best sushi places given the city, review_rate and top number.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city in which to look for the sushi places."}, "top": {"type": "integer", "description": "The number of top sushi places to be returned."}, "review_rate": {"type": "float", "description": "The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00."}}, "required": ["city", "top"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"get_best_sushi_places\", \"arguments\": \"{\\\"city\\\": \\\"Tokyo\\\", \\\"top\\\": 5, \\\"review_rate\\\": 0.8}\"}<|tool_call_end|>", "model_result_decoded": [{"get_best_sushi_places": {"city": "Tokyo", "top": 5, "review_rate": 0.8}}], "possible_answer": {"get_best_sushi_places": {"city": ["Tokyo", "\u6771\u4eac"], "top": [5], "review_rate": [4.0]}}}
{"id": 368, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe_type': 'brownies'. Expected one of ['dessert', '\u751c\u9ede']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_367", "question": "Find me a vegan recipe for brownies which prep time is under 30 minutes.", "function": {"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"find_recipe\", \"arguments\": \"{\\\"dietary_restrictions\\\": \\\"vegan\\\", \\\"recipe_type\\\": \\\"brownies\\\", \\\"time\\\": 30}\"}<|tool_call_end|>", "model_result_decoded": [{"find_recipe": {"dietary_restrictions": "vegan", "recipe_type": "brownies", "time": 30}}], "possible_answer": {"find_recipe": {"dietary_restrictions": ["vegan", "\u7d20", "\u7d14\u7d20"], "recipe_type": ["dessert", "\u751c\u9ede"], "time": [30]}}}
{"id": 373, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product': 'organic bananas'. Expected one of ['bananas', '\u9999\u8549']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_372", "question": "Find the top five organic bananas brands on the basis of rating from Whole Foods store.", "function": {"name": "whole_foods.find_top_brands", "description": "Get top brands based on a specific product from Whole Foods", "parameters": {"type": "dict", "properties": {"product": {"type": "string", "description": "The product for which the top brands should be fetched."}, "number": {"type": "integer", "description": "Number of top brands to be fetched. Default is 5"}, "organic": {"type": "boolean", "description": "If the product should be organic. Default is false"}}, "required": ["product"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"whole_foods.find_top_brands\", \"arguments\": \"{\\\"product\\\": \\\"organic bananas\\\", \\\"number\\\": 5, \\\"organic\\\": true}\"}<|tool_call_end|>", "model_result_decoded": [{"whole_foods.find_top_brands": {"product": "organic bananas", "number": 5, "organic": true}}], "possible_answer": {"whole_foods.find_top_brands": {"product": ["bananas", "\u9999\u8549"], "number": [5, ""], "organic": [true]}}}
{"id": 374, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product_list': ['apples', 'rice', '12 pack bottled water']. Expected one of [['apples', 'rice', 'bottled water'], ['apples', 'rice', 'water'], ['\u860b\u679c', '\u7c73\u98ef', '\u6c34'], ['\u860b\u679c', '\u7c73\u98ef', '\u74f6\u88dd\u6c34']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_373", "question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"walmart.purchase\", \"arguments\": \"{\\\"loc\\\": \\\"San Jose\\\", \\\"product_list\\\": [\\\"apples\\\", \\\"rice\\\", \\\"12 pack bottled water\\\"]}\"}<|tool_call_end|>", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "12 pack bottled water"]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA", "\u8056\u8377\u897f", "\u52a0\u5dde\u8056\u8377\u897f", "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u8056\u8377\u897f"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"], ["\u860b\u679c", "\u7c73\u98ef", "\u6c34"], ["\u860b\u679c", "\u7c73\u98ef", "\u74f6\u88dd\u6c34"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkins', 'dozen eggs']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'dozen eggs'], ['\u5357\u74dc', '\u96de\u86cb'], ['\u5357\u74dc', '\u86cb']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_375", "question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"walmart.check_price\", \"arguments\": \"{\\\"items\\\": [\\\"pumpkins\\\", \\\"dozen eggs\\\"], \\\"quantities\\\": [3, 2]}\"}<|tool_call_end|>", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkins", "dozen eggs"], "quantities": [3, 2]}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"], ["\u5357\u74dc", "\u96de\u86cb"], ["\u5357\u74dc", "\u86cb"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA", "\u6d1b\u6749\u78ef"]}}}
{"id": 377, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Optional parameter 'display_format' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_376", "question": "What time is it currently in London, UK in 24 hour format?", "function": {"name": "time_zone_converter", "description": "Retrieve the current time of a specific city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city you want to know the current time for."}, "country": {"type": "string", "description": "The country where the city is located."}, "display_format": {"type": "string", "description": "The time display format: '12h' or '24h'. Default is '24h'."}}, "required": ["city", "country"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"time_zone_converter\", \"arguments\": \"{\\\"city\\\": \\\"London\\\", \\\"country\\\": \\\"UK\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"time_zone_converter": {"city": "London", "country": "UK"}}], "possible_answer": {"time_zone_converter": {"city": ["London", "\u502b\u6566"], "country": ["UK", "United Kingdom", "\u82f1\u570b"], "display_format": ["24h", "24 hour", "24\u5c0f\u6642"]}}}
{"id": 381, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Optional parameter 'preferences' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_380", "question": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023.", "function": {"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"hotel_booking\", \"arguments\": \"{\\\"location\\\": \\\"Manhattan, New York\\\", \\\"room_type\\\": \\\"single\\\", \\\"duration\\\": 3, \\\"start_date\\\": \\\"2023-03-10\\\"}\"}<|tool_call_end|>", "model_result_decoded": [{"hotel_booking": {"location": "Manhattan, New York", "room_type": "single", "duration": 3, "start_date": "2023-03-10"}}], "possible_answer": {"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City", "\u7d10\u7d04\u66fc\u54c8\u9813", "\u7d10\u7d04\u5e02"], "room_type": ["single", "\u55ae\u4eba"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023", "2023\u5e743\u670810\u65e5"], "preferences": [["pet_friendly"], ["\u5bf5\u7269\u53cb\u5584"]]}}}
{"id": 388, "model_name": "breeze-fc-v1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_date': '2022-06-03'. Expected one of ['2022-06-04', '06/04/2022', 'Jun.4,2022', '2022\u5e746\u67084\u65e5']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_387", "question": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022", "function": {"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}}, "model_result_raw": "<|use_tool|><|tool_call_begin|> {\"name\": \"hotel_booking\", \"arguments\": \"{\\\"hotel_name\\\": \\\"Plaza Hotel\\\", \\\"location\\\": \\\"New York, NY\\\", \\\"start_date\\\": \\\"2022-06-01\\\", \\\"end_date\\\": \\\"2022-06-03\\\", \\\"rooms\\\": 1}\"}<|tool_call_end|>", "model_result_decoded": [{"hotel_booking": {"hotel_name": "Plaza Hotel", "location": "New York, NY", "start_date": "2022-06-01", "end_date": "2022-06-03", "rooms": 1}}], "possible_answer": {"hotel_booking": {"hotel_name": ["Plaza Hotel", "\u5ee3\u5834\u9152\u5e97", "\u7d10\u7d04\u5ee3\u5834\u9152\u5e97"], "location": ["New York City, NY", "New York, NY", "\u7d10\u7d04", "\u7d10\u7d04\u5e02"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022", "2022\u5e746\u67081\u65e5"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022", "2022\u5e746\u67084\u65e5"], "rooms": [1, ""]}}}